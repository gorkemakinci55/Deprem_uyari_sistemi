
deprem uyari.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c58  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003d18  08003d18  00013d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d90  08003d90  00020008  2**0
                  CONTENTS
  4 .ARM          00000008  08003d90  08003d90  00013d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d98  08003d98  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d98  08003d98  00013d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d9c  08003d9c  00013d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08003da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000568  20000008  08003da8  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  08003da8  00020570  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d04e  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001eda  00000000  00000000  0002d07e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d40  00000000  00000000  0002ef58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c38  00000000  00000000  0002fc98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002208  00000000  00000000  000308d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a671  00000000  00000000  00032ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007a75e  00000000  00000000  0003d149  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b78a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f5c  00000000  00000000  000b7924  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d00 	.word	0x08003d00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	08003d00 	.word	0x08003d00

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <enqueue>:
    queue->tail = -1;
    queue->head = -1;
    queue->size = 0;
}

int enqueue(queue* myqueue, char value) {
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	000a      	movs	r2, r1
 8000442:	1cfb      	adds	r3, r7, #3
 8000444:	701a      	strb	r2, [r3, #0]
    }
    else{
        ++myqueue->tail;
        myqueue->QueueBuffer[myqueue->tail] = value;
    }
}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	0018      	movs	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}

08000450 <dequeue>:

char dequeue(queue* myqueue) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]

    if(myqueue->size < 1){
        //error;
    }

    char tmp = myqueue->QueueBuffer[myqueue->head];
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	685a      	ldr	r2, [r3, #4]
 800045c:	200f      	movs	r0, #15
 800045e:	183b      	adds	r3, r7, r0
 8000460:	6879      	ldr	r1, [r7, #4]
 8000462:	188a      	adds	r2, r1, r2
 8000464:	7c12      	ldrb	r2, [r2, #16]
 8000466:	701a      	strb	r2, [r3, #0]
    ++myqueue->head;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	1c5a      	adds	r2, r3, #1
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	605a      	str	r2, [r3, #4]
    --myqueue->size;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	689b      	ldr	r3, [r3, #8]
 8000476:	1e5a      	subs	r2, r3, #1
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	609a      	str	r2, [r3, #8]
    return tmp;
 800047c:	183b      	adds	r3, r7, r0
 800047e:	781b      	ldrb	r3, [r3, #0]

}
 8000480:	0018      	movs	r0, r3
 8000482:	46bd      	mov	sp, r7
 8000484:	b004      	add	sp, #16
 8000486:	bd80      	pop	{r7, pc}

08000488 <clear_queue>:

void clear_queue(queue* queue){
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < MAX_SIZE_OF_ARRAY; ++i){
 8000490:	2300      	movs	r3, #0
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	e008      	b.n	80004a8 <clear_queue+0x20>
        queue->QueueBuffer[i] = 0;
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	18d3      	adds	r3, r2, r3
 800049c:	3310      	adds	r3, #16
 800049e:	2200      	movs	r2, #0
 80004a0:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < MAX_SIZE_OF_ARRAY; ++i){
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	3301      	adds	r3, #1
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	2bc7      	cmp	r3, #199	; 0xc7
 80004ac:	ddf3      	ble.n	8000496 <clear_queue+0xe>
    }
}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b004      	add	sp, #16
 80004b4:	bd80      	pop	{r7, pc}
	...

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fd1b 	bl	8000ef8 <HAL_Init>

  //bc95_at_start_check(bc95);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f9c3 	bl	800084c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 fb23 	bl	8000b10 <MX_GPIO_Init>
  MX_SPI2_Init();
 80004ca:	f000 fa33 	bl	8000934 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80004ce:	f000 fabf 	bl	8000a50 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004d2:	f000 faed 	bl	8000ab0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004d6:	f000 fa65 	bl	80009a4 <MX_TIM2_Init>
  //HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart1,(uint8_t*)&rxBuf_IT,1);
 80004da:	4964      	ldr	r1, [pc, #400]	; (800066c <main+0x1b4>)
 80004dc:	4b64      	ldr	r3, [pc, #400]	; (8000670 <main+0x1b8>)
 80004de:	2201      	movs	r2, #1
 80004e0:	0018      	movs	r0, r3
 80004e2:	f002 fb57 	bl	8002b94 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80004e6:	4b63      	ldr	r3, [pc, #396]	; (8000674 <main+0x1bc>)
 80004e8:	0018      	movs	r0, r3
 80004ea:	f001 ff6d 	bl	80023c8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      if(uartReady == 0){
 80004ee:	4b62      	ldr	r3, [pc, #392]	; (8000678 <main+0x1c0>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d000      	beq.n	80004f8 <main+0x40>
 80004f6:	e07f      	b.n	80005f8 <main+0x140>
          gorkem = HAL_UART_Receive_IT(&huart1,(uint8_t*)&rxBuf_IT,1);
 80004f8:	495c      	ldr	r1, [pc, #368]	; (800066c <main+0x1b4>)
 80004fa:	4b5d      	ldr	r3, [pc, #372]	; (8000670 <main+0x1b8>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	0018      	movs	r0, r3
 8000500:	f002 fb48 	bl	8002b94 <HAL_UART_Receive_IT>
 8000504:	0003      	movs	r3, r0
 8000506:	001a      	movs	r2, r3
 8000508:	4b5c      	ldr	r3, [pc, #368]	; (800067c <main+0x1c4>)
 800050a:	701a      	strb	r2, [r3, #0]
      }

      while(DATA_READY){
 800050c:	e074      	b.n	80005f8 <main+0x140>
          uartReady = 1;
 800050e:	4b5a      	ldr	r3, [pc, #360]	; (8000678 <main+0x1c0>)
 8000510:	2201      	movs	r2, #1
 8000512:	601a      	str	r2, [r3, #0]

          parsedData[wordIndex][charIndex] = dequeue(&dataQueue);
 8000514:	4b5a      	ldr	r3, [pc, #360]	; (8000680 <main+0x1c8>)
 8000516:	681d      	ldr	r5, [r3, #0]
 8000518:	4b5a      	ldr	r3, [pc, #360]	; (8000684 <main+0x1cc>)
 800051a:	681c      	ldr	r4, [r3, #0]
 800051c:	4b5a      	ldr	r3, [pc, #360]	; (8000688 <main+0x1d0>)
 800051e:	0018      	movs	r0, r3
 8000520:	f7ff ff96 	bl	8000450 <dequeue>
 8000524:	0003      	movs	r3, r0
 8000526:	0019      	movs	r1, r3
 8000528:	4a58      	ldr	r2, [pc, #352]	; (800068c <main+0x1d4>)
 800052a:	2332      	movs	r3, #50	; 0x32
 800052c:	436b      	muls	r3, r5
 800052e:	18d3      	adds	r3, r2, r3
 8000530:	1c0a      	adds	r2, r1, #0
 8000532:	551a      	strb	r2, [r3, r4]
          int temp2 = charIndex - 1;
 8000534:	4b53      	ldr	r3, [pc, #332]	; (8000684 <main+0x1cc>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	3b01      	subs	r3, #1
 800053a:	603b      	str	r3, [r7, #0]

          if(parsedData[wordIndex][charIndex] == '\n' && parsedData[wordIndex][temp2] == '\r'){
 800053c:	4b50      	ldr	r3, [pc, #320]	; (8000680 <main+0x1c8>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b50      	ldr	r3, [pc, #320]	; (8000684 <main+0x1cc>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4951      	ldr	r1, [pc, #324]	; (800068c <main+0x1d4>)
 8000546:	2032      	movs	r0, #50	; 0x32
 8000548:	4342      	muls	r2, r0
 800054a:	188a      	adds	r2, r1, r2
 800054c:	5cd3      	ldrb	r3, [r2, r3]
 800054e:	2b0a      	cmp	r3, #10
 8000550:	d14a      	bne.n	80005e8 <main+0x130>
 8000552:	4b4b      	ldr	r3, [pc, #300]	; (8000680 <main+0x1c8>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a4d      	ldr	r2, [pc, #308]	; (800068c <main+0x1d4>)
 8000558:	2132      	movs	r1, #50	; 0x32
 800055a:	434b      	muls	r3, r1
 800055c:	18d2      	adds	r2, r2, r3
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	18d3      	adds	r3, r2, r3
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b0d      	cmp	r3, #13
 8000566:	d13f      	bne.n	80005e8 <main+0x130>
              //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_11);
              charIndex = 0;
 8000568:	4b46      	ldr	r3, [pc, #280]	; (8000684 <main+0x1cc>)
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
              if(parsedData[wordIndex][0] == 'N' && parsedData[wordIndex][1] == 'e' && parsedData[wordIndex][2] == 'u' && parsedData[wordIndex][3] == 'l'){
 800056e:	4b44      	ldr	r3, [pc, #272]	; (8000680 <main+0x1c8>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	4b46      	ldr	r3, [pc, #280]	; (800068c <main+0x1d4>)
 8000574:	2132      	movs	r1, #50	; 0x32
 8000576:	434a      	muls	r2, r1
 8000578:	5cd3      	ldrb	r3, [r2, r3]
 800057a:	2b4e      	cmp	r3, #78	; 0x4e
 800057c:	d12b      	bne.n	80005d6 <main+0x11e>
 800057e:	4b40      	ldr	r3, [pc, #256]	; (8000680 <main+0x1c8>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a42      	ldr	r2, [pc, #264]	; (800068c <main+0x1d4>)
 8000584:	2132      	movs	r1, #50	; 0x32
 8000586:	434b      	muls	r3, r1
 8000588:	18d3      	adds	r3, r2, r3
 800058a:	3301      	adds	r3, #1
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b65      	cmp	r3, #101	; 0x65
 8000590:	d121      	bne.n	80005d6 <main+0x11e>
 8000592:	4b3b      	ldr	r3, [pc, #236]	; (8000680 <main+0x1c8>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a3d      	ldr	r2, [pc, #244]	; (800068c <main+0x1d4>)
 8000598:	2132      	movs	r1, #50	; 0x32
 800059a:	434b      	muls	r3, r1
 800059c:	18d3      	adds	r3, r2, r3
 800059e:	3302      	adds	r3, #2
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b75      	cmp	r3, #117	; 0x75
 80005a4:	d117      	bne.n	80005d6 <main+0x11e>
 80005a6:	4b36      	ldr	r3, [pc, #216]	; (8000680 <main+0x1c8>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a38      	ldr	r2, [pc, #224]	; (800068c <main+0x1d4>)
 80005ac:	2132      	movs	r1, #50	; 0x32
 80005ae:	434b      	muls	r3, r1
 80005b0:	18d3      	adds	r3, r2, r3
 80005b2:	3303      	adds	r3, #3
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b6c      	cmp	r3, #108	; 0x6c
 80005b8:	d10d      	bne.n	80005d6 <main+0x11e>
                  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_11);
 80005ba:	2380      	movs	r3, #128	; 0x80
 80005bc:	011b      	lsls	r3, r3, #4
 80005be:	4a34      	ldr	r2, [pc, #208]	; (8000690 <main+0x1d8>)
 80005c0:	0019      	movs	r1, r3
 80005c2:	0010      	movs	r0, r2
 80005c4:	f000 ffb5 	bl	8001532 <HAL_GPIO_TogglePin>
//                  wordIndex = 0;
//                  charIndex = 0;
                  AT_READY_FLAG = 1;
 80005c8:	4b32      	ldr	r3, [pc, #200]	; (8000694 <main+0x1dc>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	601a      	str	r2, [r3, #0]
                  //AT_Waiting_Flag = 1;
                //  HAL_UART_AbortReceive_IT(&huart1);
                  DATA_READY = 0;
 80005ce:	4b32      	ldr	r3, [pc, #200]	; (8000698 <main+0x1e0>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
                  break;
 80005d4:	e014      	b.n	8000600 <main+0x148>
              }
              ++wordIndex;
 80005d6:	4b2a      	ldr	r3, [pc, #168]	; (8000680 <main+0x1c8>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	1c5a      	adds	r2, r3, #1
 80005dc:	4b28      	ldr	r3, [pc, #160]	; (8000680 <main+0x1c8>)
 80005de:	601a      	str	r2, [r3, #0]
              DATA_READY = 0;
 80005e0:	4b2d      	ldr	r3, [pc, #180]	; (8000698 <main+0x1e0>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
              break;
 80005e6:	e00b      	b.n	8000600 <main+0x148>
          }
          ++charIndex;
 80005e8:	4b26      	ldr	r3, [pc, #152]	; (8000684 <main+0x1cc>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	1c5a      	adds	r2, r3, #1
 80005ee:	4b25      	ldr	r3, [pc, #148]	; (8000684 <main+0x1cc>)
 80005f0:	601a      	str	r2, [r3, #0]
          //          if(rxBuf[rxIndex] == 'K' && rxBuf[temp2] == 'O' && AT_READY_FLAG == 1 && AT_Waiting_Flag == 1){
          //              DATA_READY = 0;
          //              break;
          //          }
          DATA_READY = 0;
 80005f2:	4b29      	ldr	r3, [pc, #164]	; (8000698 <main+0x1e0>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
      while(DATA_READY){
 80005f8:	4b27      	ldr	r3, [pc, #156]	; (8000698 <main+0x1e0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d186      	bne.n	800050e <main+0x56>
      }

      if(uartReady == 1 && AT_Transmit_FLag == 1 && AT_Waiting_Flag == 0){
 8000600:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <main+0x1c0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d000      	beq.n	800060a <main+0x152>
 8000608:	e771      	b.n	80004ee <main+0x36>
 800060a:	4b24      	ldr	r3, [pc, #144]	; (800069c <main+0x1e4>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d000      	beq.n	8000614 <main+0x15c>
 8000612:	e76c      	b.n	80004ee <main+0x36>
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <main+0x1e8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d000      	beq.n	800061e <main+0x166>
 800061c:	e767      	b.n	80004ee <main+0x36>
            //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_11);
          switch (count){
 800061e:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <main+0x1ec>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d01d      	beq.n	8000662 <main+0x1aa>
 8000626:	2b02      	cmp	r3, #2
 8000628:	d01d      	beq.n	8000666 <main+0x1ae>
 800062a:	2b00      	cmp	r3, #0
 800062c:	d11c      	bne.n	8000668 <main+0x1b0>
          case 0:

              HAL_UART_Transmit_IT(&huart1,"AT+CGSN=1",9);
 800062e:	491e      	ldr	r1, [pc, #120]	; (80006a8 <main+0x1f0>)
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <main+0x1b8>)
 8000632:	2209      	movs	r2, #9
 8000634:	0018      	movs	r0, r3
 8000636:	f002 fa3f 	bl	8002ab8 <HAL_UART_Transmit_IT>
              for(int i = 0; i< 10; ++i){
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	e00c      	b.n	800065a <main+0x1a2>
                  memset(parsedData[i],0,50);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2232      	movs	r2, #50	; 0x32
 8000644:	435a      	muls	r2, r3
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <main+0x1d4>)
 8000648:	18d3      	adds	r3, r2, r3
 800064a:	2232      	movs	r2, #50	; 0x32
 800064c:	2100      	movs	r1, #0
 800064e:	0018      	movs	r0, r3
 8000650:	f003 fb4e 	bl	8003cf0 <memset>
              for(int i = 0; i< 10; ++i){
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3301      	adds	r3, #1
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b09      	cmp	r3, #9
 800065e:	ddef      	ble.n	8000640 <main+0x188>
              }
              break;
 8000660:	e002      	b.n	8000668 <main+0x1b0>

          case 1:
              //HAL_UART_Transmit_IT(&huart1,"ATI",3);
              break;
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	e743      	b.n	80004ee <main+0x36>

          case 2:


              //HAL_UART_Transmit_IT(&huart1,"ATE1",4);
              break;
 8000666:	46c0      	nop			; (mov r8, r8)
      if(uartReady == 0){
 8000668:	e741      	b.n	80004ee <main+0x36>
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	20000490 	.word	0x20000490
 8000670:	20000354 	.word	0x20000354
 8000674:	200003d4 	.word	0x200003d4
 8000678:	20000028 	.word	0x20000028
 800067c:	20000000 	.word	0x20000000
 8000680:	2000002c 	.word	0x2000002c
 8000684:	20000030 	.word	0x20000030
 8000688:	20000494 	.word	0x20000494
 800068c:	200000ac 	.word	0x200000ac
 8000690:	50000800 	.word	0x50000800
 8000694:	20000024 	.word	0x20000024
 8000698:	2000003c 	.word	0x2000003c
 800069c:	20000034 	.word	0x20000034
 80006a0:	20000038 	.word	0x20000038
 80006a4:	20000044 	.word	0x20000044
 80006a8:	08003d18 	.word	0x08003d18

080006ac <HAL_UART_RxCpltCallback>:
      }
  /* USER CODE END 3 */
}
}

  void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

      if(huart->Instance==USART1 ){
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a10      	ldr	r2, [pc, #64]	; (80006fc <HAL_UART_RxCpltCallback+0x50>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d11a      	bne.n	80006f4 <HAL_UART_RxCpltCallback+0x48>
           //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_11);
           int succesful = enqueue(&dataQueue, rxBuf_IT);
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <HAL_UART_RxCpltCallback+0x54>)
 80006c0:	781a      	ldrb	r2, [r3, #0]
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <HAL_UART_RxCpltCallback+0x58>)
 80006c4:	0011      	movs	r1, r2
 80006c6:	0018      	movs	r0, r3
 80006c8:	f7ff feb6 	bl	8000438 <enqueue>
 80006cc:	0003      	movs	r3, r0
 80006ce:	60fb      	str	r3, [r7, #12]
           DATA_READY = 1;
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <HAL_UART_RxCpltCallback+0x5c>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	601a      	str	r2, [r3, #0]
           if(AT_Waiting_Flag == 1){
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <HAL_UART_RxCpltCallback+0x60>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d104      	bne.n	80006e8 <HAL_UART_RxCpltCallback+0x3c>
               ++rxcallbackCount;
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <HAL_UART_RxCpltCallback+0x64>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	1c5a      	adds	r2, r3, #1
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <HAL_UART_RxCpltCallback+0x64>)
 80006e6:	601a      	str	r2, [r3, #0]
           }
           HAL_UART_Receive_IT(&huart1,(uint8_t*)&rxBuf_IT, 1);
 80006e8:	4905      	ldr	r1, [pc, #20]	; (8000700 <HAL_UART_RxCpltCallback+0x54>)
 80006ea:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <HAL_UART_RxCpltCallback+0x68>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	0018      	movs	r0, r3
 80006f0:	f002 fa50 	bl	8002b94 <HAL_UART_Receive_IT>
      }
  }
 80006f4:	46c0      	nop			; (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b004      	add	sp, #16
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40013800 	.word	0x40013800
 8000700:	20000490 	.word	0x20000490
 8000704:	20000494 	.word	0x20000494
 8000708:	2000003c 	.word	0x2000003c
 800070c:	20000038 	.word	0x20000038
 8000710:	20000048 	.word	0x20000048
 8000714:	20000354 	.word	0x20000354

08000718 <HAL_UART_TxCpltCallback>:


  void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]

       // HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);
      //gorkem = HAL_UART_GetState(&huart1);
        AT_Transmit_FLag = 0;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <HAL_UART_TxCpltCallback+0x34>)
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]

        AT_Waiting_Flag = 1;
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <HAL_UART_TxCpltCallback+0x38>)
 8000728:	2201      	movs	r2, #1
 800072a:	601a      	str	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart1,(uint8_t*)&rxBuf_IT,1);
 800072c:	4909      	ldr	r1, [pc, #36]	; (8000754 <HAL_UART_TxCpltCallback+0x3c>)
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <HAL_UART_TxCpltCallback+0x40>)
 8000730:	2201      	movs	r2, #1
 8000732:	0018      	movs	r0, r3
 8000734:	f002 fa2e 	bl	8002b94 <HAL_UART_Receive_IT>
        ++count;
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <HAL_UART_TxCpltCallback+0x44>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	1c5a      	adds	r2, r3, #1
 800073e:	4b07      	ldr	r3, [pc, #28]	; (800075c <HAL_UART_TxCpltCallback+0x44>)
 8000740:	601a      	str	r2, [r3, #0]
  }
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b002      	add	sp, #8
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	20000034 	.word	0x20000034
 8000750:	20000038 	.word	0x20000038
 8000754:	20000490 	.word	0x20000490
 8000758:	20000354 	.word	0x20000354
 800075c:	20000044 	.word	0x20000044

08000760 <HAL_UART_AbortReceiveCpltCallback>:

  void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart){
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]

      if(huart->Instance==USART1 ){
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a0d      	ldr	r2, [pc, #52]	; (80007a4 <HAL_UART_AbortReceiveCpltCallback+0x44>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d113      	bne.n	800079a <HAL_UART_AbortReceiveCpltCallback+0x3a>
          clear_queue(&dataQueue);
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <HAL_UART_AbortReceiveCpltCallback+0x48>)
 8000774:	0018      	movs	r0, r3
 8000776:	f7ff fe87 	bl	8000488 <clear_queue>

          gorkem = HAL_UART_GetState(&huart1);
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <HAL_UART_AbortReceiveCpltCallback+0x4c>)
 800077c:	0018      	movs	r0, r3
 800077e:	f002 fc5f 	bl	8003040 <HAL_UART_GetState>
 8000782:	0003      	movs	r3, r0
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <HAL_UART_AbortReceiveCpltCallback+0x50>)
 8000788:	701a      	strb	r2, [r3, #0]
          ++abourtCount;
 800078a:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <HAL_UART_AbortReceiveCpltCallback+0x54>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <HAL_UART_AbortReceiveCpltCallback+0x54>)
 8000792:	601a      	str	r2, [r3, #0]
          AT_Transmit_FLag = 1;
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_UART_AbortReceiveCpltCallback+0x58>)
 8000796:	2201      	movs	r2, #1
 8000798:	601a      	str	r2, [r3, #0]
      }
  }
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	b002      	add	sp, #8
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	40013800 	.word	0x40013800
 80007a8:	20000494 	.word	0x20000494
 80007ac:	20000354 	.word	0x20000354
 80007b0:	20000000 	.word	0x20000000
 80007b4:	2000004c 	.word	0x2000004c
 80007b8:	20000034 	.word	0x20000034

080007bc <HAL_TIM_PeriodElapsedCallback>:

  void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]

      if(htim->Instance == TIM2){
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	2380      	movs	r3, #128	; 0x80
 80007ca:	05db      	lsls	r3, r3, #23
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d12a      	bne.n	8000826 <HAL_TIM_PeriodElapsedCallback+0x6a>
          if((gorkem = HAL_UART_GetState(&huart1)) == HAL_UART_STATE_BUSY_RX && (AT_Waiting_Flag == 1 || AT_READY_FLAG == 1)){
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80007d2:	0018      	movs	r0, r3
 80007d4:	f002 fc34 	bl	8003040 <HAL_UART_GetState>
 80007d8:	0003      	movs	r3, r0
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	4b15      	ldr	r3, [pc, #84]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80007de:	701a      	strb	r2, [r3, #0]
 80007e0:	4b14      	ldr	r3, [pc, #80]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b22      	cmp	r3, #34	; 0x22
 80007e6:	d11a      	bne.n	800081e <HAL_TIM_PeriodElapsedCallback+0x62>
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d003      	beq.n	80007f8 <HAL_TIM_PeriodElapsedCallback+0x3c>
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d112      	bne.n	800081e <HAL_TIM_PeriodElapsedCallback+0x62>
              HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	015b      	lsls	r3, r3, #5
 80007fc:	4a10      	ldr	r2, [pc, #64]	; (8000840 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80007fe:	0019      	movs	r1, r3
 8000800:	0010      	movs	r0, r2
 8000802:	f000 fe96 	bl	8001532 <HAL_GPIO_TogglePin>
              AT_Waiting_Flag = 0;
 8000806:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
              ++timAbortCount;
 800080c:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	1c5a      	adds	r2, r3, #1
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000814:	601a      	str	r2, [r3, #0]
              HAL_UART_AbortReceive_IT(&huart1);
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000818:	0018      	movs	r0, r3
 800081a:	f002 fa73 	bl	8002d04 <HAL_UART_AbortReceive_IT>
          }

        //  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);
          HAL_TIM_Base_Start_IT(&htim2);
 800081e:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000820:	0018      	movs	r0, r3
 8000822:	f001 fdd1 	bl	80023c8 <HAL_TIM_Base_Start_IT>
      }
  }
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	b002      	add	sp, #8
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	20000354 	.word	0x20000354
 8000834:	20000000 	.word	0x20000000
 8000838:	20000038 	.word	0x20000038
 800083c:	20000024 	.word	0x20000024
 8000840:	50000800 	.word	0x50000800
 8000844:	20000040 	.word	0x20000040
 8000848:	200003d4 	.word	0x200003d4

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b09b      	sub	sp, #108	; 0x6c
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	2434      	movs	r4, #52	; 0x34
 8000854:	193b      	adds	r3, r7, r4
 8000856:	0018      	movs	r0, r3
 8000858:	2334      	movs	r3, #52	; 0x34
 800085a:	001a      	movs	r2, r3
 800085c:	2100      	movs	r1, #0
 800085e:	f003 fa47 	bl	8003cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000862:	2320      	movs	r3, #32
 8000864:	18fb      	adds	r3, r7, r3
 8000866:	0018      	movs	r0, r3
 8000868:	2314      	movs	r3, #20
 800086a:	001a      	movs	r2, r3
 800086c:	2100      	movs	r1, #0
 800086e:	f003 fa3f 	bl	8003cf0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000872:	003b      	movs	r3, r7
 8000874:	0018      	movs	r0, r3
 8000876:	2320      	movs	r3, #32
 8000878:	001a      	movs	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	f003 fa38 	bl	8003cf0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000880:	4b2a      	ldr	r3, [pc, #168]	; (800092c <SystemClock_Config+0xe0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a2a      	ldr	r2, [pc, #168]	; (8000930 <SystemClock_Config+0xe4>)
 8000886:	401a      	ands	r2, r3
 8000888:	4b28      	ldr	r3, [pc, #160]	; (800092c <SystemClock_Config+0xe0>)
 800088a:	2180      	movs	r1, #128	; 0x80
 800088c:	0109      	lsls	r1, r1, #4
 800088e:	430a      	orrs	r2, r1
 8000890:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000892:	0021      	movs	r1, r4
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2201      	movs	r2, #1
 8000898:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800089a:	187b      	adds	r3, r7, r1
 800089c:	2280      	movs	r2, #128	; 0x80
 800089e:	0252      	lsls	r2, r2, #9
 80008a0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2202      	movs	r2, #2
 80008a6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	0252      	lsls	r2, r2, #9
 80008ae:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	02d2      	lsls	r2, r2, #11
 80008b6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	03d2      	lsls	r2, r2, #15
 80008be:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 fe48 	bl	8001558 <HAL_RCC_OscConfig>
 80008c8:	1e03      	subs	r3, r0, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008cc:	f000 f97e 	bl	8000bcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d0:	2120      	movs	r1, #32
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	220f      	movs	r2, #15
 80008d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2203      	movs	r2, #3
 80008dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2101      	movs	r1, #1
 80008f4:	0018      	movs	r0, r3
 80008f6:	f001 f9a9 	bl	8001c4c <HAL_RCC_ClockConfig>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80008fe:	f000 f965 	bl	8000bcc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000902:	003b      	movs	r3, r7
 8000904:	2203      	movs	r2, #3
 8000906:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000908:	003b      	movs	r3, r7
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800090e:	003b      	movs	r3, r7
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000914:	003b      	movs	r3, r7
 8000916:	0018      	movs	r0, r3
 8000918:	f001 fb7a 	bl	8002010 <HAL_RCCEx_PeriphCLKConfig>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000920:	f000 f954 	bl	8000bcc <Error_Handler>
  }
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	b01b      	add	sp, #108	; 0x6c
 800092a:	bd90      	pop	{r4, r7, pc}
 800092c:	40007000 	.word	0x40007000
 8000930:	ffffe7ff 	.word	0xffffe7ff

08000934 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_SPI2_Init+0x68>)
 800093a:	4a19      	ldr	r2, [pc, #100]	; (80009a0 <MX_SPI2_Init+0x6c>)
 800093c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_SPI2_Init+0x68>)
 8000940:	2282      	movs	r2, #130	; 0x82
 8000942:	0052      	lsls	r2, r2, #1
 8000944:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_SPI2_Init+0x68>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800094c:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_SPI2_Init+0x68>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_SPI2_Init+0x68>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000958:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_SPI2_Init+0x68>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_SPI2_Init+0x68>)
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	02d2      	lsls	r2, r2, #11
 8000964:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <MX_SPI2_Init+0x68>)
 8000968:	2200      	movs	r2, #0
 800096a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800096c:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_SPI2_Init+0x68>)
 800096e:	2200      	movs	r2, #0
 8000970:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <MX_SPI2_Init+0x68>)
 8000974:	2200      	movs	r2, #0
 8000976:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_SPI2_Init+0x68>)
 800097a:	2200      	movs	r2, #0
 800097c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800097e:	4b07      	ldr	r3, [pc, #28]	; (800099c <MX_SPI2_Init+0x68>)
 8000980:	2207      	movs	r2, #7
 8000982:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <MX_SPI2_Init+0x68>)
 8000986:	0018      	movs	r0, r3
 8000988:	f001 fc88 	bl	800229c <HAL_SPI_Init>
 800098c:	1e03      	subs	r3, r0, #0
 800098e:	d001      	beq.n	8000994 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000990:	f000 f91c 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	20000050 	.word	0x20000050
 80009a0:	40003800 	.word	0x40003800

080009a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009aa:	2308      	movs	r3, #8
 80009ac:	18fb      	adds	r3, r7, r3
 80009ae:	0018      	movs	r0, r3
 80009b0:	2310      	movs	r3, #16
 80009b2:	001a      	movs	r2, r3
 80009b4:	2100      	movs	r1, #0
 80009b6:	f003 f99b 	bl	8003cf0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ba:	003b      	movs	r3, r7
 80009bc:	0018      	movs	r0, r3
 80009be:	2308      	movs	r3, #8
 80009c0:	001a      	movs	r2, r3
 80009c2:	2100      	movs	r1, #0
 80009c4:	f003 f994 	bl	8003cf0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009c8:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <MX_TIM2_Init+0xa0>)
 80009ca:	2280      	movs	r2, #128	; 0x80
 80009cc:	05d2      	lsls	r2, r2, #23
 80009ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 80009d0:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <MX_TIM2_Init+0xa0>)
 80009d2:	4a1d      	ldr	r2, [pc, #116]	; (8000a48 <MX_TIM2_Init+0xa4>)
 80009d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d6:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <MX_TIM2_Init+0xa0>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 80009dc:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <MX_TIM2_Init+0xa0>)
 80009de:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <MX_TIM2_Init+0xa8>)
 80009e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_TIM2_Init+0xa0>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <MX_TIM2_Init+0xa0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_TIM2_Init+0xa0>)
 80009f0:	0018      	movs	r0, r3
 80009f2:	f001 fcbd 	bl	8002370 <HAL_TIM_Base_Init>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80009fa:	f000 f8e7 	bl	8000bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009fe:	2108      	movs	r1, #8
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	0152      	lsls	r2, r2, #5
 8000a06:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a08:	187a      	adds	r2, r7, r1
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_TIM2_Init+0xa0>)
 8000a0c:	0011      	movs	r1, r2
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f001 fde4 	bl	80025dc <HAL_TIM_ConfigClockSource>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000a18:	f000 f8d8 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a1c:	003b      	movs	r3, r7
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a22:	003b      	movs	r3, r7
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a28:	003a      	movs	r2, r7
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_TIM2_Init+0xa0>)
 8000a2c:	0011      	movs	r1, r2
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f001 ffaa 	bl	8002988 <HAL_TIMEx_MasterConfigSynchronization>
 8000a34:	1e03      	subs	r3, r0, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000a38:	f000 f8c8 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b006      	add	sp, #24
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200003d4 	.word	0x200003d4
 8000a48:	00007cff 	.word	0x00007cff
 8000a4c:	00000bb7 	.word	0x00000bb7

08000a50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_USART1_UART_Init+0x58>)
 8000a56:	4a15      	ldr	r2, [pc, #84]	; (8000aac <MX_USART1_UART_Init+0x5c>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_USART1_UART_Init+0x58>)
 8000a5c:	2296      	movs	r2, #150	; 0x96
 8000a5e:	0192      	lsls	r2, r2, #6
 8000a60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_USART1_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_USART1_UART_Init+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_USART1_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_USART1_UART_Init+0x58>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_USART1_UART_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_USART1_UART_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_USART1_UART_Init+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_USART1_UART_Init+0x58>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <MX_USART1_UART_Init+0x58>)
 8000a94:	0018      	movs	r0, r3
 8000a96:	f001 ffbb 	bl	8002a10 <HAL_UART_Init>
 8000a9a:	1e03      	subs	r3, r0, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a9e:	f000 f895 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000354 	.word	0x20000354
 8000aac:	40013800 	.word	0x40013800

08000ab0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000ab6:	4a15      	ldr	r2, [pc, #84]	; (8000b0c <MX_USART2_UART_Init+0x5c>)
 8000ab8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000abc:	22e1      	movs	r2, #225	; 0xe1
 8000abe:	0252      	lsls	r2, r2, #9
 8000ac0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000af4:	0018      	movs	r0, r3
 8000af6:	f001 ff8b 	bl	8002a10 <HAL_UART_Init>
 8000afa:	1e03      	subs	r3, r0, #0
 8000afc:	d001      	beq.n	8000b02 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000afe:	f000 f865 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000410 	.word	0x20000410
 8000b0c:	40004400 	.word	0x40004400

08000b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	b08b      	sub	sp, #44	; 0x2c
 8000b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b16:	2414      	movs	r4, #20
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	2314      	movs	r3, #20
 8000b1e:	001a      	movs	r2, r3
 8000b20:	2100      	movs	r1, #0
 8000b22:	f003 f8e5 	bl	8003cf0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b26:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <MX_GPIO_Init+0xb4>)
 8000b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b2a:	4b26      	ldr	r3, [pc, #152]	; (8000bc4 <MX_GPIO_Init+0xb4>)
 8000b2c:	2180      	movs	r1, #128	; 0x80
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b32:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <MX_GPIO_Init+0xb4>)
 8000b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b36:	2280      	movs	r2, #128	; 0x80
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <MX_GPIO_Init+0xb4>)
 8000b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b42:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <MX_GPIO_Init+0xb4>)
 8000b44:	2101      	movs	r1, #1
 8000b46:	430a      	orrs	r2, r1
 8000b48:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b4a:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <MX_GPIO_Init+0xb4>)
 8000b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b4e:	2201      	movs	r2, #1
 8000b50:	4013      	ands	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <MX_GPIO_Init+0xb4>)
 8000b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_GPIO_Init+0xb4>)
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_GPIO_Init+0xb4>)
 8000b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b66:	2202      	movs	r2, #2
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_GPIO_Init+0xb4>)
 8000b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_GPIO_Init+0xb4>)
 8000b74:	2104      	movs	r1, #4
 8000b76:	430a      	orrs	r2, r1
 8000b78:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b7a:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_GPIO_Init+0xb4>)
 8000b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7e:	2204      	movs	r2, #4
 8000b80:	4013      	ands	r3, r2
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000b86:	23c0      	movs	r3, #192	; 0xc0
 8000b88:	015b      	lsls	r3, r3, #5
 8000b8a:	480f      	ldr	r0, [pc, #60]	; (8000bc8 <MX_GPIO_Init+0xb8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	0019      	movs	r1, r3
 8000b90:	f000 fcb2 	bl	80014f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b94:	193b      	adds	r3, r7, r4
 8000b96:	22c0      	movs	r2, #192	; 0xc0
 8000b98:	0152      	lsls	r2, r2, #5
 8000b9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	193b      	adds	r3, r7, r4
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bae:	193b      	adds	r3, r7, r4
 8000bb0:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <MX_GPIO_Init+0xb8>)
 8000bb2:	0019      	movs	r1, r3
 8000bb4:	0010      	movs	r0, r2
 8000bb6:	f000 fb21 	bl	80011fc <HAL_GPIO_Init>

}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b00b      	add	sp, #44	; 0x2c
 8000bc0:	bd90      	pop	{r4, r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	50000800 	.word	0x50000800

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bdc:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <HAL_MspInit+0x24>)
 8000bde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_MspInit+0x24>)
 8000be2:	2101      	movs	r1, #1
 8000be4:	430a      	orrs	r2, r1
 8000be6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <HAL_MspInit+0x24>)
 8000bea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <HAL_MspInit+0x24>)
 8000bee:	2180      	movs	r1, #128	; 0x80
 8000bf0:	0549      	lsls	r1, r1, #21
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40021000 	.word	0x40021000

08000c00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	230c      	movs	r3, #12
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	2314      	movs	r3, #20
 8000c10:	001a      	movs	r2, r3
 8000c12:	2100      	movs	r1, #0
 8000c14:	f003 f86c 	bl	8003cf0 <memset>
  if(hspi->Instance==SPI2)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a18      	ldr	r2, [pc, #96]	; (8000c80 <HAL_SPI_MspInit+0x80>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d129      	bne.n	8000c76 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <HAL_SPI_MspInit+0x84>)
 8000c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <HAL_SPI_MspInit+0x84>)
 8000c28:	2180      	movs	r1, #128	; 0x80
 8000c2a:	01c9      	lsls	r1, r1, #7
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <HAL_SPI_MspInit+0x84>)
 8000c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <HAL_SPI_MspInit+0x84>)
 8000c36:	2102      	movs	r1, #2
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <HAL_SPI_MspInit+0x84>)
 8000c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c40:	2202      	movs	r2, #2
 8000c42:	4013      	ands	r3, r2
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c48:	210c      	movs	r1, #12
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	22f0      	movs	r2, #240	; 0xf0
 8000c4e:	0212      	lsls	r2, r2, #8
 8000c50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2202      	movs	r2, #2
 8000c56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	2203      	movs	r2, #3
 8000c62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c6e:	0019      	movs	r1, r3
 8000c70:	0010      	movs	r0, r2
 8000c72:	f000 fac3 	bl	80011fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b008      	add	sp, #32
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	40003800 	.word	0x40003800
 8000c84:	40021000 	.word	0x40021000
 8000c88:	50000400 	.word	0x50000400

08000c8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	05db      	lsls	r3, r3, #23
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d10d      	bne.n	8000cbc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_TIM_Base_MspInit+0x38>)
 8000ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <HAL_TIM_Base_MspInit+0x38>)
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	200f      	movs	r0, #15
 8000cb2:	f000 fa29 	bl	8001108 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cb6:	200f      	movs	r0, #15
 8000cb8:	f000 fa3b 	bl	8001132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b002      	add	sp, #8
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	2314      	movs	r3, #20
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	2314      	movs	r3, #20
 8000cd8:	001a      	movs	r2, r3
 8000cda:	2100      	movs	r1, #0
 8000cdc:	f003 f808 	bl	8003cf0 <memset>
  if(huart->Instance==USART1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a34      	ldr	r2, [pc, #208]	; (8000db8 <HAL_UART_MspInit+0xf0>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d133      	bne.n	8000d52 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cea:	4b34      	ldr	r3, [pc, #208]	; (8000dbc <HAL_UART_MspInit+0xf4>)
 8000cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cee:	4b33      	ldr	r3, [pc, #204]	; (8000dbc <HAL_UART_MspInit+0xf4>)
 8000cf0:	2180      	movs	r1, #128	; 0x80
 8000cf2:	01c9      	lsls	r1, r1, #7
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf8:	4b30      	ldr	r3, [pc, #192]	; (8000dbc <HAL_UART_MspInit+0xf4>)
 8000cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cfc:	4b2f      	ldr	r3, [pc, #188]	; (8000dbc <HAL_UART_MspInit+0xf4>)
 8000cfe:	2101      	movs	r1, #1
 8000d00:	430a      	orrs	r2, r1
 8000d02:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d04:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <HAL_UART_MspInit+0xf4>)
 8000d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d08:	2201      	movs	r2, #1
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d10:	2114      	movs	r1, #20
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	22c0      	movs	r2, #192	; 0xc0
 8000d16:	00d2      	lsls	r2, r2, #3
 8000d18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	2203      	movs	r2, #3
 8000d2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	2204      	movs	r2, #4
 8000d30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d32:	187a      	adds	r2, r7, r1
 8000d34:	23a0      	movs	r3, #160	; 0xa0
 8000d36:	05db      	lsls	r3, r3, #23
 8000d38:	0011      	movs	r1, r2
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f000 fa5e 	bl	80011fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2100      	movs	r1, #0
 8000d44:	201b      	movs	r0, #27
 8000d46:	f000 f9df 	bl	8001108 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d4a:	201b      	movs	r0, #27
 8000d4c:	f000 f9f1 	bl	8001132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d50:	e02e      	b.n	8000db0 <HAL_UART_MspInit+0xe8>
  else if(huart->Instance==USART2)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a1a      	ldr	r2, [pc, #104]	; (8000dc0 <HAL_UART_MspInit+0xf8>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d129      	bne.n	8000db0 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <HAL_UART_MspInit+0xf4>)
 8000d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d60:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <HAL_UART_MspInit+0xf4>)
 8000d62:	2180      	movs	r1, #128	; 0x80
 8000d64:	0289      	lsls	r1, r1, #10
 8000d66:	430a      	orrs	r2, r1
 8000d68:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <HAL_UART_MspInit+0xf4>)
 8000d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d6e:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <HAL_UART_MspInit+0xf4>)
 8000d70:	2101      	movs	r1, #1
 8000d72:	430a      	orrs	r2, r1
 8000d74:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_UART_MspInit+0xf4>)
 8000d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d82:	2114      	movs	r1, #20
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	220c      	movs	r2, #12
 8000d88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2203      	movs	r2, #3
 8000d9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2204      	movs	r2, #4
 8000da0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	187a      	adds	r2, r7, r1
 8000da4:	23a0      	movs	r3, #160	; 0xa0
 8000da6:	05db      	lsls	r3, r3, #23
 8000da8:	0011      	movs	r1, r2
 8000daa:	0018      	movs	r0, r3
 8000dac:	f000 fa26 	bl	80011fc <HAL_GPIO_Init>
}
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b00a      	add	sp, #40	; 0x28
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40013800 	.word	0x40013800
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40004400 	.word	0x40004400

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <HardFault_Handler+0x4>

08000dd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dd8:	46c0      	nop			; (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dec:	f000 f8ce 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df0:	46c0      	nop			; (mov r8, r8)
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <TIM2_IRQHandler+0x14>)
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f001 fb04 	bl	800240c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	200003d4 	.word	0x200003d4

08000e10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <USART1_IRQHandler+0x14>)
 8000e16:	0018      	movs	r0, r3
 8000e18:	f001 ffe4 	bl	8002de4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	20000354 	.word	0x20000354

08000e28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <SystemInit+0x64>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <SystemInit+0x64>)
 8000e32:	2180      	movs	r1, #128	; 0x80
 8000e34:	0049      	lsls	r1, r1, #1
 8000e36:	430a      	orrs	r2, r1
 8000e38:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <SystemInit+0x64>)
 8000e3c:	68da      	ldr	r2, [r3, #12]
 8000e3e:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <SystemInit+0x64>)
 8000e40:	4913      	ldr	r1, [pc, #76]	; (8000e90 <SystemInit+0x68>)
 8000e42:	400a      	ands	r2, r1
 8000e44:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <SystemInit+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <SystemInit+0x64>)
 8000e4c:	4911      	ldr	r1, [pc, #68]	; (8000e94 <SystemInit+0x6c>)
 8000e4e:	400a      	ands	r2, r1
 8000e50:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <SystemInit+0x64>)
 8000e54:	689a      	ldr	r2, [r3, #8]
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <SystemInit+0x64>)
 8000e58:	2101      	movs	r1, #1
 8000e5a:	438a      	bics	r2, r1
 8000e5c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <SystemInit+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <SystemInit+0x64>)
 8000e64:	490c      	ldr	r1, [pc, #48]	; (8000e98 <SystemInit+0x70>)
 8000e66:	400a      	ands	r2, r1
 8000e68:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <SystemInit+0x64>)
 8000e6c:	68da      	ldr	r2, [r3, #12]
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <SystemInit+0x64>)
 8000e70:	490a      	ldr	r1, [pc, #40]	; (8000e9c <SystemInit+0x74>)
 8000e72:	400a      	ands	r2, r1
 8000e74:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e76:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SystemInit+0x64>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <SystemInit+0x78>)
 8000e7e:	2280      	movs	r2, #128	; 0x80
 8000e80:	0512      	lsls	r2, r2, #20
 8000e82:	609a      	str	r2, [r3, #8]
#endif
}
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	88ff400c 	.word	0x88ff400c
 8000e94:	fef6fff6 	.word	0xfef6fff6
 8000e98:	fffbffff 	.word	0xfffbffff
 8000e9c:	ff02ffff 	.word	0xff02ffff
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000ea4:	480d      	ldr	r0, [pc, #52]	; (8000edc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000ea6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000ea8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000eaa:	e003      	b.n	8000eb4 <LoopCopyDataInit>

08000eac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000eae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000eb0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000eb2:	3104      	adds	r1, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000eb4:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000eb8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000eba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ebc:	d3f6      	bcc.n	8000eac <CopyDataInit>
  ldr  r2, =_sbss
 8000ebe:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <LoopForever+0x12>)
  b  LoopFillZerobss
 8000ec0:	e002      	b.n	8000ec8 <LoopFillZerobss>

08000ec2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000ec2:	2300      	movs	r3, #0
  str  r3, [r2]
 8000ec4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec6:	3204      	adds	r2, #4

08000ec8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <LoopForever+0x16>)
  cmp  r2, r3
 8000eca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ecc:	d3f9      	bcc.n	8000ec2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ece:	f7ff ffab 	bl	8000e28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ed2:	f002 fee9 	bl	8003ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed6:	f7ff faef 	bl	80004b8 <main>

08000eda <LoopForever>:

LoopForever:
    b LoopForever
 8000eda:	e7fe      	b.n	8000eda <LoopForever>
   ldr   r0, =_estack
 8000edc:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8000ee0:	08003da0 	.word	0x08003da0
  ldr  r0, =_sdata
 8000ee4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ee8:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8000eec:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8000ef0:	20000570 	.word	0x20000570

08000ef4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC1_COMP_IRQHandler>
	...

08000ef8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_Init+0x3c>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_Init+0x3c>)
 8000f0a:	2140      	movs	r1, #64	; 0x40
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f10:	2000      	movs	r0, #0
 8000f12:	f000 f811 	bl	8000f38 <HAL_InitTick>
 8000f16:	1e03      	subs	r3, r0, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000f1a:	1dfb      	adds	r3, r7, #7
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	701a      	strb	r2, [r3, #0]
 8000f20:	e001      	b.n	8000f26 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f22:	f7ff fe59 	bl	8000bd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	781b      	ldrb	r3, [r3, #0]
}
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b002      	add	sp, #8
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	40022000 	.word	0x40022000

08000f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f40:	230f      	movs	r3, #15
 8000f42:	18fb      	adds	r3, r7, r3
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <HAL_InitTick+0x50>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	23fa      	movs	r3, #250	; 0xfa
 8000f4e:	0099      	lsls	r1, r3, #2
 8000f50:	0010      	movs	r0, r2
 8000f52:	f7ff f8d9 	bl	8000108 <__udivsi3>
 8000f56:	0003      	movs	r3, r0
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f000 f8fa 	bl	8001152 <HAL_SYSTICK_Config>
 8000f5e:	1e03      	subs	r3, r0, #0
 8000f60:	d004      	beq.n	8000f6c <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8000f62:	230f      	movs	r3, #15
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
 8000f6a:	e006      	b.n	8000f7a <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000f6c:	6879      	ldr	r1, [r7, #4]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	425b      	negs	r3, r3
 8000f72:	2200      	movs	r2, #0
 8000f74:	0018      	movs	r0, r3
 8000f76:	f000 f8c7 	bl	8001108 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8000f7a:	230f      	movs	r3, #15
 8000f7c:	18fb      	adds	r3, r7, r3
 8000f7e:	781b      	ldrb	r3, [r3, #0]
}
 8000f80:	0018      	movs	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b004      	add	sp, #16
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000004 	.word	0x20000004

08000f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick++;
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_IncTick+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	4b02      	ldr	r3, [pc, #8]	; (8000fa0 <HAL_IncTick+0x14>)
 8000f98:	601a      	str	r2, [r3, #0]
}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2000056c 	.word	0x2000056c

08000fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa8:	4b02      	ldr	r3, [pc, #8]	; (8000fb4 <HAL_GetTick+0x10>)
 8000faa:	681b      	ldr	r3, [r3, #0]
}
 8000fac:	0018      	movs	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	2000056c 	.word	0x2000056c

08000fb8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	0002      	movs	r2, r0
 8000fc0:	1dfb      	adds	r3, r7, #7
 8000fc2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000fc4:	1dfb      	adds	r3, r7, #7
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	001a      	movs	r2, r3
 8000fca:	231f      	movs	r3, #31
 8000fcc:	401a      	ands	r2, r3
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <NVIC_EnableIRQ+0x28>)
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	4091      	lsls	r1, r2
 8000fd4:	000a      	movs	r2, r1
 8000fd6:	601a      	str	r2, [r3, #0]
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b002      	add	sp, #8
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	e000e100 	.word	0xe000e100

08000fe4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	0002      	movs	r2, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ff8:	d932      	bls.n	8001060 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ffa:	4a2f      	ldr	r2, [pc, #188]	; (80010b8 <NVIC_SetPriority+0xd4>)
 8000ffc:	1dfb      	adds	r3, r7, #7
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	0019      	movs	r1, r3
 8001002:	230f      	movs	r3, #15
 8001004:	400b      	ands	r3, r1
 8001006:	3b08      	subs	r3, #8
 8001008:	089b      	lsrs	r3, r3, #2
 800100a:	3306      	adds	r3, #6
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	18d3      	adds	r3, r2, r3
 8001010:	3304      	adds	r3, #4
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	1dfa      	adds	r2, r7, #7
 8001016:	7812      	ldrb	r2, [r2, #0]
 8001018:	0011      	movs	r1, r2
 800101a:	2203      	movs	r2, #3
 800101c:	400a      	ands	r2, r1
 800101e:	00d2      	lsls	r2, r2, #3
 8001020:	21ff      	movs	r1, #255	; 0xff
 8001022:	4091      	lsls	r1, r2
 8001024:	000a      	movs	r2, r1
 8001026:	43d2      	mvns	r2, r2
 8001028:	401a      	ands	r2, r3
 800102a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	019b      	lsls	r3, r3, #6
 8001030:	22ff      	movs	r2, #255	; 0xff
 8001032:	401a      	ands	r2, r3
 8001034:	1dfb      	adds	r3, r7, #7
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	0018      	movs	r0, r3
 800103a:	2303      	movs	r3, #3
 800103c:	4003      	ands	r3, r0
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001042:	481d      	ldr	r0, [pc, #116]	; (80010b8 <NVIC_SetPriority+0xd4>)
 8001044:	1dfb      	adds	r3, r7, #7
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	001c      	movs	r4, r3
 800104a:	230f      	movs	r3, #15
 800104c:	4023      	ands	r3, r4
 800104e:	3b08      	subs	r3, #8
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	430a      	orrs	r2, r1
 8001054:	3306      	adds	r3, #6
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	18c3      	adds	r3, r0, r3
 800105a:	3304      	adds	r3, #4
 800105c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800105e:	e027      	b.n	80010b0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001060:	4a16      	ldr	r2, [pc, #88]	; (80010bc <NVIC_SetPriority+0xd8>)
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b25b      	sxtb	r3, r3
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	33c0      	adds	r3, #192	; 0xc0
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	589b      	ldr	r3, [r3, r2]
 8001070:	1dfa      	adds	r2, r7, #7
 8001072:	7812      	ldrb	r2, [r2, #0]
 8001074:	0011      	movs	r1, r2
 8001076:	2203      	movs	r2, #3
 8001078:	400a      	ands	r2, r1
 800107a:	00d2      	lsls	r2, r2, #3
 800107c:	21ff      	movs	r1, #255	; 0xff
 800107e:	4091      	lsls	r1, r2
 8001080:	000a      	movs	r2, r1
 8001082:	43d2      	mvns	r2, r2
 8001084:	401a      	ands	r2, r3
 8001086:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	019b      	lsls	r3, r3, #6
 800108c:	22ff      	movs	r2, #255	; 0xff
 800108e:	401a      	ands	r2, r3
 8001090:	1dfb      	adds	r3, r7, #7
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	0018      	movs	r0, r3
 8001096:	2303      	movs	r3, #3
 8001098:	4003      	ands	r3, r0
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800109e:	4807      	ldr	r0, [pc, #28]	; (80010bc <NVIC_SetPriority+0xd8>)
 80010a0:	1dfb      	adds	r3, r7, #7
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	430a      	orrs	r2, r1
 80010aa:	33c0      	adds	r3, #192	; 0xc0
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	501a      	str	r2, [r3, r0]
}
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b003      	add	sp, #12
 80010b6:	bd90      	pop	{r4, r7, pc}
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	e000e100 	.word	0xe000e100

080010c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	4a0c      	ldr	r2, [pc, #48]	; (8001100 <SysTick_Config+0x40>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d901      	bls.n	80010d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d2:	2301      	movs	r3, #1
 80010d4:	e010      	b.n	80010f8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <SysTick_Config+0x44>)
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	3a01      	subs	r2, #1
 80010dc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010de:	2301      	movs	r3, #1
 80010e0:	425b      	negs	r3, r3
 80010e2:	2103      	movs	r1, #3
 80010e4:	0018      	movs	r0, r3
 80010e6:	f7ff ff7d 	bl	8000fe4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <SysTick_Config+0x44>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <SysTick_Config+0x44>)
 80010f2:	2207      	movs	r2, #7
 80010f4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	0018      	movs	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b002      	add	sp, #8
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	00ffffff 	.word	0x00ffffff
 8001104:	e000e010 	.word	0xe000e010

08001108 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	210f      	movs	r1, #15
 8001114:	187b      	adds	r3, r7, r1
 8001116:	1c02      	adds	r2, r0, #0
 8001118:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	187b      	adds	r3, r7, r1
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	b25b      	sxtb	r3, r3
 8001122:	0011      	movs	r1, r2
 8001124:	0018      	movs	r0, r3
 8001126:	f7ff ff5d 	bl	8000fe4 <NVIC_SetPriority>
}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	46bd      	mov	sp, r7
 800112e:	b004      	add	sp, #16
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	0002      	movs	r2, r0
 800113a:	1dfb      	adds	r3, r7, #7
 800113c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800113e:	1dfb      	adds	r3, r7, #7
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	b25b      	sxtb	r3, r3
 8001144:	0018      	movs	r0, r3
 8001146:	f7ff ff37 	bl	8000fb8 <NVIC_EnableIRQ>
}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	46bd      	mov	sp, r7
 800114e:	b002      	add	sp, #8
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	0018      	movs	r0, r3
 800115e:	f7ff ffaf 	bl	80010c0 <SysTick_Config>
 8001162:	0003      	movs	r3, r0
}
 8001164:	0018      	movs	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	b002      	add	sp, #8
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001174:	230f      	movs	r3, #15
 8001176:	18fb      	adds	r3, r7, r3
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2225      	movs	r2, #37	; 0x25
 8001180:	5c9b      	ldrb	r3, [r3, r2]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d007      	beq.n	8001198 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2204      	movs	r2, #4
 800118c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800118e:	230f      	movs	r3, #15
 8001190:	18fb      	adds	r3, r7, r3
 8001192:	2201      	movs	r2, #1
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	e02a      	b.n	80011ee <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	210e      	movs	r1, #14
 80011a4:	438a      	bics	r2, r1
 80011a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2101      	movs	r1, #1
 80011b4:	438a      	bics	r2, r1
 80011b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011bc:	221c      	movs	r2, #28
 80011be:	401a      	ands	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	2101      	movs	r1, #1
 80011c6:	4091      	lsls	r1, r2
 80011c8:	000a      	movs	r2, r1
 80011ca:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2225      	movs	r2, #37	; 0x25
 80011d0:	2101      	movs	r1, #1
 80011d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2224      	movs	r2, #36	; 0x24
 80011d8:	2100      	movs	r1, #0
 80011da:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d004      	beq.n	80011ee <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	0010      	movs	r0, r2
 80011ec:	4798      	blx	r3
    }
  }
  return status;
 80011ee:	230f      	movs	r3, #15
 80011f0:	18fb      	adds	r3, r7, r3
 80011f2:	781b      	ldrb	r3, [r3, #0]
}
 80011f4:	0018      	movs	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	b004      	add	sp, #16
 80011fa:	bd80      	pop	{r7, pc}

080011fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001212:	e155      	b.n	80014c0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2101      	movs	r1, #1
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	4091      	lsls	r1, r2
 800121e:	000a      	movs	r2, r1
 8001220:	4013      	ands	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d100      	bne.n	800122c <HAL_GPIO_Init+0x30>
 800122a:	e146      	b.n	80014ba <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x40>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b12      	cmp	r3, #18
 800123a:	d123      	bne.n	8001284 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	08da      	lsrs	r2, r3, #3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3208      	adds	r2, #8
 8001244:	0092      	lsls	r2, r2, #2
 8001246:	58d3      	ldr	r3, [r2, r3]
 8001248:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	2207      	movs	r2, #7
 800124e:	4013      	ands	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	220f      	movs	r2, #15
 8001254:	409a      	lsls	r2, r3
 8001256:	0013      	movs	r3, r2
 8001258:	43da      	mvns	r2, r3
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	691a      	ldr	r2, [r3, #16]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	2107      	movs	r1, #7
 8001268:	400b      	ands	r3, r1
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	409a      	lsls	r2, r3
 800126e:	0013      	movs	r3, r2
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	08da      	lsrs	r2, r3, #3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3208      	adds	r2, #8
 800127e:	0092      	lsls	r2, r2, #2
 8001280:	6939      	ldr	r1, [r7, #16]
 8001282:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d00b      	beq.n	80012a4 <HAL_GPIO_Init+0xa8>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b02      	cmp	r3, #2
 8001292:	d007      	beq.n	80012a4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001298:	2b11      	cmp	r3, #17
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b12      	cmp	r3, #18
 80012a2:	d130      	bne.n	8001306 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	2203      	movs	r2, #3
 80012b0:	409a      	lsls	r2, r3
 80012b2:	0013      	movs	r3, r2
 80012b4:	43da      	mvns	r2, r3
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	68da      	ldr	r2, [r3, #12]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	409a      	lsls	r2, r3
 80012c6:	0013      	movs	r3, r2
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012da:	2201      	movs	r2, #1
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	409a      	lsls	r2, r3
 80012e0:	0013      	movs	r3, r2
 80012e2:	43da      	mvns	r2, r3
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4013      	ands	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	091b      	lsrs	r3, r3, #4
 80012f0:	2201      	movs	r2, #1
 80012f2:	401a      	ands	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	409a      	lsls	r2, r3
 80012f8:	0013      	movs	r3, r2
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	2203      	movs	r2, #3
 8001312:	409a      	lsls	r2, r3
 8001314:	0013      	movs	r3, r2
 8001316:	43da      	mvns	r2, r3
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2203      	movs	r2, #3
 8001324:	401a      	ands	r2, r3
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	409a      	lsls	r2, r3
 800132c:	0013      	movs	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	409a      	lsls	r2, r3
 8001348:	0013      	movs	r3, r2
 800134a:	43da      	mvns	r2, r3
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	409a      	lsls	r2, r3
 800135c:	0013      	movs	r3, r2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	055b      	lsls	r3, r3, #21
 8001372:	4013      	ands	r3, r2
 8001374:	d100      	bne.n	8001378 <HAL_GPIO_Init+0x17c>
 8001376:	e0a0      	b.n	80014ba <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001378:	4b57      	ldr	r3, [pc, #348]	; (80014d8 <HAL_GPIO_Init+0x2dc>)
 800137a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800137c:	4b56      	ldr	r3, [pc, #344]	; (80014d8 <HAL_GPIO_Init+0x2dc>)
 800137e:	2101      	movs	r1, #1
 8001380:	430a      	orrs	r2, r1
 8001382:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8001384:	4a55      	ldr	r2, [pc, #340]	; (80014dc <HAL_GPIO_Init+0x2e0>)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	089b      	lsrs	r3, r3, #2
 800138a:	3302      	adds	r3, #2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	589b      	ldr	r3, [r3, r2]
 8001390:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	2203      	movs	r2, #3
 8001396:	4013      	ands	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	220f      	movs	r2, #15
 800139c:	409a      	lsls	r2, r3
 800139e:	0013      	movs	r3, r2
 80013a0:	43da      	mvns	r2, r3
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	23a0      	movs	r3, #160	; 0xa0
 80013ac:	05db      	lsls	r3, r3, #23
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d01f      	beq.n	80013f2 <HAL_GPIO_Init+0x1f6>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4a      	ldr	r2, [pc, #296]	; (80014e0 <HAL_GPIO_Init+0x2e4>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d019      	beq.n	80013ee <HAL_GPIO_Init+0x1f2>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a49      	ldr	r2, [pc, #292]	; (80014e4 <HAL_GPIO_Init+0x2e8>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d013      	beq.n	80013ea <HAL_GPIO_Init+0x1ee>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a48      	ldr	r2, [pc, #288]	; (80014e8 <HAL_GPIO_Init+0x2ec>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00d      	beq.n	80013e6 <HAL_GPIO_Init+0x1ea>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a47      	ldr	r2, [pc, #284]	; (80014ec <HAL_GPIO_Init+0x2f0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d007      	beq.n	80013e2 <HAL_GPIO_Init+0x1e6>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a46      	ldr	r2, [pc, #280]	; (80014f0 <HAL_GPIO_Init+0x2f4>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d101      	bne.n	80013de <HAL_GPIO_Init+0x1e2>
 80013da:	2305      	movs	r3, #5
 80013dc:	e00a      	b.n	80013f4 <HAL_GPIO_Init+0x1f8>
 80013de:	2306      	movs	r3, #6
 80013e0:	e008      	b.n	80013f4 <HAL_GPIO_Init+0x1f8>
 80013e2:	2304      	movs	r3, #4
 80013e4:	e006      	b.n	80013f4 <HAL_GPIO_Init+0x1f8>
 80013e6:	2303      	movs	r3, #3
 80013e8:	e004      	b.n	80013f4 <HAL_GPIO_Init+0x1f8>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e002      	b.n	80013f4 <HAL_GPIO_Init+0x1f8>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <HAL_GPIO_Init+0x1f8>
 80013f2:	2300      	movs	r3, #0
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	2103      	movs	r1, #3
 80013f8:	400a      	ands	r2, r1
 80013fa:	0092      	lsls	r2, r2, #2
 80013fc:	4093      	lsls	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001404:	4935      	ldr	r1, [pc, #212]	; (80014dc <HAL_GPIO_Init+0x2e0>)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	089b      	lsrs	r3, r3, #2
 800140a:	3302      	adds	r3, #2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001412:	4b38      	ldr	r3, [pc, #224]	; (80014f4 <HAL_GPIO_Init+0x2f8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	43da      	mvns	r2, r3
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	2380      	movs	r3, #128	; 0x80
 8001428:	025b      	lsls	r3, r3, #9
 800142a:	4013      	ands	r3, r2
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4313      	orrs	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001436:	4b2f      	ldr	r3, [pc, #188]	; (80014f4 <HAL_GPIO_Init+0x2f8>)
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800143c:	4b2d      	ldr	r3, [pc, #180]	; (80014f4 <HAL_GPIO_Init+0x2f8>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	43da      	mvns	r2, r3
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	029b      	lsls	r3, r3, #10
 8001454:	4013      	ands	r3, r2
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001460:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <HAL_GPIO_Init+0x2f8>)
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001466:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <HAL_GPIO_Init+0x2f8>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	43da      	mvns	r2, r3
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	035b      	lsls	r3, r3, #13
 800147e:	4013      	ands	r3, r2
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <HAL_GPIO_Init+0x2f8>)
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001490:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <HAL_GPIO_Init+0x2f8>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	43da      	mvns	r2, r3
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	039b      	lsls	r3, r3, #14
 80014a8:	4013      	ands	r3, r2
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <HAL_GPIO_Init+0x2f8>)
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	40da      	lsrs	r2, r3
 80014c8:	1e13      	subs	r3, r2, #0
 80014ca:	d000      	beq.n	80014ce <HAL_GPIO_Init+0x2d2>
 80014cc:	e6a2      	b.n	8001214 <HAL_GPIO_Init+0x18>
  }
}
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	46bd      	mov	sp, r7
 80014d2:	b006      	add	sp, #24
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010000 	.word	0x40010000
 80014e0:	50000400 	.word	0x50000400
 80014e4:	50000800 	.word	0x50000800
 80014e8:	50000c00 	.word	0x50000c00
 80014ec:	50001000 	.word	0x50001000
 80014f0:	50001c00 	.word	0x50001c00
 80014f4:	40010400 	.word	0x40010400

080014f8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	0008      	movs	r0, r1
 8001502:	0011      	movs	r1, r2
 8001504:	1cbb      	adds	r3, r7, #2
 8001506:	1c02      	adds	r2, r0, #0
 8001508:	801a      	strh	r2, [r3, #0]
 800150a:	1c7b      	adds	r3, r7, #1
 800150c:	1c0a      	adds	r2, r1, #0
 800150e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001510:	1c7b      	adds	r3, r7, #1
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d004      	beq.n	8001522 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001518:	1cbb      	adds	r3, r7, #2
 800151a:	881a      	ldrh	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001520:	e003      	b.n	800152a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001522:	1cbb      	adds	r3, r7, #2
 8001524:	881a      	ldrh	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	629a      	str	r2, [r3, #40]	; 0x28
}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	46bd      	mov	sp, r7
 800152e:	b002      	add	sp, #8
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	000a      	movs	r2, r1
 800153c:	1cbb      	adds	r3, r7, #2
 800153e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	695a      	ldr	r2, [r3, #20]
 8001544:	1cbb      	adds	r3, r7, #2
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	405a      	eors	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	615a      	str	r2, [r3, #20]
}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	46bd      	mov	sp, r7
 8001552:	b002      	add	sp, #8
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001558:	b5b0      	push	{r4, r5, r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d102      	bne.n	800156c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	f000 fb6a 	bl	8001c40 <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800156c:	4bc7      	ldr	r3, [pc, #796]	; (800188c <HAL_RCC_OscConfig+0x334>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	220c      	movs	r2, #12
 8001572:	4013      	ands	r3, r2
 8001574:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001576:	4bc5      	ldr	r3, [pc, #788]	; (800188c <HAL_RCC_OscConfig+0x334>)
 8001578:	68da      	ldr	r2, [r3, #12]
 800157a:	2380      	movs	r3, #128	; 0x80
 800157c:	025b      	lsls	r3, r3, #9
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2201      	movs	r2, #1
 8001588:	4013      	ands	r3, r2
 800158a:	d100      	bne.n	800158e <HAL_RCC_OscConfig+0x36>
 800158c:	e07d      	b.n	800168a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	2b08      	cmp	r3, #8
 8001592:	d007      	beq.n	80015a4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	2b0c      	cmp	r3, #12
 8001598:	d112      	bne.n	80015c0 <HAL_RCC_OscConfig+0x68>
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	025b      	lsls	r3, r3, #9
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d10d      	bne.n	80015c0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a4:	4bb9      	ldr	r3, [pc, #740]	; (800188c <HAL_RCC_OscConfig+0x334>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	029b      	lsls	r3, r3, #10
 80015ac:	4013      	ands	r3, r2
 80015ae:	d100      	bne.n	80015b2 <HAL_RCC_OscConfig+0x5a>
 80015b0:	e06a      	b.n	8001688 <HAL_RCC_OscConfig+0x130>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d166      	bne.n	8001688 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	f000 fb40 	bl	8001c40 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	025b      	lsls	r3, r3, #9
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d107      	bne.n	80015dc <HAL_RCC_OscConfig+0x84>
 80015cc:	4baf      	ldr	r3, [pc, #700]	; (800188c <HAL_RCC_OscConfig+0x334>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4bae      	ldr	r3, [pc, #696]	; (800188c <HAL_RCC_OscConfig+0x334>)
 80015d2:	2180      	movs	r1, #128	; 0x80
 80015d4:	0249      	lsls	r1, r1, #9
 80015d6:	430a      	orrs	r2, r1
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	e027      	b.n	800162c <HAL_RCC_OscConfig+0xd4>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	23a0      	movs	r3, #160	; 0xa0
 80015e2:	02db      	lsls	r3, r3, #11
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d10e      	bne.n	8001606 <HAL_RCC_OscConfig+0xae>
 80015e8:	4ba8      	ldr	r3, [pc, #672]	; (800188c <HAL_RCC_OscConfig+0x334>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4ba7      	ldr	r3, [pc, #668]	; (800188c <HAL_RCC_OscConfig+0x334>)
 80015ee:	2180      	movs	r1, #128	; 0x80
 80015f0:	02c9      	lsls	r1, r1, #11
 80015f2:	430a      	orrs	r2, r1
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	4ba5      	ldr	r3, [pc, #660]	; (800188c <HAL_RCC_OscConfig+0x334>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4ba4      	ldr	r3, [pc, #656]	; (800188c <HAL_RCC_OscConfig+0x334>)
 80015fc:	2180      	movs	r1, #128	; 0x80
 80015fe:	0249      	lsls	r1, r1, #9
 8001600:	430a      	orrs	r2, r1
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	e012      	b.n	800162c <HAL_RCC_OscConfig+0xd4>
 8001606:	4ba1      	ldr	r3, [pc, #644]	; (800188c <HAL_RCC_OscConfig+0x334>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4ba0      	ldr	r3, [pc, #640]	; (800188c <HAL_RCC_OscConfig+0x334>)
 800160c:	49a0      	ldr	r1, [pc, #640]	; (8001890 <HAL_RCC_OscConfig+0x338>)
 800160e:	400a      	ands	r2, r1
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	4b9e      	ldr	r3, [pc, #632]	; (800188c <HAL_RCC_OscConfig+0x334>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	025b      	lsls	r3, r3, #9
 800161a:	4013      	ands	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4b9a      	ldr	r3, [pc, #616]	; (800188c <HAL_RCC_OscConfig+0x334>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b99      	ldr	r3, [pc, #612]	; (800188c <HAL_RCC_OscConfig+0x334>)
 8001626:	499b      	ldr	r1, [pc, #620]	; (8001894 <HAL_RCC_OscConfig+0x33c>)
 8001628:	400a      	ands	r2, r1
 800162a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d014      	beq.n	800165e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001634:	f7ff fcb6 	bl	8000fa4 <HAL_GetTick>
 8001638:	0003      	movs	r3, r0
 800163a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800163e:	f7ff fcb1 	bl	8000fa4 <HAL_GetTick>
 8001642:	0002      	movs	r2, r0
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b64      	cmp	r3, #100	; 0x64
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e2f7      	b.n	8001c40 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001650:	4b8e      	ldr	r3, [pc, #568]	; (800188c <HAL_RCC_OscConfig+0x334>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	029b      	lsls	r3, r3, #10
 8001658:	4013      	ands	r3, r2
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0xe6>
 800165c:	e015      	b.n	800168a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165e:	f7ff fca1 	bl	8000fa4 <HAL_GetTick>
 8001662:	0003      	movs	r3, r0
 8001664:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001668:	f7ff fc9c 	bl	8000fa4 <HAL_GetTick>
 800166c:	0002      	movs	r2, r0
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b64      	cmp	r3, #100	; 0x64
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e2e2      	b.n	8001c40 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800167a:	4b84      	ldr	r3, [pc, #528]	; (800188c <HAL_RCC_OscConfig+0x334>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	029b      	lsls	r3, r3, #10
 8001682:	4013      	ands	r3, r2
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x110>
 8001686:	e000      	b.n	800168a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001688:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2202      	movs	r2, #2
 8001690:	4013      	ands	r3, r2
 8001692:	d100      	bne.n	8001696 <HAL_RCC_OscConfig+0x13e>
 8001694:	e098      	b.n	80017c8 <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	2220      	movs	r2, #32
 80016a0:	4013      	ands	r3, r2
 80016a2:	d009      	beq.n	80016b8 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80016a4:	4b79      	ldr	r3, [pc, #484]	; (800188c <HAL_RCC_OscConfig+0x334>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b78      	ldr	r3, [pc, #480]	; (800188c <HAL_RCC_OscConfig+0x334>)
 80016aa:	2120      	movs	r1, #32
 80016ac:	430a      	orrs	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	2220      	movs	r2, #32
 80016b4:	4393      	bics	r3, r2
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d005      	beq.n	80016ca <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	2b0c      	cmp	r3, #12
 80016c2:	d13d      	bne.n	8001740 <HAL_RCC_OscConfig+0x1e8>
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d13a      	bne.n	8001740 <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80016ca:	4b70      	ldr	r3, [pc, #448]	; (800188c <HAL_RCC_OscConfig+0x334>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2204      	movs	r2, #4
 80016d0:	4013      	ands	r3, r2
 80016d2:	d004      	beq.n	80016de <HAL_RCC_OscConfig+0x186>
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e2b0      	b.n	8001c40 <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016de:	4b6b      	ldr	r3, [pc, #428]	; (800188c <HAL_RCC_OscConfig+0x334>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	4a6d      	ldr	r2, [pc, #436]	; (8001898 <HAL_RCC_OscConfig+0x340>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	0019      	movs	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	021a      	lsls	r2, r3, #8
 80016ee:	4b67      	ldr	r3, [pc, #412]	; (800188c <HAL_RCC_OscConfig+0x334>)
 80016f0:	430a      	orrs	r2, r1
 80016f2:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80016f4:	4b65      	ldr	r3, [pc, #404]	; (800188c <HAL_RCC_OscConfig+0x334>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2209      	movs	r2, #9
 80016fa:	4393      	bics	r3, r2
 80016fc:	0019      	movs	r1, r3
 80016fe:	4b63      	ldr	r3, [pc, #396]	; (800188c <HAL_RCC_OscConfig+0x334>)
 8001700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001702:	430a      	orrs	r2, r1
 8001704:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001706:	f000 fbcb 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 800170a:	0001      	movs	r1, r0
 800170c:	4b5f      	ldr	r3, [pc, #380]	; (800188c <HAL_RCC_OscConfig+0x334>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	091b      	lsrs	r3, r3, #4
 8001712:	220f      	movs	r2, #15
 8001714:	4013      	ands	r3, r2
 8001716:	4a61      	ldr	r2, [pc, #388]	; (800189c <HAL_RCC_OscConfig+0x344>)
 8001718:	5cd3      	ldrb	r3, [r2, r3]
 800171a:	000a      	movs	r2, r1
 800171c:	40da      	lsrs	r2, r3
 800171e:	4b60      	ldr	r3, [pc, #384]	; (80018a0 <HAL_RCC_OscConfig+0x348>)
 8001720:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001722:	2513      	movs	r5, #19
 8001724:	197c      	adds	r4, r7, r5
 8001726:	2000      	movs	r0, #0
 8001728:	f7ff fc06 	bl	8000f38 <HAL_InitTick>
 800172c:	0003      	movs	r3, r0
 800172e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001730:	197b      	adds	r3, r7, r5
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d047      	beq.n	80017c8 <HAL_RCC_OscConfig+0x270>
      {
        return status;
 8001738:	2313      	movs	r3, #19
 800173a:	18fb      	adds	r3, r7, r3
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	e27f      	b.n	8001c40 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	2b00      	cmp	r3, #0
 8001744:	d027      	beq.n	8001796 <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001746:	4b51      	ldr	r3, [pc, #324]	; (800188c <HAL_RCC_OscConfig+0x334>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2209      	movs	r2, #9
 800174c:	4393      	bics	r3, r2
 800174e:	0019      	movs	r1, r3
 8001750:	4b4e      	ldr	r3, [pc, #312]	; (800188c <HAL_RCC_OscConfig+0x334>)
 8001752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001754:	430a      	orrs	r2, r1
 8001756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7ff fc24 	bl	8000fa4 <HAL_GetTick>
 800175c:	0003      	movs	r3, r0
 800175e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001762:	f7ff fc1f 	bl	8000fa4 <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e265      	b.n	8001c40 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001774:	4b45      	ldr	r3, [pc, #276]	; (800188c <HAL_RCC_OscConfig+0x334>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2204      	movs	r2, #4
 800177a:	4013      	ands	r3, r2
 800177c:	d0f1      	beq.n	8001762 <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177e:	4b43      	ldr	r3, [pc, #268]	; (800188c <HAL_RCC_OscConfig+0x334>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	4a45      	ldr	r2, [pc, #276]	; (8001898 <HAL_RCC_OscConfig+0x340>)
 8001784:	4013      	ands	r3, r2
 8001786:	0019      	movs	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	021a      	lsls	r2, r3, #8
 800178e:	4b3f      	ldr	r3, [pc, #252]	; (800188c <HAL_RCC_OscConfig+0x334>)
 8001790:	430a      	orrs	r2, r1
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	e018      	b.n	80017c8 <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001796:	4b3d      	ldr	r3, [pc, #244]	; (800188c <HAL_RCC_OscConfig+0x334>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4b3c      	ldr	r3, [pc, #240]	; (800188c <HAL_RCC_OscConfig+0x334>)
 800179c:	2101      	movs	r1, #1
 800179e:	438a      	bics	r2, r1
 80017a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a2:	f7ff fbff 	bl	8000fa4 <HAL_GetTick>
 80017a6:	0003      	movs	r3, r0
 80017a8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ac:	f7ff fbfa 	bl	8000fa4 <HAL_GetTick>
 80017b0:	0002      	movs	r2, r0
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e240      	b.n	8001c40 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017be:	4b33      	ldr	r3, [pc, #204]	; (800188c <HAL_RCC_OscConfig+0x334>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2204      	movs	r2, #4
 80017c4:	4013      	ands	r3, r2
 80017c6:	d1f1      	bne.n	80017ac <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2210      	movs	r2, #16
 80017ce:	4013      	ands	r3, r2
 80017d0:	d100      	bne.n	80017d4 <HAL_RCC_OscConfig+0x27c>
 80017d2:	e09e      	b.n	8001912 <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d13f      	bne.n	800185a <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017da:	4b2c      	ldr	r3, [pc, #176]	; (800188c <HAL_RCC_OscConfig+0x334>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4013      	ands	r3, r2
 80017e4:	d005      	beq.n	80017f2 <HAL_RCC_OscConfig+0x29a>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e226      	b.n	8001c40 <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017f2:	4b26      	ldr	r3, [pc, #152]	; (800188c <HAL_RCC_OscConfig+0x334>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4a2b      	ldr	r2, [pc, #172]	; (80018a4 <HAL_RCC_OscConfig+0x34c>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	0019      	movs	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1a      	ldr	r2, [r3, #32]
 8001800:	4b22      	ldr	r3, [pc, #136]	; (800188c <HAL_RCC_OscConfig+0x334>)
 8001802:	430a      	orrs	r2, r1
 8001804:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001806:	4b21      	ldr	r3, [pc, #132]	; (800188c <HAL_RCC_OscConfig+0x334>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	0a19      	lsrs	r1, r3, #8
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	061a      	lsls	r2, r3, #24
 8001814:	4b1d      	ldr	r3, [pc, #116]	; (800188c <HAL_RCC_OscConfig+0x334>)
 8001816:	430a      	orrs	r2, r1
 8001818:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	0b5b      	lsrs	r3, r3, #13
 8001820:	3301      	adds	r3, #1
 8001822:	2280      	movs	r2, #128	; 0x80
 8001824:	0212      	lsls	r2, r2, #8
 8001826:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001828:	4b18      	ldr	r3, [pc, #96]	; (800188c <HAL_RCC_OscConfig+0x334>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	091b      	lsrs	r3, r3, #4
 800182e:	210f      	movs	r1, #15
 8001830:	400b      	ands	r3, r1
 8001832:	491a      	ldr	r1, [pc, #104]	; (800189c <HAL_RCC_OscConfig+0x344>)
 8001834:	5ccb      	ldrb	r3, [r1, r3]
 8001836:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <HAL_RCC_OscConfig+0x348>)
 800183a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800183c:	2513      	movs	r5, #19
 800183e:	197c      	adds	r4, r7, r5
 8001840:	2000      	movs	r0, #0
 8001842:	f7ff fb79 	bl	8000f38 <HAL_InitTick>
 8001846:	0003      	movs	r3, r0
 8001848:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800184a:	197b      	adds	r3, r7, r5
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d05f      	beq.n	8001912 <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 8001852:	2313      	movs	r3, #19
 8001854:	18fb      	adds	r3, r7, r3
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	e1f2      	b.n	8001c40 <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d03d      	beq.n	80018de <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <HAL_RCC_OscConfig+0x334>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_RCC_OscConfig+0x334>)
 8001868:	2180      	movs	r1, #128	; 0x80
 800186a:	0049      	lsls	r1, r1, #1
 800186c:	430a      	orrs	r2, r1
 800186e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fb98 	bl	8000fa4 <HAL_GetTick>
 8001874:	0003      	movs	r3, r0
 8001876:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001878:	e016      	b.n	80018a8 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800187a:	f7ff fb93 	bl	8000fa4 <HAL_GetTick>
 800187e:	0002      	movs	r2, r0
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d90f      	bls.n	80018a8 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e1d9      	b.n	8001c40 <HAL_RCC_OscConfig+0x6e8>
 800188c:	40021000 	.word	0x40021000
 8001890:	fffeffff 	.word	0xfffeffff
 8001894:	fffbffff 	.word	0xfffbffff
 8001898:	ffffe0ff 	.word	0xffffe0ff
 800189c:	08003d24 	.word	0x08003d24
 80018a0:	20000004 	.word	0x20000004
 80018a4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018a8:	4bca      	ldr	r3, [pc, #808]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4013      	ands	r3, r2
 80018b2:	d0e2      	beq.n	800187a <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018b4:	4bc7      	ldr	r3, [pc, #796]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	4ac7      	ldr	r2, [pc, #796]	; (8001bd8 <HAL_RCC_OscConfig+0x680>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	0019      	movs	r1, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a1a      	ldr	r2, [r3, #32]
 80018c2:	4bc4      	ldr	r3, [pc, #784]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 80018c4:	430a      	orrs	r2, r1
 80018c6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018c8:	4bc2      	ldr	r3, [pc, #776]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	021b      	lsls	r3, r3, #8
 80018ce:	0a19      	lsrs	r1, r3, #8
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	061a      	lsls	r2, r3, #24
 80018d6:	4bbf      	ldr	r3, [pc, #764]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 80018d8:	430a      	orrs	r2, r1
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	e019      	b.n	8001912 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018de:	4bbd      	ldr	r3, [pc, #756]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4bbc      	ldr	r3, [pc, #752]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 80018e4:	49bd      	ldr	r1, [pc, #756]	; (8001bdc <HAL_RCC_OscConfig+0x684>)
 80018e6:	400a      	ands	r2, r1
 80018e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ea:	f7ff fb5b 	bl	8000fa4 <HAL_GetTick>
 80018ee:	0003      	movs	r3, r0
 80018f0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018f4:	f7ff fb56 	bl	8000fa4 <HAL_GetTick>
 80018f8:	0002      	movs	r2, r0
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e19c      	b.n	8001c40 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001906:	4bb3      	ldr	r3, [pc, #716]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4013      	ands	r3, r2
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2208      	movs	r2, #8
 8001918:	4013      	ands	r3, r2
 800191a:	d036      	beq.n	800198a <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d019      	beq.n	8001958 <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001924:	4bab      	ldr	r3, [pc, #684]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001926:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001928:	4baa      	ldr	r3, [pc, #680]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 800192a:	2101      	movs	r1, #1
 800192c:	430a      	orrs	r2, r1
 800192e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001930:	f7ff fb38 	bl	8000fa4 <HAL_GetTick>
 8001934:	0003      	movs	r3, r0
 8001936:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800193a:	f7ff fb33 	bl	8000fa4 <HAL_GetTick>
 800193e:	0002      	movs	r2, r0
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e179      	b.n	8001c40 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800194c:	4ba1      	ldr	r3, [pc, #644]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 800194e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001950:	2202      	movs	r2, #2
 8001952:	4013      	ands	r3, r2
 8001954:	d0f1      	beq.n	800193a <HAL_RCC_OscConfig+0x3e2>
 8001956:	e018      	b.n	800198a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001958:	4b9e      	ldr	r3, [pc, #632]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 800195a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800195c:	4b9d      	ldr	r3, [pc, #628]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 800195e:	2101      	movs	r1, #1
 8001960:	438a      	bics	r2, r1
 8001962:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001964:	f7ff fb1e 	bl	8000fa4 <HAL_GetTick>
 8001968:	0003      	movs	r3, r0
 800196a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800196e:	f7ff fb19 	bl	8000fa4 <HAL_GetTick>
 8001972:	0002      	movs	r2, r0
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e15f      	b.n	8001c40 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001980:	4b94      	ldr	r3, [pc, #592]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001984:	2202      	movs	r2, #2
 8001986:	4013      	ands	r3, r2
 8001988:	d1f1      	bne.n	800196e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2204      	movs	r2, #4
 8001990:	4013      	ands	r3, r2
 8001992:	d100      	bne.n	8001996 <HAL_RCC_OscConfig+0x43e>
 8001994:	e0af      	b.n	8001af6 <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001996:	2323      	movs	r3, #35	; 0x23
 8001998:	18fb      	adds	r3, r7, r3
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800199e:	4b8d      	ldr	r3, [pc, #564]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 80019a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	055b      	lsls	r3, r3, #21
 80019a6:	4013      	ands	r3, r2
 80019a8:	d10a      	bne.n	80019c0 <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019aa:	4b8a      	ldr	r3, [pc, #552]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 80019ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019ae:	4b89      	ldr	r3, [pc, #548]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 80019b0:	2180      	movs	r1, #128	; 0x80
 80019b2:	0549      	lsls	r1, r1, #21
 80019b4:	430a      	orrs	r2, r1
 80019b6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80019b8:	2323      	movs	r3, #35	; 0x23
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	2201      	movs	r2, #1
 80019be:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c0:	4b87      	ldr	r3, [pc, #540]	; (8001be0 <HAL_RCC_OscConfig+0x688>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4013      	ands	r3, r2
 80019ca:	d11a      	bne.n	8001a02 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019cc:	4b84      	ldr	r3, [pc, #528]	; (8001be0 <HAL_RCC_OscConfig+0x688>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b83      	ldr	r3, [pc, #524]	; (8001be0 <HAL_RCC_OscConfig+0x688>)
 80019d2:	2180      	movs	r1, #128	; 0x80
 80019d4:	0049      	lsls	r1, r1, #1
 80019d6:	430a      	orrs	r2, r1
 80019d8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019da:	f7ff fae3 	bl	8000fa4 <HAL_GetTick>
 80019de:	0003      	movs	r3, r0
 80019e0:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e4:	f7ff fade 	bl	8000fa4 <HAL_GetTick>
 80019e8:	0002      	movs	r2, r0
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b64      	cmp	r3, #100	; 0x64
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e124      	b.n	8001c40 <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f6:	4b7a      	ldr	r3, [pc, #488]	; (8001be0 <HAL_RCC_OscConfig+0x688>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	2380      	movs	r3, #128	; 0x80
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4013      	ands	r3, r2
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d107      	bne.n	8001a1e <HAL_RCC_OscConfig+0x4c6>
 8001a0e:	4b71      	ldr	r3, [pc, #452]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001a10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a12:	4b70      	ldr	r3, [pc, #448]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001a14:	2180      	movs	r1, #128	; 0x80
 8001a16:	0049      	lsls	r1, r1, #1
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	651a      	str	r2, [r3, #80]	; 0x50
 8001a1c:	e031      	b.n	8001a82 <HAL_RCC_OscConfig+0x52a>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x4e8>
 8001a26:	4b6b      	ldr	r3, [pc, #428]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001a28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a2a:	4b6a      	ldr	r3, [pc, #424]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001a2c:	496b      	ldr	r1, [pc, #428]	; (8001bdc <HAL_RCC_OscConfig+0x684>)
 8001a2e:	400a      	ands	r2, r1
 8001a30:	651a      	str	r2, [r3, #80]	; 0x50
 8001a32:	4b68      	ldr	r3, [pc, #416]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001a34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a36:	4b67      	ldr	r3, [pc, #412]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001a38:	496a      	ldr	r1, [pc, #424]	; (8001be4 <HAL_RCC_OscConfig+0x68c>)
 8001a3a:	400a      	ands	r2, r1
 8001a3c:	651a      	str	r2, [r3, #80]	; 0x50
 8001a3e:	e020      	b.n	8001a82 <HAL_RCC_OscConfig+0x52a>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	23a0      	movs	r3, #160	; 0xa0
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d10e      	bne.n	8001a6a <HAL_RCC_OscConfig+0x512>
 8001a4c:	4b61      	ldr	r3, [pc, #388]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001a4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a50:	4b60      	ldr	r3, [pc, #384]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001a52:	2180      	movs	r1, #128	; 0x80
 8001a54:	00c9      	lsls	r1, r1, #3
 8001a56:	430a      	orrs	r2, r1
 8001a58:	651a      	str	r2, [r3, #80]	; 0x50
 8001a5a:	4b5e      	ldr	r3, [pc, #376]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001a5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a5e:	4b5d      	ldr	r3, [pc, #372]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001a60:	2180      	movs	r1, #128	; 0x80
 8001a62:	0049      	lsls	r1, r1, #1
 8001a64:	430a      	orrs	r2, r1
 8001a66:	651a      	str	r2, [r3, #80]	; 0x50
 8001a68:	e00b      	b.n	8001a82 <HAL_RCC_OscConfig+0x52a>
 8001a6a:	4b5a      	ldr	r3, [pc, #360]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001a6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a6e:	4b59      	ldr	r3, [pc, #356]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001a70:	495a      	ldr	r1, [pc, #360]	; (8001bdc <HAL_RCC_OscConfig+0x684>)
 8001a72:	400a      	ands	r2, r1
 8001a74:	651a      	str	r2, [r3, #80]	; 0x50
 8001a76:	4b57      	ldr	r3, [pc, #348]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001a78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a7a:	4b56      	ldr	r3, [pc, #344]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001a7c:	4959      	ldr	r1, [pc, #356]	; (8001be4 <HAL_RCC_OscConfig+0x68c>)
 8001a7e:	400a      	ands	r2, r1
 8001a80:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d015      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8a:	f7ff fa8b 	bl	8000fa4 <HAL_GetTick>
 8001a8e:	0003      	movs	r3, r0
 8001a90:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a92:	e009      	b.n	8001aa8 <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a94:	f7ff fa86 	bl	8000fa4 <HAL_GetTick>
 8001a98:	0002      	movs	r2, r0
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	4a52      	ldr	r2, [pc, #328]	; (8001be8 <HAL_RCC_OscConfig+0x690>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e0cb      	b.n	8001c40 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001aa8:	4b4a      	ldr	r3, [pc, #296]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001aaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d0ef      	beq.n	8001a94 <HAL_RCC_OscConfig+0x53c>
 8001ab4:	e014      	b.n	8001ae0 <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab6:	f7ff fa75 	bl	8000fa4 <HAL_GetTick>
 8001aba:	0003      	movs	r3, r0
 8001abc:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001abe:	e009      	b.n	8001ad4 <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac0:	f7ff fa70 	bl	8000fa4 <HAL_GetTick>
 8001ac4:	0002      	movs	r2, r0
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	4a47      	ldr	r2, [pc, #284]	; (8001be8 <HAL_RCC_OscConfig+0x690>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e0b5      	b.n	8001c40 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ad4:	4b3f      	ldr	r3, [pc, #252]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001ad6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4013      	ands	r3, r2
 8001ade:	d1ef      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ae0:	2323      	movs	r3, #35	; 0x23
 8001ae2:	18fb      	adds	r3, r7, r3
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d105      	bne.n	8001af6 <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aea:	4b3a      	ldr	r3, [pc, #232]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001aec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001aee:	4b39      	ldr	r3, [pc, #228]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001af0:	493e      	ldr	r1, [pc, #248]	; (8001bec <HAL_RCC_OscConfig+0x694>)
 8001af2:	400a      	ands	r2, r1
 8001af4:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d100      	bne.n	8001b00 <HAL_RCC_OscConfig+0x5a8>
 8001afe:	e09e      	b.n	8001c3e <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	2b0c      	cmp	r3, #12
 8001b04:	d100      	bne.n	8001b08 <HAL_RCC_OscConfig+0x5b0>
 8001b06:	e077      	b.n	8001bf8 <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d145      	bne.n	8001b9c <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b10:	4b30      	ldr	r3, [pc, #192]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001b16:	4936      	ldr	r1, [pc, #216]	; (8001bf0 <HAL_RCC_OscConfig+0x698>)
 8001b18:	400a      	ands	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fa42 	bl	8000fa4 <HAL_GetTick>
 8001b20:	0003      	movs	r3, r0
 8001b22:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b26:	f7ff fa3d 	bl	8000fa4 <HAL_GetTick>
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e083      	b.n	8001c40 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b38:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	049b      	lsls	r3, r3, #18
 8001b40:	4013      	ands	r3, r2
 8001b42:	d1f0      	bne.n	8001b26 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b44:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	4a2a      	ldr	r2, [pc, #168]	; (8001bf4 <HAL_RCC_OscConfig+0x69c>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001b60:	430a      	orrs	r2, r1
 8001b62:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b64:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001b6a:	2180      	movs	r1, #128	; 0x80
 8001b6c:	0449      	lsls	r1, r1, #17
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b72:	f7ff fa17 	bl	8000fa4 <HAL_GetTick>
 8001b76:	0003      	movs	r3, r0
 8001b78:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b7c:	f7ff fa12 	bl	8000fa4 <HAL_GetTick>
 8001b80:	0002      	movs	r2, r0
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e058      	b.n	8001c40 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	049b      	lsls	r3, r3, #18
 8001b96:	4013      	ands	r3, r2
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0x624>
 8001b9a:	e050      	b.n	8001c3e <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9c:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001ba2:	4913      	ldr	r1, [pc, #76]	; (8001bf0 <HAL_RCC_OscConfig+0x698>)
 8001ba4:	400a      	ands	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff f9fc 	bl	8000fa4 <HAL_GetTick>
 8001bac:	0003      	movs	r3, r0
 8001bae:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb2:	f7ff f9f7 	bl	8000fa4 <HAL_GetTick>
 8001bb6:	0002      	movs	r2, r0
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e03d      	b.n	8001c40 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <HAL_RCC_OscConfig+0x67c>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	049b      	lsls	r3, r3, #18
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d1f0      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x65a>
 8001bd0:	e035      	b.n	8001c3e <HAL_RCC_OscConfig+0x6e6>
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	ffff1fff 	.word	0xffff1fff
 8001bdc:	fffffeff 	.word	0xfffffeff
 8001be0:	40007000 	.word	0x40007000
 8001be4:	fffffbff 	.word	0xfffffbff
 8001be8:	00001388 	.word	0x00001388
 8001bec:	efffffff 	.word	0xefffffff
 8001bf0:	feffffff 	.word	0xfeffffff
 8001bf4:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e01d      	b.n	8001c40 <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c04:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <HAL_RCC_OscConfig+0x6f0>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	025b      	lsls	r3, r3, #9
 8001c10:	401a      	ands	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d10f      	bne.n	8001c3a <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	23f0      	movs	r3, #240	; 0xf0
 8001c1e:	039b      	lsls	r3, r3, #14
 8001c20:	401a      	ands	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d107      	bne.n	8001c3a <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	23c0      	movs	r3, #192	; 0xc0
 8001c2e:	041b      	lsls	r3, r3, #16
 8001c30:	401a      	ands	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d001      	beq.n	8001c3e <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	0018      	movs	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b00a      	add	sp, #40	; 0x28
 8001c46:	bdb0      	pop	{r4, r5, r7, pc}
 8001c48:	40021000 	.word	0x40021000

08001c4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c4c:	b5b0      	push	{r4, r5, r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e10d      	b.n	8001e7c <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c60:	4b88      	ldr	r3, [pc, #544]	; (8001e84 <HAL_RCC_ClockConfig+0x238>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2201      	movs	r2, #1
 8001c66:	4013      	ands	r3, r2
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d911      	bls.n	8001c92 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6e:	4b85      	ldr	r3, [pc, #532]	; (8001e84 <HAL_RCC_ClockConfig+0x238>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2201      	movs	r2, #1
 8001c74:	4393      	bics	r3, r2
 8001c76:	0019      	movs	r1, r3
 8001c78:	4b82      	ldr	r3, [pc, #520]	; (8001e84 <HAL_RCC_ClockConfig+0x238>)
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c80:	4b80      	ldr	r3, [pc, #512]	; (8001e84 <HAL_RCC_ClockConfig+0x238>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2201      	movs	r2, #1
 8001c86:	4013      	ands	r3, r2
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d001      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e0f4      	b.n	8001e7c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2202      	movs	r2, #2
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d009      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c9c:	4b7a      	ldr	r3, [pc, #488]	; (8001e88 <HAL_RCC_ClockConfig+0x23c>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	22f0      	movs	r2, #240	; 0xf0
 8001ca2:	4393      	bics	r3, r2
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	4b77      	ldr	r3, [pc, #476]	; (8001e88 <HAL_RCC_ClockConfig+0x23c>)
 8001cac:	430a      	orrs	r2, r1
 8001cae:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d100      	bne.n	8001cbc <HAL_RCC_ClockConfig+0x70>
 8001cba:	e089      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d107      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cc4:	4b70      	ldr	r3, [pc, #448]	; (8001e88 <HAL_RCC_ClockConfig+0x23c>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	029b      	lsls	r3, r3, #10
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d120      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0d3      	b.n	8001e7c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d107      	bne.n	8001cec <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cdc:	4b6a      	ldr	r3, [pc, #424]	; (8001e88 <HAL_RCC_ClockConfig+0x23c>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	049b      	lsls	r3, r3, #18
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d114      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0c7      	b.n	8001e7c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d106      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cf4:	4b64      	ldr	r3, [pc, #400]	; (8001e88 <HAL_RCC_ClockConfig+0x23c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2204      	movs	r2, #4
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d109      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e0bc      	b.n	8001e7c <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d02:	4b61      	ldr	r3, [pc, #388]	; (8001e88 <HAL_RCC_ClockConfig+0x23c>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d101      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e0b4      	b.n	8001e7c <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d12:	4b5d      	ldr	r3, [pc, #372]	; (8001e88 <HAL_RCC_ClockConfig+0x23c>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2203      	movs	r2, #3
 8001d18:	4393      	bics	r3, r2
 8001d1a:	0019      	movs	r1, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	4b59      	ldr	r3, [pc, #356]	; (8001e88 <HAL_RCC_ClockConfig+0x23c>)
 8001d22:	430a      	orrs	r2, r1
 8001d24:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d26:	f7ff f93d 	bl	8000fa4 <HAL_GetTick>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d111      	bne.n	8001d5a <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d36:	e009      	b.n	8001d4c <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d38:	f7ff f934 	bl	8000fa4 <HAL_GetTick>
 8001d3c:	0002      	movs	r2, r0
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	4a52      	ldr	r2, [pc, #328]	; (8001e8c <HAL_RCC_ClockConfig+0x240>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e097      	b.n	8001e7c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d4c:	4b4e      	ldr	r3, [pc, #312]	; (8001e88 <HAL_RCC_ClockConfig+0x23c>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	220c      	movs	r2, #12
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d1ef      	bne.n	8001d38 <HAL_RCC_ClockConfig+0xec>
 8001d58:	e03a      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b03      	cmp	r3, #3
 8001d60:	d111      	bne.n	8001d86 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d62:	e009      	b.n	8001d78 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d64:	f7ff f91e 	bl	8000fa4 <HAL_GetTick>
 8001d68:	0002      	movs	r2, r0
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	4a47      	ldr	r2, [pc, #284]	; (8001e8c <HAL_RCC_ClockConfig+0x240>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e081      	b.n	8001e7c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d78:	4b43      	ldr	r3, [pc, #268]	; (8001e88 <HAL_RCC_ClockConfig+0x23c>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	220c      	movs	r2, #12
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b0c      	cmp	r3, #12
 8001d82:	d1ef      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x118>
 8001d84:	e024      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d11b      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d8e:	e009      	b.n	8001da4 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d90:	f7ff f908 	bl	8000fa4 <HAL_GetTick>
 8001d94:	0002      	movs	r2, r0
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	4a3c      	ldr	r2, [pc, #240]	; (8001e8c <HAL_RCC_ClockConfig+0x240>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e06b      	b.n	8001e7c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001da4:	4b38      	ldr	r3, [pc, #224]	; (8001e88 <HAL_RCC_ClockConfig+0x23c>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	220c      	movs	r2, #12
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d1ef      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x144>
 8001db0:	e00e      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db2:	f7ff f8f7 	bl	8000fa4 <HAL_GetTick>
 8001db6:	0002      	movs	r2, r0
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	4a33      	ldr	r2, [pc, #204]	; (8001e8c <HAL_RCC_ClockConfig+0x240>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e05a      	b.n	8001e7c <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001dc6:	4b30      	ldr	r3, [pc, #192]	; (8001e88 <HAL_RCC_ClockConfig+0x23c>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	220c      	movs	r2, #12
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d1f0      	bne.n	8001db2 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd0:	4b2c      	ldr	r3, [pc, #176]	; (8001e84 <HAL_RCC_ClockConfig+0x238>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d211      	bcs.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dde:	4b29      	ldr	r3, [pc, #164]	; (8001e84 <HAL_RCC_ClockConfig+0x238>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2201      	movs	r2, #1
 8001de4:	4393      	bics	r3, r2
 8001de6:	0019      	movs	r1, r3
 8001de8:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <HAL_RCC_ClockConfig+0x238>)
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df0:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <HAL_RCC_ClockConfig+0x238>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2201      	movs	r2, #1
 8001df6:	4013      	ands	r3, r2
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d001      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e03c      	b.n	8001e7c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2204      	movs	r2, #4
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d009      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e0c:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <HAL_RCC_ClockConfig+0x23c>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4a1f      	ldr	r2, [pc, #124]	; (8001e90 <HAL_RCC_ClockConfig+0x244>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	0019      	movs	r1, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <HAL_RCC_ClockConfig+0x23c>)
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2208      	movs	r2, #8
 8001e26:	4013      	ands	r3, r2
 8001e28:	d00a      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e2a:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <HAL_RCC_ClockConfig+0x23c>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	4a19      	ldr	r2, [pc, #100]	; (8001e94 <HAL_RCC_ClockConfig+0x248>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	0019      	movs	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	00da      	lsls	r2, r3, #3
 8001e3a:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <HAL_RCC_ClockConfig+0x23c>)
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e40:	f000 f82e 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8001e44:	0001      	movs	r1, r0
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <HAL_RCC_ClockConfig+0x23c>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	091b      	lsrs	r3, r3, #4
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	4013      	ands	r3, r2
 8001e50:	4a11      	ldr	r2, [pc, #68]	; (8001e98 <HAL_RCC_ClockConfig+0x24c>)
 8001e52:	5cd3      	ldrb	r3, [r2, r3]
 8001e54:	000a      	movs	r2, r1
 8001e56:	40da      	lsrs	r2, r3
 8001e58:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <HAL_RCC_ClockConfig+0x250>)
 8001e5a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001e5c:	250b      	movs	r5, #11
 8001e5e:	197c      	adds	r4, r7, r5
 8001e60:	2000      	movs	r0, #0
 8001e62:	f7ff f869 	bl	8000f38 <HAL_InitTick>
 8001e66:	0003      	movs	r3, r0
 8001e68:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001e6a:	197b      	adds	r3, r7, r5
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8001e72:	230b      	movs	r3, #11
 8001e74:	18fb      	adds	r3, r7, r3
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	e000      	b.n	8001e7c <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b004      	add	sp, #16
 8001e82:	bdb0      	pop	{r4, r5, r7, pc}
 8001e84:	40022000 	.word	0x40022000
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	00001388 	.word	0x00001388
 8001e90:	fffff8ff 	.word	0xfffff8ff
 8001e94:	ffffc7ff 	.word	0xffffc7ff
 8001e98:	08003d24 	.word	0x08003d24
 8001e9c:	20000004 	.word	0x20000004

08001ea0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001ea6:	4b3b      	ldr	r3, [pc, #236]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	220c      	movs	r2, #12
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d00e      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8001eb6:	2b0c      	cmp	r3, #12
 8001eb8:	d00f      	beq.n	8001eda <HAL_RCC_GetSysClockFreq+0x3a>
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d157      	bne.n	8001f6e <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ebe:	4b35      	ldr	r3, [pc, #212]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2210      	movs	r2, #16
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d002      	beq.n	8001ece <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001ec8:	4b33      	ldr	r3, [pc, #204]	; (8001f98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eca:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001ecc:	e05d      	b.n	8001f8a <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8001ece:	4b33      	ldr	r3, [pc, #204]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ed0:	613b      	str	r3, [r7, #16]
      break;
 8001ed2:	e05a      	b.n	8001f8a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ed4:	4b31      	ldr	r3, [pc, #196]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ed6:	613b      	str	r3, [r7, #16]
      break;
 8001ed8:	e057      	b.n	8001f8a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	0c9b      	lsrs	r3, r3, #18
 8001ede:	220f      	movs	r2, #15
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	4a2f      	ldr	r2, [pc, #188]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ee4:	5cd3      	ldrb	r3, [r2, r3]
 8001ee6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	0d9b      	lsrs	r3, r3, #22
 8001eec:	2203      	movs	r2, #3
 8001eee:	4013      	ands	r3, r2
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ef4:	4b27      	ldr	r3, [pc, #156]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	025b      	lsls	r3, r3, #9
 8001efc:	4013      	ands	r3, r2
 8001efe:	d00f      	beq.n	8001f20 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001f00:	68b9      	ldr	r1, [r7, #8]
 8001f02:	000a      	movs	r2, r1
 8001f04:	0152      	lsls	r2, r2, #5
 8001f06:	1a52      	subs	r2, r2, r1
 8001f08:	0193      	lsls	r3, r2, #6
 8001f0a:	1a9b      	subs	r3, r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	185b      	adds	r3, r3, r1
 8001f10:	029b      	lsls	r3, r3, #10
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7fe f8f7 	bl	8000108 <__udivsi3>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	e023      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f20:	4b1c      	ldr	r3, [pc, #112]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2210      	movs	r2, #16
 8001f26:	4013      	ands	r3, r2
 8001f28:	d00f      	beq.n	8001f4a <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001f2a:	68b9      	ldr	r1, [r7, #8]
 8001f2c:	000a      	movs	r2, r1
 8001f2e:	0152      	lsls	r2, r2, #5
 8001f30:	1a52      	subs	r2, r2, r1
 8001f32:	0193      	lsls	r3, r2, #6
 8001f34:	1a9b      	subs	r3, r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	185b      	adds	r3, r3, r1
 8001f3a:	021b      	lsls	r3, r3, #8
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f7fe f8e2 	bl	8000108 <__udivsi3>
 8001f44:	0003      	movs	r3, r0
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	e00e      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8001f4a:	68b9      	ldr	r1, [r7, #8]
 8001f4c:	000a      	movs	r2, r1
 8001f4e:	0152      	lsls	r2, r2, #5
 8001f50:	1a52      	subs	r2, r2, r1
 8001f52:	0193      	lsls	r3, r2, #6
 8001f54:	1a9b      	subs	r3, r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	185b      	adds	r3, r3, r1
 8001f5a:	029b      	lsls	r3, r3, #10
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f7fe f8d2 	bl	8000108 <__udivsi3>
 8001f64:	0003      	movs	r3, r0
 8001f66:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	613b      	str	r3, [r7, #16]
      break;
 8001f6c:	e00d      	b.n	8001f8a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	0b5b      	lsrs	r3, r3, #13
 8001f74:	2207      	movs	r2, #7
 8001f76:	4013      	ands	r3, r2
 8001f78:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	2280      	movs	r2, #128	; 0x80
 8001f80:	0212      	lsls	r2, r2, #8
 8001f82:	409a      	lsls	r2, r3
 8001f84:	0013      	movs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
      break;
 8001f88:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f8a:	693b      	ldr	r3, [r7, #16]
}
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	b006      	add	sp, #24
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40021000 	.word	0x40021000
 8001f98:	003d0900 	.word	0x003d0900
 8001f9c:	00f42400 	.word	0x00f42400
 8001fa0:	08003d3c 	.word	0x08003d3c

08001fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa8:	4b02      	ldr	r3, [pc, #8]	; (8001fb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001faa:	681b      	ldr	r3, [r3, #0]
}
 8001fac:	0018      	movs	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	20000004 	.word	0x20000004

08001fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fbc:	f7ff fff2 	bl	8001fa4 <HAL_RCC_GetHCLKFreq>
 8001fc0:	0001      	movs	r1, r0
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	0a1b      	lsrs	r3, r3, #8
 8001fc8:	2207      	movs	r2, #7
 8001fca:	4013      	ands	r3, r2
 8001fcc:	4a04      	ldr	r2, [pc, #16]	; (8001fe0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fce:	5cd3      	ldrb	r3, [r2, r3]
 8001fd0:	40d9      	lsrs	r1, r3
 8001fd2:	000b      	movs	r3, r1
}
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	08003d34 	.word	0x08003d34

08001fe4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fe8:	f7ff ffdc 	bl	8001fa4 <HAL_RCC_GetHCLKFreq>
 8001fec:	0001      	movs	r1, r0
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	0adb      	lsrs	r3, r3, #11
 8001ff4:	2207      	movs	r2, #7
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	4a04      	ldr	r2, [pc, #16]	; (800200c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ffa:	5cd3      	ldrb	r3, [r2, r3]
 8001ffc:	40d9      	lsrs	r1, r3
 8001ffe:	000b      	movs	r3, r1
}
 8002000:	0018      	movs	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	40021000 	.word	0x40021000
 800200c:	08003d34 	.word	0x08003d34

08002010 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2220      	movs	r2, #32
 800201e:	4013      	ands	r3, r2
 8002020:	d100      	bne.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8002022:	e0c7      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002024:	2317      	movs	r3, #23
 8002026:	18fb      	adds	r3, r7, r3
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800202c:	4b91      	ldr	r3, [pc, #580]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800202e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	055b      	lsls	r3, r3, #21
 8002034:	4013      	ands	r3, r2
 8002036:	d10a      	bne.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002038:	4b8e      	ldr	r3, [pc, #568]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800203a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800203c:	4b8d      	ldr	r3, [pc, #564]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800203e:	2180      	movs	r1, #128	; 0x80
 8002040:	0549      	lsls	r1, r1, #21
 8002042:	430a      	orrs	r2, r1
 8002044:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002046:	2317      	movs	r3, #23
 8002048:	18fb      	adds	r3, r7, r3
 800204a:	2201      	movs	r2, #1
 800204c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204e:	4b8a      	ldr	r3, [pc, #552]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4013      	ands	r3, r2
 8002058:	d11a      	bne.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800205a:	4b87      	ldr	r3, [pc, #540]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	4b86      	ldr	r3, [pc, #536]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002060:	2180      	movs	r1, #128	; 0x80
 8002062:	0049      	lsls	r1, r1, #1
 8002064:	430a      	orrs	r2, r1
 8002066:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002068:	f7fe ff9c 	bl	8000fa4 <HAL_GetTick>
 800206c:	0003      	movs	r3, r0
 800206e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002070:	e008      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002072:	f7fe ff97 	bl	8000fa4 <HAL_GetTick>
 8002076:	0002      	movs	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b64      	cmp	r3, #100	; 0x64
 800207e:	d901      	bls.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e0f3      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x25c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002084:	4b7c      	ldr	r3, [pc, #496]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4013      	ands	r3, r2
 800208e:	d0f0      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002090:	4b78      	ldr	r3, [pc, #480]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	23c0      	movs	r3, #192	; 0xc0
 8002096:	039b      	lsls	r3, r3, #14
 8002098:	4013      	ands	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	23c0      	movs	r3, #192	; 0xc0
 80020a2:	039b      	lsls	r3, r3, #14
 80020a4:	4013      	ands	r3, r2
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d013      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	23c0      	movs	r3, #192	; 0xc0
 80020b2:	029b      	lsls	r3, r3, #10
 80020b4:	401a      	ands	r2, r3
 80020b6:	23c0      	movs	r3, #192	; 0xc0
 80020b8:	029b      	lsls	r3, r3, #10
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d10a      	bne.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80020be:	4b6d      	ldr	r3, [pc, #436]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	029b      	lsls	r3, r3, #10
 80020c6:	401a      	ands	r2, r3
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	029b      	lsls	r3, r3, #10
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d101      	bne.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0cb      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x25c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80020d4:	4b67      	ldr	r3, [pc, #412]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020d8:	23c0      	movs	r3, #192	; 0xc0
 80020da:	029b      	lsls	r3, r3, #10
 80020dc:	4013      	ands	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d03b      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	23c0      	movs	r3, #192	; 0xc0
 80020ec:	029b      	lsls	r3, r3, #10
 80020ee:	4013      	ands	r3, r2
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d033      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2220      	movs	r2, #32
 80020fc:	4013      	ands	r3, r2
 80020fe:	d02e      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002100:	4b5c      	ldr	r3, [pc, #368]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002104:	4a5d      	ldr	r2, [pc, #372]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002106:	4013      	ands	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800210a:	4b5a      	ldr	r3, [pc, #360]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800210c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800210e:	4b59      	ldr	r3, [pc, #356]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002110:	2180      	movs	r1, #128	; 0x80
 8002112:	0309      	lsls	r1, r1, #12
 8002114:	430a      	orrs	r2, r1
 8002116:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002118:	4b56      	ldr	r3, [pc, #344]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800211a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800211c:	4b55      	ldr	r3, [pc, #340]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800211e:	4958      	ldr	r1, [pc, #352]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002120:	400a      	ands	r2, r1
 8002122:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002124:	4b53      	ldr	r3, [pc, #332]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4013      	ands	r3, r2
 8002132:	d014      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7fe ff36 	bl	8000fa4 <HAL_GetTick>
 8002138:	0003      	movs	r3, r0
 800213a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800213c:	e009      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800213e:	f7fe ff31 	bl	8000fa4 <HAL_GetTick>
 8002142:	0002      	movs	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	4a4e      	ldr	r2, [pc, #312]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d901      	bls.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e08c      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x25c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002152:	4b48      	ldr	r3, [pc, #288]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002154:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002156:	2380      	movs	r3, #128	; 0x80
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4013      	ands	r3, r2
 800215c:	d0ef      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	23c0      	movs	r3, #192	; 0xc0
 8002164:	029b      	lsls	r3, r3, #10
 8002166:	401a      	ands	r2, r3
 8002168:	23c0      	movs	r3, #192	; 0xc0
 800216a:	029b      	lsls	r3, r3, #10
 800216c:	429a      	cmp	r2, r3
 800216e:	d10c      	bne.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002170:	4b40      	ldr	r3, [pc, #256]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a44      	ldr	r2, [pc, #272]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002176:	4013      	ands	r3, r2
 8002178:	0019      	movs	r1, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	23c0      	movs	r3, #192	; 0xc0
 8002180:	039b      	lsls	r3, r3, #14
 8002182:	401a      	ands	r2, r3
 8002184:	4b3b      	ldr	r3, [pc, #236]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002186:	430a      	orrs	r2, r1
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	4b3a      	ldr	r3, [pc, #232]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800218c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	23c0      	movs	r3, #192	; 0xc0
 8002194:	029b      	lsls	r3, r3, #10
 8002196:	401a      	ands	r2, r3
 8002198:	4b36      	ldr	r3, [pc, #216]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800219a:	430a      	orrs	r2, r1
 800219c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800219e:	2317      	movs	r3, #23
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d105      	bne.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a8:	4b32      	ldr	r3, [pc, #200]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021ac:	4b31      	ldr	r3, [pc, #196]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021ae:	4937      	ldr	r1, [pc, #220]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80021b0:	400a      	ands	r2, r1
 80021b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2201      	movs	r2, #1
 80021ba:	4013      	ands	r3, r2
 80021bc:	d009      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021be:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c2:	2203      	movs	r2, #3
 80021c4:	4393      	bics	r3, r2
 80021c6:	0019      	movs	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	4b29      	ldr	r3, [pc, #164]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021ce:	430a      	orrs	r2, r1
 80021d0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2202      	movs	r2, #2
 80021d8:	4013      	ands	r3, r2
 80021da:	d009      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021dc:	4b25      	ldr	r3, [pc, #148]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e0:	220c      	movs	r2, #12
 80021e2:	4393      	bics	r3, r2
 80021e4:	0019      	movs	r1, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	4b22      	ldr	r3, [pc, #136]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021ec:	430a      	orrs	r2, r1
 80021ee:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2204      	movs	r2, #4
 80021f6:	4013      	ands	r3, r2
 80021f8:	d009      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021fa:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fe:	4a24      	ldr	r2, [pc, #144]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002200:	4013      	ands	r3, r2
 8002202:	0019      	movs	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800220a:	430a      	orrs	r2, r1
 800220c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2208      	movs	r2, #8
 8002214:	4013      	ands	r3, r2
 8002216:	d009      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002218:	4b16      	ldr	r3, [pc, #88]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800221a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221c:	4a1d      	ldr	r2, [pc, #116]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800221e:	4013      	ands	r3, r2
 8002220:	0019      	movs	r1, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695a      	ldr	r2, [r3, #20]
 8002226:	4b13      	ldr	r3, [pc, #76]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002228:	430a      	orrs	r2, r1
 800222a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	4013      	ands	r3, r2
 8002236:	d009      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002238:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800223a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223c:	4a0f      	ldr	r2, [pc, #60]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800223e:	4013      	ands	r3, r2
 8002240:	0019      	movs	r1, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699a      	ldr	r2, [r3, #24]
 8002246:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002248:	430a      	orrs	r2, r1
 800224a:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2280      	movs	r2, #128	; 0x80
 8002252:	4013      	ands	r3, r2
 8002254:	d009      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002256:	4b07      	ldr	r3, [pc, #28]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225a:	4a0f      	ldr	r2, [pc, #60]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800225c:	4013      	ands	r3, r2
 800225e:	0019      	movs	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69da      	ldr	r2, [r3, #28]
 8002264:	4b03      	ldr	r3, [pc, #12]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002266:	430a      	orrs	r2, r1
 8002268:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	0018      	movs	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	b006      	add	sp, #24
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40021000 	.word	0x40021000
 8002278:	40007000 	.word	0x40007000
 800227c:	fffcffff 	.word	0xfffcffff
 8002280:	fff7ffff 	.word	0xfff7ffff
 8002284:	00001388 	.word	0x00001388
 8002288:	ffcfffff 	.word	0xffcfffff
 800228c:	efffffff 	.word	0xefffffff
 8002290:	fffff3ff 	.word	0xfffff3ff
 8002294:	ffffcfff 	.word	0xffffcfff
 8002298:	fff3ffff 	.word	0xfff3ffff

0800229c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e059      	b.n	8002362 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2251      	movs	r2, #81	; 0x51
 80022b8:	5c9b      	ldrb	r3, [r3, r2]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d107      	bne.n	80022d0 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2250      	movs	r2, #80	; 0x50
 80022c4:	2100      	movs	r1, #0
 80022c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	0018      	movs	r0, r3
 80022cc:	f7fe fc98 	bl	8000c00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2251      	movs	r2, #81	; 0x51
 80022d4:	2102      	movs	r1, #2
 80022d6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2140      	movs	r1, #64	; 0x40
 80022e4:	438a      	bics	r2, r1
 80022e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6999      	ldr	r1, [r3, #24]
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	400b      	ands	r3, r1
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	431a      	orrs	r2, r3
 800231c:	0011      	movs	r1, r2
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	0c1b      	lsrs	r3, r3, #16
 8002330:	2204      	movs	r2, #4
 8002332:	4013      	ands	r3, r2
 8002334:	0019      	movs	r1, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	69da      	ldr	r2, [r3, #28]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4907      	ldr	r1, [pc, #28]	; (800236c <HAL_SPI_Init+0xd0>)
 800234e:	400a      	ands	r2, r1
 8002350:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2251      	movs	r2, #81	; 0x51
 800235c:	2101      	movs	r1, #1
 800235e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	0018      	movs	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	b002      	add	sp, #8
 8002368:	bd80      	pop	{r7, pc}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	fffff7ff 	.word	0xfffff7ff

08002370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e01e      	b.n	80023c0 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2239      	movs	r2, #57	; 0x39
 8002386:	5c9b      	ldrb	r3, [r3, r2]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d107      	bne.n	800239e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2238      	movs	r2, #56	; 0x38
 8002392:	2100      	movs	r1, #0
 8002394:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	0018      	movs	r0, r3
 800239a:	f7fe fc77 	bl	8000c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2239      	movs	r2, #57	; 0x39
 80023a2:	2102      	movs	r1, #2
 80023a4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3304      	adds	r3, #4
 80023ae:	0019      	movs	r1, r3
 80023b0:	0010      	movs	r0, r2
 80023b2:	f000 f9f1 	bl	8002798 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2239      	movs	r2, #57	; 0x39
 80023ba:	2101      	movs	r1, #1
 80023bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	0018      	movs	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b002      	add	sp, #8
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2101      	movs	r1, #1
 80023dc:	430a      	orrs	r2, r1
 80023de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2207      	movs	r2, #7
 80023e8:	4013      	ands	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b06      	cmp	r3, #6
 80023f0:	d007      	beq.n	8002402 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2101      	movs	r1, #1
 80023fe:	430a      	orrs	r2, r1
 8002400:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	b004      	add	sp, #16
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	2202      	movs	r2, #2
 800241c:	4013      	ands	r3, r2
 800241e:	2b02      	cmp	r3, #2
 8002420:	d124      	bne.n	800246c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2202      	movs	r2, #2
 800242a:	4013      	ands	r3, r2
 800242c:	2b02      	cmp	r3, #2
 800242e:	d11d      	bne.n	800246c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2203      	movs	r2, #3
 8002436:	4252      	negs	r2, r2
 8002438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	2203      	movs	r2, #3
 8002448:	4013      	ands	r3, r2
 800244a:	d004      	beq.n	8002456 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	0018      	movs	r0, r3
 8002450:	f000 f98a 	bl	8002768 <HAL_TIM_IC_CaptureCallback>
 8002454:	e007      	b.n	8002466 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	0018      	movs	r0, r3
 800245a:	f000 f97d 	bl	8002758 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	0018      	movs	r0, r3
 8002462:	f000 f989 	bl	8002778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2204      	movs	r2, #4
 8002474:	4013      	ands	r3, r2
 8002476:	2b04      	cmp	r3, #4
 8002478:	d125      	bne.n	80024c6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2204      	movs	r2, #4
 8002482:	4013      	ands	r3, r2
 8002484:	2b04      	cmp	r3, #4
 8002486:	d11e      	bne.n	80024c6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2205      	movs	r2, #5
 800248e:	4252      	negs	r2, r2
 8002490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2202      	movs	r2, #2
 8002496:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699a      	ldr	r2, [r3, #24]
 800249e:	23c0      	movs	r3, #192	; 0xc0
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4013      	ands	r3, r2
 80024a4:	d004      	beq.n	80024b0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	0018      	movs	r0, r3
 80024aa:	f000 f95d 	bl	8002768 <HAL_TIM_IC_CaptureCallback>
 80024ae:	e007      	b.n	80024c0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	0018      	movs	r0, r3
 80024b4:	f000 f950 	bl	8002758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	0018      	movs	r0, r3
 80024bc:	f000 f95c 	bl	8002778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	2208      	movs	r2, #8
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d124      	bne.n	800251e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	2208      	movs	r2, #8
 80024dc:	4013      	ands	r3, r2
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d11d      	bne.n	800251e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2209      	movs	r2, #9
 80024e8:	4252      	negs	r2, r2
 80024ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2204      	movs	r2, #4
 80024f0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	2203      	movs	r2, #3
 80024fa:	4013      	ands	r3, r2
 80024fc:	d004      	beq.n	8002508 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	0018      	movs	r0, r3
 8002502:	f000 f931 	bl	8002768 <HAL_TIM_IC_CaptureCallback>
 8002506:	e007      	b.n	8002518 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	0018      	movs	r0, r3
 800250c:	f000 f924 	bl	8002758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	0018      	movs	r0, r3
 8002514:	f000 f930 	bl	8002778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	2210      	movs	r2, #16
 8002526:	4013      	ands	r3, r2
 8002528:	2b10      	cmp	r3, #16
 800252a:	d125      	bne.n	8002578 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	2210      	movs	r2, #16
 8002534:	4013      	ands	r3, r2
 8002536:	2b10      	cmp	r3, #16
 8002538:	d11e      	bne.n	8002578 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2211      	movs	r2, #17
 8002540:	4252      	negs	r2, r2
 8002542:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2208      	movs	r2, #8
 8002548:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	69da      	ldr	r2, [r3, #28]
 8002550:	23c0      	movs	r3, #192	; 0xc0
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4013      	ands	r3, r2
 8002556:	d004      	beq.n	8002562 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	0018      	movs	r0, r3
 800255c:	f000 f904 	bl	8002768 <HAL_TIM_IC_CaptureCallback>
 8002560:	e007      	b.n	8002572 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	0018      	movs	r0, r3
 8002566:	f000 f8f7 	bl	8002758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	0018      	movs	r0, r3
 800256e:	f000 f903 	bl	8002778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	2201      	movs	r2, #1
 8002580:	4013      	ands	r3, r2
 8002582:	2b01      	cmp	r3, #1
 8002584:	d10f      	bne.n	80025a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	2201      	movs	r2, #1
 800258e:	4013      	ands	r3, r2
 8002590:	2b01      	cmp	r3, #1
 8002592:	d108      	bne.n	80025a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2202      	movs	r2, #2
 800259a:	4252      	negs	r2, r2
 800259c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	0018      	movs	r0, r3
 80025a2:	f7fe f90b 	bl	80007bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	2240      	movs	r2, #64	; 0x40
 80025ae:	4013      	ands	r3, r2
 80025b0:	2b40      	cmp	r3, #64	; 0x40
 80025b2:	d10f      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	2240      	movs	r2, #64	; 0x40
 80025bc:	4013      	ands	r3, r2
 80025be:	2b40      	cmp	r3, #64	; 0x40
 80025c0:	d108      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2241      	movs	r2, #65	; 0x41
 80025c8:	4252      	negs	r2, r2
 80025ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	0018      	movs	r0, r3
 80025d0:	f000 f8da 	bl	8002788 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025d4:	46c0      	nop			; (mov r8, r8)
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b002      	add	sp, #8
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2238      	movs	r2, #56	; 0x38
 80025ea:	5c9b      	ldrb	r3, [r3, r2]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_TIM_ConfigClockSource+0x18>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e0ab      	b.n	800274c <HAL_TIM_ConfigClockSource+0x170>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2238      	movs	r2, #56	; 0x38
 80025f8:	2101      	movs	r1, #1
 80025fa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2239      	movs	r2, #57	; 0x39
 8002600:	2102      	movs	r1, #2
 8002602:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2277      	movs	r2, #119	; 0x77
 8002610:	4393      	bics	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4a4f      	ldr	r2, [pc, #316]	; (8002754 <HAL_TIM_ConfigClockSource+0x178>)
 8002618:	4013      	ands	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b40      	cmp	r3, #64	; 0x40
 800262a:	d100      	bne.n	800262e <HAL_TIM_ConfigClockSource+0x52>
 800262c:	e06b      	b.n	8002706 <HAL_TIM_ConfigClockSource+0x12a>
 800262e:	d80e      	bhi.n	800264e <HAL_TIM_ConfigClockSource+0x72>
 8002630:	2b10      	cmp	r3, #16
 8002632:	d100      	bne.n	8002636 <HAL_TIM_ConfigClockSource+0x5a>
 8002634:	e077      	b.n	8002726 <HAL_TIM_ConfigClockSource+0x14a>
 8002636:	d803      	bhi.n	8002640 <HAL_TIM_ConfigClockSource+0x64>
 8002638:	2b00      	cmp	r3, #0
 800263a:	d100      	bne.n	800263e <HAL_TIM_ConfigClockSource+0x62>
 800263c:	e073      	b.n	8002726 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800263e:	e07c      	b.n	800273a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002640:	2b20      	cmp	r3, #32
 8002642:	d100      	bne.n	8002646 <HAL_TIM_ConfigClockSource+0x6a>
 8002644:	e06f      	b.n	8002726 <HAL_TIM_ConfigClockSource+0x14a>
 8002646:	2b30      	cmp	r3, #48	; 0x30
 8002648:	d100      	bne.n	800264c <HAL_TIM_ConfigClockSource+0x70>
 800264a:	e06c      	b.n	8002726 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 800264c:	e075      	b.n	800273a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800264e:	2b70      	cmp	r3, #112	; 0x70
 8002650:	d00e      	beq.n	8002670 <HAL_TIM_ConfigClockSource+0x94>
 8002652:	d804      	bhi.n	800265e <HAL_TIM_ConfigClockSource+0x82>
 8002654:	2b50      	cmp	r3, #80	; 0x50
 8002656:	d036      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0xea>
 8002658:	2b60      	cmp	r3, #96	; 0x60
 800265a:	d044      	beq.n	80026e6 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 800265c:	e06d      	b.n	800273a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800265e:	2280      	movs	r2, #128	; 0x80
 8002660:	0152      	lsls	r2, r2, #5
 8002662:	4293      	cmp	r3, r2
 8002664:	d068      	beq.n	8002738 <HAL_TIM_ConfigClockSource+0x15c>
 8002666:	2280      	movs	r2, #128	; 0x80
 8002668:	0192      	lsls	r2, r2, #6
 800266a:	4293      	cmp	r3, r2
 800266c:	d017      	beq.n	800269e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800266e:	e064      	b.n	800273a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6818      	ldr	r0, [r3, #0]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	6899      	ldr	r1, [r3, #8]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f000 f962 	bl	8002948 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2277      	movs	r2, #119	; 0x77
 8002690:	4313      	orrs	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	609a      	str	r2, [r3, #8]
      break;
 800269c:	e04d      	b.n	800273a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	6899      	ldr	r1, [r3, #8]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f000 f94b 	bl	8002948 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2180      	movs	r1, #128	; 0x80
 80026be:	01c9      	lsls	r1, r1, #7
 80026c0:	430a      	orrs	r2, r1
 80026c2:	609a      	str	r2, [r3, #8]
      break;
 80026c4:	e039      	b.n	800273a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6859      	ldr	r1, [r3, #4]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	001a      	movs	r2, r3
 80026d4:	f000 f8be 	bl	8002854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2150      	movs	r1, #80	; 0x50
 80026de:	0018      	movs	r0, r3
 80026e0:	f000 f918 	bl	8002914 <TIM_ITRx_SetConfig>
      break;
 80026e4:	e029      	b.n	800273a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	6859      	ldr	r1, [r3, #4]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	001a      	movs	r2, r3
 80026f4:	f000 f8dc 	bl	80028b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2160      	movs	r1, #96	; 0x60
 80026fe:	0018      	movs	r0, r3
 8002700:	f000 f908 	bl	8002914 <TIM_ITRx_SetConfig>
      break;
 8002704:	e019      	b.n	800273a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	6859      	ldr	r1, [r3, #4]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	001a      	movs	r2, r3
 8002714:	f000 f89e 	bl	8002854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2140      	movs	r1, #64	; 0x40
 800271e:	0018      	movs	r0, r3
 8002720:	f000 f8f8 	bl	8002914 <TIM_ITRx_SetConfig>
      break;
 8002724:	e009      	b.n	800273a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	0019      	movs	r1, r3
 8002730:	0010      	movs	r0, r2
 8002732:	f000 f8ef 	bl	8002914 <TIM_ITRx_SetConfig>
      break;
 8002736:	e000      	b.n	800273a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8002738:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2239      	movs	r2, #57	; 0x39
 800273e:	2101      	movs	r1, #1
 8002740:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2238      	movs	r2, #56	; 0x38
 8002746:	2100      	movs	r1, #0
 8002748:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	0018      	movs	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	b004      	add	sp, #16
 8002752:	bd80      	pop	{r7, pc}
 8002754:	ffff00ff 	.word	0xffff00ff

08002758 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002760:	46c0      	nop			; (mov r8, r8)
 8002762:	46bd      	mov	sp, r7
 8002764:	b002      	add	sp, #8
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	b002      	add	sp, #8
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002780:	46c0      	nop			; (mov r8, r8)
 8002782:	46bd      	mov	sp, r7
 8002784:	b002      	add	sp, #8
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002790:	46c0      	nop			; (mov r8, r8)
 8002792:	46bd      	mov	sp, r7
 8002794:	b002      	add	sp, #8
 8002796:	bd80      	pop	{r7, pc}

08002798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	2380      	movs	r3, #128	; 0x80
 80027ac:	05db      	lsls	r3, r3, #23
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d00b      	beq.n	80027ca <TIM_Base_SetConfig+0x32>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a23      	ldr	r2, [pc, #140]	; (8002844 <TIM_Base_SetConfig+0xac>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d007      	beq.n	80027ca <TIM_Base_SetConfig+0x32>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a22      	ldr	r2, [pc, #136]	; (8002848 <TIM_Base_SetConfig+0xb0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d003      	beq.n	80027ca <TIM_Base_SetConfig+0x32>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a21      	ldr	r2, [pc, #132]	; (800284c <TIM_Base_SetConfig+0xb4>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d108      	bne.n	80027dc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2270      	movs	r2, #112	; 0x70
 80027ce:	4393      	bics	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4313      	orrs	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	2380      	movs	r3, #128	; 0x80
 80027e0:	05db      	lsls	r3, r3, #23
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d00b      	beq.n	80027fe <TIM_Base_SetConfig+0x66>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a16      	ldr	r2, [pc, #88]	; (8002844 <TIM_Base_SetConfig+0xac>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d007      	beq.n	80027fe <TIM_Base_SetConfig+0x66>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a15      	ldr	r2, [pc, #84]	; (8002848 <TIM_Base_SetConfig+0xb0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d003      	beq.n	80027fe <TIM_Base_SetConfig+0x66>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a14      	ldr	r2, [pc, #80]	; (800284c <TIM_Base_SetConfig+0xb4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d108      	bne.n	8002810 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4a13      	ldr	r2, [pc, #76]	; (8002850 <TIM_Base_SetConfig+0xb8>)
 8002802:	4013      	ands	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4313      	orrs	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2280      	movs	r2, #128	; 0x80
 8002814:	4393      	bics	r3, r2
 8002816:	001a      	movs	r2, r3
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	615a      	str	r2, [r3, #20]
}
 800283c:	46c0      	nop			; (mov r8, r8)
 800283e:	46bd      	mov	sp, r7
 8002840:	b004      	add	sp, #16
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40000400 	.word	0x40000400
 8002848:	40010800 	.word	0x40010800
 800284c:	40011400 	.word	0x40011400
 8002850:	fffffcff 	.word	0xfffffcff

08002854 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	2201      	movs	r2, #1
 800286c:	4393      	bics	r3, r2
 800286e:	001a      	movs	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	22f0      	movs	r2, #240	; 0xf0
 800287e:	4393      	bics	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	220a      	movs	r2, #10
 8002890:	4393      	bics	r3, r2
 8002892:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	4313      	orrs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	621a      	str	r2, [r3, #32]
}
 80028a8:	46c0      	nop			; (mov r8, r8)
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b006      	add	sp, #24
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	2210      	movs	r2, #16
 80028c2:	4393      	bics	r3, r2
 80028c4:	001a      	movs	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	4a0d      	ldr	r2, [pc, #52]	; (8002910 <TIM_TI2_ConfigInputStage+0x60>)
 80028da:	4013      	ands	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	031b      	lsls	r3, r3, #12
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	22a0      	movs	r2, #160	; 0xa0
 80028ec:	4393      	bics	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	621a      	str	r2, [r3, #32]
}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	46bd      	mov	sp, r7
 800290a:	b006      	add	sp, #24
 800290c:	bd80      	pop	{r7, pc}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	ffff0fff 	.word	0xffff0fff

08002914 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2270      	movs	r2, #112	; 0x70
 8002928:	4393      	bics	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4313      	orrs	r3, r2
 8002932:	2207      	movs	r2, #7
 8002934:	4313      	orrs	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	609a      	str	r2, [r3, #8]
}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	46bd      	mov	sp, r7
 8002942:	b004      	add	sp, #16
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
 8002954:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	4a09      	ldr	r2, [pc, #36]	; (8002984 <TIM_ETR_SetConfig+0x3c>)
 8002960:	4013      	ands	r3, r2
 8002962:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	021a      	lsls	r2, r3, #8
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	431a      	orrs	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	4313      	orrs	r3, r2
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	4313      	orrs	r3, r2
 8002974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	609a      	str	r2, [r3, #8]
}
 800297c:	46c0      	nop			; (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	b006      	add	sp, #24
 8002982:	bd80      	pop	{r7, pc}
 8002984:	ffff00ff 	.word	0xffff00ff

08002988 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2238      	movs	r2, #56	; 0x38
 8002996:	5c9b      	ldrb	r3, [r3, r2]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800299c:	2302      	movs	r3, #2
 800299e:	e032      	b.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2238      	movs	r2, #56	; 0x38
 80029a4:	2101      	movs	r1, #1
 80029a6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2239      	movs	r2, #57	; 0x39
 80029ac:	2102      	movs	r1, #2
 80029ae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2270      	movs	r2, #112	; 0x70
 80029c4:	4393      	bics	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2280      	movs	r2, #128	; 0x80
 80029d6:	4393      	bics	r3, r2
 80029d8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2239      	movs	r2, #57	; 0x39
 80029f8:	2101      	movs	r1, #1
 80029fa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2238      	movs	r2, #56	; 0x38
 8002a00:	2100      	movs	r1, #0
 8002a02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	0018      	movs	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	b004      	add	sp, #16
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e044      	b.n	8002aac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d107      	bne.n	8002a3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2270      	movs	r2, #112	; 0x70
 8002a2e:	2100      	movs	r1, #0
 8002a30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	0018      	movs	r0, r3
 8002a36:	f7fe f947 	bl	8000cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2224      	movs	r2, #36	; 0x24
 8002a3e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	438a      	bics	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	0018      	movs	r0, r3
 8002a54:	f000 fb06 	bl	8003064 <UART_SetConfig>
 8002a58:	0003      	movs	r3, r0
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e024      	b.n	8002aac <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f000 fe2d 	bl	80036cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	490d      	ldr	r1, [pc, #52]	; (8002ab4 <HAL_UART_Init+0xa4>)
 8002a7e:	400a      	ands	r2, r1
 8002a80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	212a      	movs	r1, #42	; 0x2a
 8002a8e:	438a      	bics	r2, r1
 8002a90:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f000 fec5 	bl	8003834 <UART_CheckIdleState>
 8002aaa:	0003      	movs	r3, r0
}
 8002aac:	0018      	movs	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b002      	add	sp, #8
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	ffffb7ff 	.word	0xffffb7ff

08002ab8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	1dbb      	adds	r3, r7, #6
 8002ac4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	d158      	bne.n	8002b80 <HAL_UART_Transmit_IT+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_UART_Transmit_IT+0x24>
 8002ad4:	1dbb      	adds	r3, r7, #6
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e050      	b.n	8002b82 <HAL_UART_Transmit_IT+0xca>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	015b      	lsls	r3, r3, #5
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d109      	bne.n	8002b00 <HAL_UART_Transmit_IT+0x48>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d105      	bne.n	8002b00 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2201      	movs	r2, #1
 8002af8:	4013      	ands	r3, r2
 8002afa:	d001      	beq.n	8002b00 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e040      	b.n	8002b82 <HAL_UART_Transmit_IT+0xca>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2270      	movs	r2, #112	; 0x70
 8002b04:	5c9b      	ldrb	r3, [r3, r2]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_UART_Transmit_IT+0x56>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e039      	b.n	8002b82 <HAL_UART_Transmit_IT+0xca>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2270      	movs	r2, #112	; 0x70
 8002b12:	2101      	movs	r1, #1
 8002b14:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	1dba      	adds	r2, r7, #6
 8002b20:	2150      	movs	r1, #80	; 0x50
 8002b22:	8812      	ldrh	r2, [r2, #0]
 8002b24:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1dba      	adds	r2, r7, #6
 8002b2a:	2152      	movs	r1, #82	; 0x52
 8002b2c:	8812      	ldrh	r2, [r2, #0]
 8002b2e:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2221      	movs	r2, #33	; 0x21
 8002b40:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	015b      	lsls	r3, r3, #5
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d107      	bne.n	8002b5e <HAL_UART_Transmit_IT+0xa6>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d103      	bne.n	8002b5e <HAL_UART_Transmit_IT+0xa6>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4a0c      	ldr	r2, [pc, #48]	; (8002b8c <HAL_UART_Transmit_IT+0xd4>)
 8002b5a:	665a      	str	r2, [r3, #100]	; 0x64
 8002b5c:	e002      	b.n	8002b64 <HAL_UART_Transmit_IT+0xac>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4a0b      	ldr	r2, [pc, #44]	; (8002b90 <HAL_UART_Transmit_IT+0xd8>)
 8002b62:	665a      	str	r2, [r3, #100]	; 0x64
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2270      	movs	r2, #112	; 0x70
 8002b68:	2100      	movs	r1, #0
 8002b6a:	5499      	strb	r1, [r3, r2]

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2180      	movs	r1, #128	; 0x80
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	e000      	b.n	8002b82 <HAL_UART_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002b80:	2302      	movs	r3, #2
  }
}
 8002b82:	0018      	movs	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	b004      	add	sp, #16
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	08003a75 	.word	0x08003a75
 8002b90:	08003a07 	.word	0x08003a07

08002b94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	1dbb      	adds	r3, r7, #6
 8002ba0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ba6:	2b20      	cmp	r3, #32
 8002ba8:	d000      	beq.n	8002bac <HAL_UART_Receive_IT+0x18>
 8002baa:	e09f      	b.n	8002cec <HAL_UART_Receive_IT+0x158>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_UART_Receive_IT+0x26>
 8002bb2:	1dbb      	adds	r3, r7, #6
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e097      	b.n	8002cee <HAL_UART_Receive_IT+0x15a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	2380      	movs	r3, #128	; 0x80
 8002bc4:	015b      	lsls	r3, r3, #5
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d109      	bne.n	8002bde <HAL_UART_Receive_IT+0x4a>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d105      	bne.n	8002bde <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d001      	beq.n	8002bde <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e087      	b.n	8002cee <HAL_UART_Receive_IT+0x15a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2270      	movs	r2, #112	; 0x70
 8002be2:	5c9b      	ldrb	r3, [r3, r2]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_UART_Receive_IT+0x58>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e080      	b.n	8002cee <HAL_UART_Receive_IT+0x15a>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2270      	movs	r2, #112	; 0x70
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	1dba      	adds	r2, r7, #6
 8002bfe:	2158      	movs	r1, #88	; 0x58
 8002c00:	8812      	ldrh	r2, [r2, #0]
 8002c02:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	1dba      	adds	r2, r7, #6
 8002c08:	215a      	movs	r1, #90	; 0x5a
 8002c0a:	8812      	ldrh	r2, [r2, #0]
 8002c0c:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	2380      	movs	r3, #128	; 0x80
 8002c1a:	015b      	lsls	r3, r3, #5
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d10d      	bne.n	8002c3c <HAL_UART_Receive_IT+0xa8>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d104      	bne.n	8002c32 <HAL_UART_Receive_IT+0x9e>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	225c      	movs	r2, #92	; 0x5c
 8002c2c:	4932      	ldr	r1, [pc, #200]	; (8002cf8 <HAL_UART_Receive_IT+0x164>)
 8002c2e:	5299      	strh	r1, [r3, r2]
 8002c30:	e02e      	b.n	8002c90 <HAL_UART_Receive_IT+0xfc>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	225c      	movs	r2, #92	; 0x5c
 8002c36:	21ff      	movs	r1, #255	; 0xff
 8002c38:	5299      	strh	r1, [r3, r2]
 8002c3a:	e029      	b.n	8002c90 <HAL_UART_Receive_IT+0xfc>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10d      	bne.n	8002c60 <HAL_UART_Receive_IT+0xcc>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d104      	bne.n	8002c56 <HAL_UART_Receive_IT+0xc2>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	225c      	movs	r2, #92	; 0x5c
 8002c50:	21ff      	movs	r1, #255	; 0xff
 8002c52:	5299      	strh	r1, [r3, r2]
 8002c54:	e01c      	b.n	8002c90 <HAL_UART_Receive_IT+0xfc>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	225c      	movs	r2, #92	; 0x5c
 8002c5a:	217f      	movs	r1, #127	; 0x7f
 8002c5c:	5299      	strh	r1, [r3, r2]
 8002c5e:	e017      	b.n	8002c90 <HAL_UART_Receive_IT+0xfc>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	2380      	movs	r3, #128	; 0x80
 8002c66:	055b      	lsls	r3, r3, #21
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d10d      	bne.n	8002c88 <HAL_UART_Receive_IT+0xf4>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d104      	bne.n	8002c7e <HAL_UART_Receive_IT+0xea>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	225c      	movs	r2, #92	; 0x5c
 8002c78:	217f      	movs	r1, #127	; 0x7f
 8002c7a:	5299      	strh	r1, [r3, r2]
 8002c7c:	e008      	b.n	8002c90 <HAL_UART_Receive_IT+0xfc>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	225c      	movs	r2, #92	; 0x5c
 8002c82:	213f      	movs	r1, #63	; 0x3f
 8002c84:	5299      	strh	r1, [r3, r2]
 8002c86:	e003      	b.n	8002c90 <HAL_UART_Receive_IT+0xfc>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	225c      	movs	r2, #92	; 0x5c
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2222      	movs	r2, #34	; 0x22
 8002c9a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	015b      	lsls	r3, r3, #5
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d107      	bne.n	8002cc8 <HAL_UART_Receive_IT+0x134>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d103      	bne.n	8002cc8 <HAL_UART_Receive_IT+0x134>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4a0e      	ldr	r2, [pc, #56]	; (8002cfc <HAL_UART_Receive_IT+0x168>)
 8002cc4:	661a      	str	r2, [r3, #96]	; 0x60
 8002cc6:	e002      	b.n	8002cce <HAL_UART_Receive_IT+0x13a>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4a0d      	ldr	r2, [pc, #52]	; (8002d00 <HAL_UART_Receive_IT+0x16c>)
 8002ccc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2270      	movs	r2, #112	; 0x70
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2190      	movs	r1, #144	; 0x90
 8002ce2:	0049      	lsls	r1, r1, #1
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e000      	b.n	8002cee <HAL_UART_Receive_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8002cec:	2302      	movs	r3, #2
  }
}
 8002cee:	0018      	movs	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b004      	add	sp, #16
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	000001ff 	.word	0x000001ff
 8002cfc:	08003bdd 	.word	0x08003bdd
 8002d00:	08003b21 	.word	0x08003b21

08002d04 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4931      	ldr	r1, [pc, #196]	; (8002ddc <HAL_UART_AbortReceive_IT+0xd8>)
 8002d18:	400a      	ands	r2, r1
 8002d1a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2101      	movs	r1, #1
 8002d28:	438a      	bics	r2, r1
 8002d2a:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2240      	movs	r2, #64	; 0x40
 8002d34:	4013      	ands	r3, r2
 8002d36:	2b40      	cmp	r3, #64	; 0x40
 8002d38:	d139      	bne.n	8002dae <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2140      	movs	r1, #64	; 0x40
 8002d46:	438a      	bics	r2, r1
 8002d48:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d012      	beq.n	8002d78 <HAL_UART_AbortReceive_IT+0x74>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d56:	4a22      	ldr	r2, [pc, #136]	; (8002de0 <HAL_UART_AbortReceive_IT+0xdc>)
 8002d58:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f7fe fa04 	bl	800116c <HAL_DMA_Abort_IT>
 8002d64:	1e03      	subs	r3, r0, #0
 8002d66:	d034      	beq.n	8002dd2 <HAL_UART_AbortReceive_IT+0xce>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d72:	0018      	movs	r0, r3
 8002d74:	4790      	blx	r2
 8002d76:	e02c      	b.n	8002dd2 <HAL_UART_AbortReceive_IT+0xce>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	225a      	movs	r2, #90	; 0x5a
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	5299      	strh	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	220f      	movs	r2, #15
 8002d8c:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699a      	ldr	r2, [r3, #24]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2108      	movs	r1, #8
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2220      	movs	r2, #32
 8002da2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	0018      	movs	r0, r3
 8002da8:	f7fd fcda 	bl	8000760 <HAL_UART_AbortReceiveCpltCallback>
 8002dac:	e011      	b.n	8002dd2 <HAL_UART_AbortReceive_IT+0xce>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	225a      	movs	r2, #90	; 0x5a
 8002db2:	2100      	movs	r1, #0
 8002db4:	5299      	strh	r1, [r3, r2]

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	220f      	movs	r2, #15
 8002dc2:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f7fd fcc7 	bl	8000760 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b002      	add	sp, #8
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	fffffedf 	.word	0xfffffedf
 8002de0:	080039c3 	.word	0x080039c3

08002de4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	220f      	movs	r2, #15
 8002e08:	4013      	ands	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d112      	bne.n	8002e38 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	2220      	movs	r2, #32
 8002e16:	4013      	ands	r3, r2
 8002e18:	d00e      	beq.n	8002e38 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d00a      	beq.n	8002e38 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d100      	bne.n	8002e2c <HAL_UART_IRQHandler+0x48>
 8002e2a:	e0f6      	b.n	800301a <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	0010      	movs	r0, r2
 8002e34:	4798      	blx	r3
      }
      return;
 8002e36:	e0f0      	b.n	800301a <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d100      	bne.n	8002e40 <HAL_UART_IRQHandler+0x5c>
 8002e3e:	e0b8      	b.n	8002fb2 <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2201      	movs	r2, #1
 8002e44:	4013      	ands	r3, r2
 8002e46:	d105      	bne.n	8002e54 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	2390      	movs	r3, #144	; 0x90
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d100      	bne.n	8002e54 <HAL_UART_IRQHandler+0x70>
 8002e52:	e0ae      	b.n	8002fb2 <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	2201      	movs	r2, #1
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d00e      	beq.n	8002e7a <HAL_UART_IRQHandler+0x96>
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	2380      	movs	r3, #128	; 0x80
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4013      	ands	r3, r2
 8002e64:	d009      	beq.n	8002e7a <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e72:	2201      	movs	r2, #1
 8002e74:	431a      	orrs	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d00d      	beq.n	8002e9e <HAL_UART_IRQHandler+0xba>
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2201      	movs	r2, #1
 8002e86:	4013      	ands	r3, r2
 8002e88:	d009      	beq.n	8002e9e <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e96:	2204      	movs	r2, #4
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	2204      	movs	r2, #4
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d00d      	beq.n	8002ec2 <HAL_UART_IRQHandler+0xde>
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d009      	beq.n	8002ec2 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eba:	2202      	movs	r2, #2
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	2208      	movs	r2, #8
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d011      	beq.n	8002eee <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d103      	bne.n	8002eda <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ed8:	d009      	beq.n	8002eee <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2208      	movs	r2, #8
 8002ee0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d100      	bne.n	8002ef8 <HAL_UART_IRQHandler+0x114>
 8002ef6:	e092      	b.n	800301e <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	2220      	movs	r2, #32
 8002efc:	4013      	ands	r3, r2
 8002efe:	d00c      	beq.n	8002f1a <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	2220      	movs	r2, #32
 8002f04:	4013      	ands	r3, r2
 8002f06:	d008      	beq.n	8002f1a <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d004      	beq.n	8002f1a <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	0010      	movs	r0, r2
 8002f18:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f1e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2240      	movs	r2, #64	; 0x40
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b40      	cmp	r3, #64	; 0x40
 8002f2c:	d003      	beq.n	8002f36 <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2208      	movs	r2, #8
 8002f32:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f34:	d033      	beq.n	8002f9e <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f000 fd0b 	bl	8003954 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2240      	movs	r2, #64	; 0x40
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b40      	cmp	r3, #64	; 0x40
 8002f4a:	d123      	bne.n	8002f94 <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2140      	movs	r1, #64	; 0x40
 8002f58:	438a      	bics	r2, r1
 8002f5a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d012      	beq.n	8002f8a <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f68:	4a30      	ldr	r2, [pc, #192]	; (800302c <HAL_UART_IRQHandler+0x248>)
 8002f6a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f70:	0018      	movs	r0, r3
 8002f72:	f7fe f8fb 	bl	800116c <HAL_DMA_Abort_IT>
 8002f76:	1e03      	subs	r3, r0, #0
 8002f78:	d019      	beq.n	8002fae <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f84:	0018      	movs	r0, r3
 8002f86:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f88:	e011      	b.n	8002fae <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f000 f84f 	bl	8003030 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f92:	e00c      	b.n	8002fae <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	0018      	movs	r0, r3
 8002f98:	f000 f84a 	bl	8003030 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f9c:	e007      	b.n	8002fae <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f000 f845 	bl	8003030 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002fac:	e037      	b.n	800301e <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fae:	46c0      	nop			; (mov r8, r8)
    return;
 8002fb0:	e035      	b.n	800301e <HAL_UART_IRQHandler+0x23a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002fb2:	69fa      	ldr	r2, [r7, #28]
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	035b      	lsls	r3, r3, #13
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d00e      	beq.n	8002fda <HAL_UART_IRQHandler+0x1f6>
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	03db      	lsls	r3, r3, #15
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d009      	beq.n	8002fda <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2280      	movs	r2, #128	; 0x80
 8002fcc:	0352      	lsls	r2, r2, #13
 8002fce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f000 fe60 	bl	8003c98 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fd8:	e024      	b.n	8003024 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	2280      	movs	r2, #128	; 0x80
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d00d      	beq.n	8002ffe <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	2280      	movs	r2, #128	; 0x80
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d009      	beq.n	8002ffe <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d017      	beq.n	8003022 <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	0010      	movs	r0, r2
 8002ffa:	4798      	blx	r3
    }
    return;
 8002ffc:	e011      	b.n	8003022 <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	2240      	movs	r2, #64	; 0x40
 8003002:	4013      	ands	r3, r2
 8003004:	d00e      	beq.n	8003024 <HAL_UART_IRQHandler+0x240>
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	2240      	movs	r2, #64	; 0x40
 800300a:	4013      	ands	r3, r2
 800300c:	d00a      	beq.n	8003024 <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	0018      	movs	r0, r3
 8003012:	f000 fd6b 	bl	8003aec <UART_EndTransmit_IT>
    return;
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	e004      	b.n	8003024 <HAL_UART_IRQHandler+0x240>
      return;
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	e002      	b.n	8003024 <HAL_UART_IRQHandler+0x240>
    return;
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	e000      	b.n	8003024 <HAL_UART_IRQHandler+0x240>
    return;
 8003022:	46c0      	nop			; (mov r8, r8)
  }

}
 8003024:	46bd      	mov	sp, r7
 8003026:	b008      	add	sp, #32
 8003028:	bd80      	pop	{r7, pc}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	08003995 	.word	0x08003995

08003030 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003038:	46c0      	nop			; (mov r8, r8)
 800303a:	46bd      	mov	sp, r7
 800303c:	b002      	add	sp, #8
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t temp1, temp2;
  temp1 = huart->gState;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003052:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	4313      	orrs	r3, r2
}
 800305a:	0018      	movs	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	b004      	add	sp, #16
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003064:	b5b0      	push	{r4, r5, r7, lr}
 8003066:	b08e      	sub	sp, #56	; 0x38
 8003068:	af00      	add	r7, sp, #0
 800306a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800306c:	231b      	movs	r3, #27
 800306e:	2218      	movs	r2, #24
 8003070:	4694      	mov	ip, r2
 8003072:	44bc      	add	ip, r7
 8003074:	4463      	add	r3, ip
 8003076:	2210      	movs	r2, #16
 8003078:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800307a:	2300      	movs	r3, #0
 800307c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 800307e:	2313      	movs	r3, #19
 8003080:	2218      	movs	r2, #24
 8003082:	4694      	mov	ip, r2
 8003084:	44bc      	add	ip, r7
 8003086:	4463      	add	r3, ip
 8003088:	2200      	movs	r2, #0
 800308a:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800308c:	2300      	movs	r3, #0
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	431a      	orrs	r2, r3
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	431a      	orrs	r2, r3
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4aca      	ldr	r2, [pc, #808]	; (80033d8 <UART_SetConfig+0x374>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	0019      	movs	r1, r3
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030ba:	430a      	orrs	r2, r1
 80030bc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4ac5      	ldr	r2, [pc, #788]	; (80033dc <UART_SetConfig+0x378>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	0019      	movs	r1, r3
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4abf      	ldr	r2, [pc, #764]	; (80033e0 <UART_SetConfig+0x37c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d004      	beq.n	80030f0 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030ec:	4313      	orrs	r3, r2
 80030ee:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	4abb      	ldr	r2, [pc, #748]	; (80033e4 <UART_SetConfig+0x380>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	0019      	movs	r1, r3
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003102:	430a      	orrs	r2, r1
 8003104:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4ab7      	ldr	r2, [pc, #732]	; (80033e8 <UART_SetConfig+0x384>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d134      	bne.n	800317a <UART_SetConfig+0x116>
 8003110:	4bb6      	ldr	r3, [pc, #728]	; (80033ec <UART_SetConfig+0x388>)
 8003112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003114:	2203      	movs	r2, #3
 8003116:	4013      	ands	r3, r2
 8003118:	2b01      	cmp	r3, #1
 800311a:	d015      	beq.n	8003148 <UART_SetConfig+0xe4>
 800311c:	d304      	bcc.n	8003128 <UART_SetConfig+0xc4>
 800311e:	2b02      	cmp	r3, #2
 8003120:	d00a      	beq.n	8003138 <UART_SetConfig+0xd4>
 8003122:	2b03      	cmp	r3, #3
 8003124:	d018      	beq.n	8003158 <UART_SetConfig+0xf4>
 8003126:	e01f      	b.n	8003168 <UART_SetConfig+0x104>
 8003128:	231b      	movs	r3, #27
 800312a:	2218      	movs	r2, #24
 800312c:	4694      	mov	ip, r2
 800312e:	44bc      	add	ip, r7
 8003130:	4463      	add	r3, ip
 8003132:	2201      	movs	r2, #1
 8003134:	701a      	strb	r2, [r3, #0]
 8003136:	e0c5      	b.n	80032c4 <UART_SetConfig+0x260>
 8003138:	231b      	movs	r3, #27
 800313a:	2218      	movs	r2, #24
 800313c:	4694      	mov	ip, r2
 800313e:	44bc      	add	ip, r7
 8003140:	4463      	add	r3, ip
 8003142:	2202      	movs	r2, #2
 8003144:	701a      	strb	r2, [r3, #0]
 8003146:	e0bd      	b.n	80032c4 <UART_SetConfig+0x260>
 8003148:	231b      	movs	r3, #27
 800314a:	2218      	movs	r2, #24
 800314c:	4694      	mov	ip, r2
 800314e:	44bc      	add	ip, r7
 8003150:	4463      	add	r3, ip
 8003152:	2204      	movs	r2, #4
 8003154:	701a      	strb	r2, [r3, #0]
 8003156:	e0b5      	b.n	80032c4 <UART_SetConfig+0x260>
 8003158:	231b      	movs	r3, #27
 800315a:	2218      	movs	r2, #24
 800315c:	4694      	mov	ip, r2
 800315e:	44bc      	add	ip, r7
 8003160:	4463      	add	r3, ip
 8003162:	2208      	movs	r2, #8
 8003164:	701a      	strb	r2, [r3, #0]
 8003166:	e0ad      	b.n	80032c4 <UART_SetConfig+0x260>
 8003168:	231b      	movs	r3, #27
 800316a:	2218      	movs	r2, #24
 800316c:	4694      	mov	ip, r2
 800316e:	44bc      	add	ip, r7
 8003170:	4463      	add	r3, ip
 8003172:	2210      	movs	r2, #16
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	e0a4      	b.n	80032c4 <UART_SetConfig+0x260>
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a9c      	ldr	r2, [pc, #624]	; (80033f0 <UART_SetConfig+0x38c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d137      	bne.n	80031f4 <UART_SetConfig+0x190>
 8003184:	4b99      	ldr	r3, [pc, #612]	; (80033ec <UART_SetConfig+0x388>)
 8003186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003188:	220c      	movs	r2, #12
 800318a:	4013      	ands	r3, r2
 800318c:	2b04      	cmp	r3, #4
 800318e:	d018      	beq.n	80031c2 <UART_SetConfig+0x15e>
 8003190:	d802      	bhi.n	8003198 <UART_SetConfig+0x134>
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <UART_SetConfig+0x13e>
 8003196:	e024      	b.n	80031e2 <UART_SetConfig+0x17e>
 8003198:	2b08      	cmp	r3, #8
 800319a:	d00a      	beq.n	80031b2 <UART_SetConfig+0x14e>
 800319c:	2b0c      	cmp	r3, #12
 800319e:	d018      	beq.n	80031d2 <UART_SetConfig+0x16e>
 80031a0:	e01f      	b.n	80031e2 <UART_SetConfig+0x17e>
 80031a2:	231b      	movs	r3, #27
 80031a4:	2218      	movs	r2, #24
 80031a6:	4694      	mov	ip, r2
 80031a8:	44bc      	add	ip, r7
 80031aa:	4463      	add	r3, ip
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
 80031b0:	e088      	b.n	80032c4 <UART_SetConfig+0x260>
 80031b2:	231b      	movs	r3, #27
 80031b4:	2218      	movs	r2, #24
 80031b6:	4694      	mov	ip, r2
 80031b8:	44bc      	add	ip, r7
 80031ba:	4463      	add	r3, ip
 80031bc:	2202      	movs	r2, #2
 80031be:	701a      	strb	r2, [r3, #0]
 80031c0:	e080      	b.n	80032c4 <UART_SetConfig+0x260>
 80031c2:	231b      	movs	r3, #27
 80031c4:	2218      	movs	r2, #24
 80031c6:	4694      	mov	ip, r2
 80031c8:	44bc      	add	ip, r7
 80031ca:	4463      	add	r3, ip
 80031cc:	2204      	movs	r2, #4
 80031ce:	701a      	strb	r2, [r3, #0]
 80031d0:	e078      	b.n	80032c4 <UART_SetConfig+0x260>
 80031d2:	231b      	movs	r3, #27
 80031d4:	2218      	movs	r2, #24
 80031d6:	4694      	mov	ip, r2
 80031d8:	44bc      	add	ip, r7
 80031da:	4463      	add	r3, ip
 80031dc:	2208      	movs	r2, #8
 80031de:	701a      	strb	r2, [r3, #0]
 80031e0:	e070      	b.n	80032c4 <UART_SetConfig+0x260>
 80031e2:	231b      	movs	r3, #27
 80031e4:	2218      	movs	r2, #24
 80031e6:	4694      	mov	ip, r2
 80031e8:	44bc      	add	ip, r7
 80031ea:	4463      	add	r3, ip
 80031ec:	2210      	movs	r2, #16
 80031ee:	701a      	strb	r2, [r3, #0]
 80031f0:	46c0      	nop			; (mov r8, r8)
 80031f2:	e067      	b.n	80032c4 <UART_SetConfig+0x260>
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a7e      	ldr	r2, [pc, #504]	; (80033f4 <UART_SetConfig+0x390>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d107      	bne.n	800320e <UART_SetConfig+0x1aa>
 80031fe:	231b      	movs	r3, #27
 8003200:	2218      	movs	r2, #24
 8003202:	4694      	mov	ip, r2
 8003204:	44bc      	add	ip, r7
 8003206:	4463      	add	r3, ip
 8003208:	2200      	movs	r2, #0
 800320a:	701a      	strb	r2, [r3, #0]
 800320c:	e05a      	b.n	80032c4 <UART_SetConfig+0x260>
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a79      	ldr	r2, [pc, #484]	; (80033f8 <UART_SetConfig+0x394>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d107      	bne.n	8003228 <UART_SetConfig+0x1c4>
 8003218:	231b      	movs	r3, #27
 800321a:	2218      	movs	r2, #24
 800321c:	4694      	mov	ip, r2
 800321e:	44bc      	add	ip, r7
 8003220:	4463      	add	r3, ip
 8003222:	2200      	movs	r2, #0
 8003224:	701a      	strb	r2, [r3, #0]
 8003226:	e04d      	b.n	80032c4 <UART_SetConfig+0x260>
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a6c      	ldr	r2, [pc, #432]	; (80033e0 <UART_SetConfig+0x37c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d141      	bne.n	80032b6 <UART_SetConfig+0x252>
 8003232:	4b6e      	ldr	r3, [pc, #440]	; (80033ec <UART_SetConfig+0x388>)
 8003234:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003236:	23c0      	movs	r3, #192	; 0xc0
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	4013      	ands	r3, r2
 800323c:	2280      	movs	r2, #128	; 0x80
 800323e:	00d2      	lsls	r2, r2, #3
 8003240:	4293      	cmp	r3, r2
 8003242:	d01f      	beq.n	8003284 <UART_SetConfig+0x220>
 8003244:	2280      	movs	r2, #128	; 0x80
 8003246:	00d2      	lsls	r2, r2, #3
 8003248:	4293      	cmp	r3, r2
 800324a:	d802      	bhi.n	8003252 <UART_SetConfig+0x1ee>
 800324c:	2b00      	cmp	r3, #0
 800324e:	d009      	beq.n	8003264 <UART_SetConfig+0x200>
 8003250:	e028      	b.n	80032a4 <UART_SetConfig+0x240>
 8003252:	2280      	movs	r2, #128	; 0x80
 8003254:	0112      	lsls	r2, r2, #4
 8003256:	4293      	cmp	r3, r2
 8003258:	d00c      	beq.n	8003274 <UART_SetConfig+0x210>
 800325a:	22c0      	movs	r2, #192	; 0xc0
 800325c:	0112      	lsls	r2, r2, #4
 800325e:	4293      	cmp	r3, r2
 8003260:	d018      	beq.n	8003294 <UART_SetConfig+0x230>
 8003262:	e01f      	b.n	80032a4 <UART_SetConfig+0x240>
 8003264:	231b      	movs	r3, #27
 8003266:	2218      	movs	r2, #24
 8003268:	4694      	mov	ip, r2
 800326a:	44bc      	add	ip, r7
 800326c:	4463      	add	r3, ip
 800326e:	2200      	movs	r2, #0
 8003270:	701a      	strb	r2, [r3, #0]
 8003272:	e027      	b.n	80032c4 <UART_SetConfig+0x260>
 8003274:	231b      	movs	r3, #27
 8003276:	2218      	movs	r2, #24
 8003278:	4694      	mov	ip, r2
 800327a:	44bc      	add	ip, r7
 800327c:	4463      	add	r3, ip
 800327e:	2202      	movs	r2, #2
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	e01f      	b.n	80032c4 <UART_SetConfig+0x260>
 8003284:	231b      	movs	r3, #27
 8003286:	2218      	movs	r2, #24
 8003288:	4694      	mov	ip, r2
 800328a:	44bc      	add	ip, r7
 800328c:	4463      	add	r3, ip
 800328e:	2204      	movs	r2, #4
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	e017      	b.n	80032c4 <UART_SetConfig+0x260>
 8003294:	231b      	movs	r3, #27
 8003296:	2218      	movs	r2, #24
 8003298:	4694      	mov	ip, r2
 800329a:	44bc      	add	ip, r7
 800329c:	4463      	add	r3, ip
 800329e:	2208      	movs	r2, #8
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	e00f      	b.n	80032c4 <UART_SetConfig+0x260>
 80032a4:	231b      	movs	r3, #27
 80032a6:	2218      	movs	r2, #24
 80032a8:	4694      	mov	ip, r2
 80032aa:	44bc      	add	ip, r7
 80032ac:	4463      	add	r3, ip
 80032ae:	2210      	movs	r2, #16
 80032b0:	701a      	strb	r2, [r3, #0]
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	e006      	b.n	80032c4 <UART_SetConfig+0x260>
 80032b6:	231b      	movs	r3, #27
 80032b8:	2218      	movs	r2, #24
 80032ba:	4694      	mov	ip, r2
 80032bc:	44bc      	add	ip, r7
 80032be:	4463      	add	r3, ip
 80032c0:	2210      	movs	r2, #16
 80032c2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a45      	ldr	r2, [pc, #276]	; (80033e0 <UART_SetConfig+0x37c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d000      	beq.n	80032d0 <UART_SetConfig+0x26c>
 80032ce:	e09d      	b.n	800340c <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032d0:	231b      	movs	r3, #27
 80032d2:	2218      	movs	r2, #24
 80032d4:	4694      	mov	ip, r2
 80032d6:	44bc      	add	ip, r7
 80032d8:	4463      	add	r3, ip
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d00d      	beq.n	80032fc <UART_SetConfig+0x298>
 80032e0:	dc02      	bgt.n	80032e8 <UART_SetConfig+0x284>
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <UART_SetConfig+0x28e>
 80032e6:	e01d      	b.n	8003324 <UART_SetConfig+0x2c0>
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d012      	beq.n	8003312 <UART_SetConfig+0x2ae>
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d015      	beq.n	800331c <UART_SetConfig+0x2b8>
 80032f0:	e018      	b.n	8003324 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80032f2:	f7fe fe61 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 80032f6:	0003      	movs	r3, r0
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032fa:	e01b      	b.n	8003334 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032fc:	4b3b      	ldr	r3, [pc, #236]	; (80033ec <UART_SetConfig+0x388>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2210      	movs	r2, #16
 8003302:	4013      	ands	r3, r2
 8003304:	d002      	beq.n	800330c <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8003306:	4b3d      	ldr	r3, [pc, #244]	; (80033fc <UART_SetConfig+0x398>)
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 800330a:	e013      	b.n	8003334 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800330c:	4b3c      	ldr	r3, [pc, #240]	; (8003400 <UART_SetConfig+0x39c>)
 800330e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003310:	e010      	b.n	8003334 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003312:	f7fe fdc5 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8003316:	0003      	movs	r3, r0
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800331a:	e00b      	b.n	8003334 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800331c:	2380      	movs	r3, #128	; 0x80
 800331e:	021b      	lsls	r3, r3, #8
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003322:	e007      	b.n	8003334 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003324:	2313      	movs	r3, #19
 8003326:	2218      	movs	r2, #24
 8003328:	4694      	mov	ip, r2
 800332a:	44bc      	add	ip, r7
 800332c:	4463      	add	r3, ip
 800332e:	2201      	movs	r2, #1
 8003330:	701a      	strb	r2, [r3, #0]
        break;
 8003332:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	2b00      	cmp	r3, #0
 8003338:	d100      	bne.n	800333c <UART_SetConfig+0x2d8>
 800333a:	e1a6      	b.n	800368a <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	0013      	movs	r3, r2
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	189b      	adds	r3, r3, r2
 8003346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003348:	429a      	cmp	r2, r3
 800334a:	d305      	bcc.n	8003358 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003354:	429a      	cmp	r2, r3
 8003356:	d907      	bls.n	8003368 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8003358:	2313      	movs	r3, #19
 800335a:	2218      	movs	r2, #24
 800335c:	4694      	mov	ip, r2
 800335e:	44bc      	add	ip, r7
 8003360:	4463      	add	r3, ip
 8003362:	2201      	movs	r2, #1
 8003364:	701a      	strb	r2, [r3, #0]
 8003366:	e190      	b.n	800368a <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8003368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	6939      	ldr	r1, [r7, #16]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	000b      	movs	r3, r1
 8003376:	0e1b      	lsrs	r3, r3, #24
 8003378:	0010      	movs	r0, r2
 800337a:	0205      	lsls	r5, r0, #8
 800337c:	431d      	orrs	r5, r3
 800337e:	000b      	movs	r3, r1
 8003380:	021c      	lsls	r4, r3, #8
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	085b      	lsrs	r3, r3, #1
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	68b8      	ldr	r0, [r7, #8]
 8003390:	68f9      	ldr	r1, [r7, #12]
 8003392:	1900      	adds	r0, r0, r4
 8003394:	4169      	adcs	r1, r5
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	2300      	movs	r3, #0
 800339e:	607b      	str	r3, [r7, #4]
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f7fc ff3c 	bl	8000220 <__aeabi_uldivmod>
 80033a8:	0003      	movs	r3, r0
 80033aa:	000c      	movs	r4, r1
 80033ac:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b0:	4a14      	ldr	r2, [pc, #80]	; (8003404 <UART_SetConfig+0x3a0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d908      	bls.n	80033c8 <UART_SetConfig+0x364>
 80033b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b8:	4a13      	ldr	r2, [pc, #76]	; (8003408 <UART_SetConfig+0x3a4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d804      	bhi.n	80033c8 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033c4:	60da      	str	r2, [r3, #12]
 80033c6:	e160      	b.n	800368a <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 80033c8:	2313      	movs	r3, #19
 80033ca:	2218      	movs	r2, #24
 80033cc:	4694      	mov	ip, r2
 80033ce:	44bc      	add	ip, r7
 80033d0:	4463      	add	r3, ip
 80033d2:	2201      	movs	r2, #1
 80033d4:	701a      	strb	r2, [r3, #0]
 80033d6:	e158      	b.n	800368a <UART_SetConfig+0x626>
 80033d8:	efff69f3 	.word	0xefff69f3
 80033dc:	ffffcfff 	.word	0xffffcfff
 80033e0:	40004800 	.word	0x40004800
 80033e4:	fffff4ff 	.word	0xfffff4ff
 80033e8:	40013800 	.word	0x40013800
 80033ec:	40021000 	.word	0x40021000
 80033f0:	40004400 	.word	0x40004400
 80033f4:	40004c00 	.word	0x40004c00
 80033f8:	40005000 	.word	0x40005000
 80033fc:	003d0900 	.word	0x003d0900
 8003400:	00f42400 	.word	0x00f42400
 8003404:	000002ff 	.word	0x000002ff
 8003408:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	69da      	ldr	r2, [r3, #28]
 8003410:	2380      	movs	r3, #128	; 0x80
 8003412:	021b      	lsls	r3, r3, #8
 8003414:	429a      	cmp	r2, r3
 8003416:	d000      	beq.n	800341a <UART_SetConfig+0x3b6>
 8003418:	e0a9      	b.n	800356e <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 800341a:	231b      	movs	r3, #27
 800341c:	2218      	movs	r2, #24
 800341e:	4694      	mov	ip, r2
 8003420:	44bc      	add	ip, r7
 8003422:	4463      	add	r3, ip
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b08      	cmp	r3, #8
 8003428:	d86d      	bhi.n	8003506 <UART_SetConfig+0x4a2>
 800342a:	009a      	lsls	r2, r3, #2
 800342c:	4b9f      	ldr	r3, [pc, #636]	; (80036ac <UART_SetConfig+0x648>)
 800342e:	18d3      	adds	r3, r2, r3
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003434:	f7fe fdc0 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 8003438:	0003      	movs	r3, r0
 800343a:	005a      	lsls	r2, r3, #1
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	085b      	lsrs	r3, r3, #1
 8003442:	18d2      	adds	r2, r2, r3
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	0019      	movs	r1, r3
 800344a:	0010      	movs	r0, r2
 800344c:	f7fc fe5c 	bl	8000108 <__udivsi3>
 8003450:	0003      	movs	r3, r0
 8003452:	b29b      	uxth	r3, r3
 8003454:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003456:	e05e      	b.n	8003516 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003458:	f7fe fdc4 	bl	8001fe4 <HAL_RCC_GetPCLK2Freq>
 800345c:	0003      	movs	r3, r0
 800345e:	005a      	lsls	r2, r3, #1
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	085b      	lsrs	r3, r3, #1
 8003466:	18d2      	adds	r2, r2, r3
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	0019      	movs	r1, r3
 800346e:	0010      	movs	r0, r2
 8003470:	f7fc fe4a 	bl	8000108 <__udivsi3>
 8003474:	0003      	movs	r3, r0
 8003476:	b29b      	uxth	r3, r3
 8003478:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800347a:	e04c      	b.n	8003516 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800347c:	4b8c      	ldr	r3, [pc, #560]	; (80036b0 <UART_SetConfig+0x64c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2210      	movs	r2, #16
 8003482:	4013      	ands	r3, r2
 8003484:	d00e      	beq.n	80034a4 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	085b      	lsrs	r3, r3, #1
 800348c:	4a89      	ldr	r2, [pc, #548]	; (80036b4 <UART_SetConfig+0x650>)
 800348e:	189a      	adds	r2, r3, r2
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	0019      	movs	r1, r3
 8003496:	0010      	movs	r0, r2
 8003498:	f7fc fe36 	bl	8000108 <__udivsi3>
 800349c:	0003      	movs	r3, r0
 800349e:	b29b      	uxth	r3, r3
 80034a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80034a2:	e038      	b.n	8003516 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	085b      	lsrs	r3, r3, #1
 80034aa:	4a83      	ldr	r2, [pc, #524]	; (80036b8 <UART_SetConfig+0x654>)
 80034ac:	189a      	adds	r2, r3, r2
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	0019      	movs	r1, r3
 80034b4:	0010      	movs	r0, r2
 80034b6:	f7fc fe27 	bl	8000108 <__udivsi3>
 80034ba:	0003      	movs	r3, r0
 80034bc:	b29b      	uxth	r3, r3
 80034be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034c0:	e029      	b.n	8003516 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80034c2:	f7fe fced 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 80034c6:	0003      	movs	r3, r0
 80034c8:	005a      	lsls	r2, r3, #1
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	085b      	lsrs	r3, r3, #1
 80034d0:	18d2      	adds	r2, r2, r3
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	0019      	movs	r1, r3
 80034d8:	0010      	movs	r0, r2
 80034da:	f7fc fe15 	bl	8000108 <__udivsi3>
 80034de:	0003      	movs	r3, r0
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034e4:	e017      	b.n	8003516 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	085b      	lsrs	r3, r3, #1
 80034ec:	2280      	movs	r2, #128	; 0x80
 80034ee:	0252      	lsls	r2, r2, #9
 80034f0:	189a      	adds	r2, r3, r2
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	0019      	movs	r1, r3
 80034f8:	0010      	movs	r0, r2
 80034fa:	f7fc fe05 	bl	8000108 <__udivsi3>
 80034fe:	0003      	movs	r3, r0
 8003500:	b29b      	uxth	r3, r3
 8003502:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003504:	e007      	b.n	8003516 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003506:	2313      	movs	r3, #19
 8003508:	2218      	movs	r2, #24
 800350a:	4694      	mov	ip, r2
 800350c:	44bc      	add	ip, r7
 800350e:	4463      	add	r3, ip
 8003510:	2201      	movs	r2, #1
 8003512:	701a      	strb	r2, [r3, #0]
        break;
 8003514:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003518:	2b0f      	cmp	r3, #15
 800351a:	d920      	bls.n	800355e <UART_SetConfig+0x4fa>
 800351c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351e:	4a67      	ldr	r2, [pc, #412]	; (80036bc <UART_SetConfig+0x658>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d81c      	bhi.n	800355e <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003526:	b29a      	uxth	r2, r3
 8003528:	200a      	movs	r0, #10
 800352a:	2418      	movs	r4, #24
 800352c:	193b      	adds	r3, r7, r4
 800352e:	181b      	adds	r3, r3, r0
 8003530:	210f      	movs	r1, #15
 8003532:	438a      	bics	r2, r1
 8003534:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003538:	085b      	lsrs	r3, r3, #1
 800353a:	b29b      	uxth	r3, r3
 800353c:	2207      	movs	r2, #7
 800353e:	4013      	ands	r3, r2
 8003540:	b299      	uxth	r1, r3
 8003542:	193b      	adds	r3, r7, r4
 8003544:	181b      	adds	r3, r3, r0
 8003546:	193a      	adds	r2, r7, r4
 8003548:	1812      	adds	r2, r2, r0
 800354a:	8812      	ldrh	r2, [r2, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	193a      	adds	r2, r7, r4
 8003556:	1812      	adds	r2, r2, r0
 8003558:	8812      	ldrh	r2, [r2, #0]
 800355a:	60da      	str	r2, [r3, #12]
 800355c:	e095      	b.n	800368a <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 800355e:	2313      	movs	r3, #19
 8003560:	2218      	movs	r2, #24
 8003562:	4694      	mov	ip, r2
 8003564:	44bc      	add	ip, r7
 8003566:	4463      	add	r3, ip
 8003568:	2201      	movs	r2, #1
 800356a:	701a      	strb	r2, [r3, #0]
 800356c:	e08d      	b.n	800368a <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 800356e:	231b      	movs	r3, #27
 8003570:	2218      	movs	r2, #24
 8003572:	4694      	mov	ip, r2
 8003574:	44bc      	add	ip, r7
 8003576:	4463      	add	r3, ip
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b08      	cmp	r3, #8
 800357c:	d86a      	bhi.n	8003654 <UART_SetConfig+0x5f0>
 800357e:	009a      	lsls	r2, r3, #2
 8003580:	4b4f      	ldr	r3, [pc, #316]	; (80036c0 <UART_SetConfig+0x65c>)
 8003582:	18d3      	adds	r3, r2, r3
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003588:	f7fe fd16 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 800358c:	0002      	movs	r2, r0
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	085b      	lsrs	r3, r3, #1
 8003594:	18d2      	adds	r2, r2, r3
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	0019      	movs	r1, r3
 800359c:	0010      	movs	r0, r2
 800359e:	f7fc fdb3 	bl	8000108 <__udivsi3>
 80035a2:	0003      	movs	r3, r0
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035a8:	e05c      	b.n	8003664 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80035aa:	f7fe fd1b 	bl	8001fe4 <HAL_RCC_GetPCLK2Freq>
 80035ae:	0002      	movs	r2, r0
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	085b      	lsrs	r3, r3, #1
 80035b6:	18d2      	adds	r2, r2, r3
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	0019      	movs	r1, r3
 80035be:	0010      	movs	r0, r2
 80035c0:	f7fc fda2 	bl	8000108 <__udivsi3>
 80035c4:	0003      	movs	r3, r0
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035ca:	e04b      	b.n	8003664 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035cc:	4b38      	ldr	r3, [pc, #224]	; (80036b0 <UART_SetConfig+0x64c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2210      	movs	r2, #16
 80035d2:	4013      	ands	r3, r2
 80035d4:	d00e      	beq.n	80035f4 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	085b      	lsrs	r3, r3, #1
 80035dc:	4a39      	ldr	r2, [pc, #228]	; (80036c4 <UART_SetConfig+0x660>)
 80035de:	189a      	adds	r2, r3, r2
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	0019      	movs	r1, r3
 80035e6:	0010      	movs	r0, r2
 80035e8:	f7fc fd8e 	bl	8000108 <__udivsi3>
 80035ec:	0003      	movs	r3, r0
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80035f2:	e037      	b.n	8003664 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	085b      	lsrs	r3, r3, #1
 80035fa:	4a33      	ldr	r2, [pc, #204]	; (80036c8 <UART_SetConfig+0x664>)
 80035fc:	189a      	adds	r2, r3, r2
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	0019      	movs	r1, r3
 8003604:	0010      	movs	r0, r2
 8003606:	f7fc fd7f 	bl	8000108 <__udivsi3>
 800360a:	0003      	movs	r3, r0
 800360c:	b29b      	uxth	r3, r3
 800360e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003610:	e028      	b.n	8003664 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003612:	f7fe fc45 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8003616:	0002      	movs	r2, r0
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	085b      	lsrs	r3, r3, #1
 800361e:	18d2      	adds	r2, r2, r3
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	0019      	movs	r1, r3
 8003626:	0010      	movs	r0, r2
 8003628:	f7fc fd6e 	bl	8000108 <__udivsi3>
 800362c:	0003      	movs	r3, r0
 800362e:	b29b      	uxth	r3, r3
 8003630:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003632:	e017      	b.n	8003664 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	085b      	lsrs	r3, r3, #1
 800363a:	2280      	movs	r2, #128	; 0x80
 800363c:	0212      	lsls	r2, r2, #8
 800363e:	189a      	adds	r2, r3, r2
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	0019      	movs	r1, r3
 8003646:	0010      	movs	r0, r2
 8003648:	f7fc fd5e 	bl	8000108 <__udivsi3>
 800364c:	0003      	movs	r3, r0
 800364e:	b29b      	uxth	r3, r3
 8003650:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003652:	e007      	b.n	8003664 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003654:	2313      	movs	r3, #19
 8003656:	2218      	movs	r2, #24
 8003658:	4694      	mov	ip, r2
 800365a:	44bc      	add	ip, r7
 800365c:	4463      	add	r3, ip
 800365e:	2201      	movs	r2, #1
 8003660:	701a      	strb	r2, [r3, #0]
        break;
 8003662:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003666:	2b0f      	cmp	r3, #15
 8003668:	d908      	bls.n	800367c <UART_SetConfig+0x618>
 800366a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366c:	4a13      	ldr	r2, [pc, #76]	; (80036bc <UART_SetConfig+0x658>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d804      	bhi.n	800367c <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003678:	60da      	str	r2, [r3, #12]
 800367a:	e006      	b.n	800368a <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 800367c:	2313      	movs	r3, #19
 800367e:	2218      	movs	r2, #24
 8003680:	4694      	mov	ip, r2
 8003682:	44bc      	add	ip, r7
 8003684:	4463      	add	r3, ip
 8003686:	2201      	movs	r2, #1
 8003688:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	2200      	movs	r2, #0
 800368e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	2200      	movs	r2, #0
 8003694:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003696:	2313      	movs	r3, #19
 8003698:	2218      	movs	r2, #24
 800369a:	4694      	mov	ip, r2
 800369c:	44bc      	add	ip, r7
 800369e:	4463      	add	r3, ip
 80036a0:	781b      	ldrb	r3, [r3, #0]
}
 80036a2:	0018      	movs	r0, r3
 80036a4:	46bd      	mov	sp, r7
 80036a6:	b00e      	add	sp, #56	; 0x38
 80036a8:	bdb0      	pop	{r4, r5, r7, pc}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	08003d48 	.word	0x08003d48
 80036b0:	40021000 	.word	0x40021000
 80036b4:	007a1200 	.word	0x007a1200
 80036b8:	01e84800 	.word	0x01e84800
 80036bc:	0000ffff 	.word	0x0000ffff
 80036c0:	08003d6c 	.word	0x08003d6c
 80036c4:	003d0900 	.word	0x003d0900
 80036c8:	00f42400 	.word	0x00f42400

080036cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	2201      	movs	r2, #1
 80036da:	4013      	ands	r3, r2
 80036dc:	d00b      	beq.n	80036f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	4a4a      	ldr	r2, [pc, #296]	; (8003810 <UART_AdvFeatureConfig+0x144>)
 80036e6:	4013      	ands	r3, r2
 80036e8:	0019      	movs	r1, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	2202      	movs	r2, #2
 80036fc:	4013      	ands	r3, r2
 80036fe:	d00b      	beq.n	8003718 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	4a43      	ldr	r2, [pc, #268]	; (8003814 <UART_AdvFeatureConfig+0x148>)
 8003708:	4013      	ands	r3, r2
 800370a:	0019      	movs	r1, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	2204      	movs	r2, #4
 800371e:	4013      	ands	r3, r2
 8003720:	d00b      	beq.n	800373a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	4a3b      	ldr	r2, [pc, #236]	; (8003818 <UART_AdvFeatureConfig+0x14c>)
 800372a:	4013      	ands	r3, r2
 800372c:	0019      	movs	r1, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	2208      	movs	r2, #8
 8003740:	4013      	ands	r3, r2
 8003742:	d00b      	beq.n	800375c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	4a34      	ldr	r2, [pc, #208]	; (800381c <UART_AdvFeatureConfig+0x150>)
 800374c:	4013      	ands	r3, r2
 800374e:	0019      	movs	r1, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	2210      	movs	r2, #16
 8003762:	4013      	ands	r3, r2
 8003764:	d00b      	beq.n	800377e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	4a2c      	ldr	r2, [pc, #176]	; (8003820 <UART_AdvFeatureConfig+0x154>)
 800376e:	4013      	ands	r3, r2
 8003770:	0019      	movs	r1, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	2220      	movs	r2, #32
 8003784:	4013      	ands	r3, r2
 8003786:	d00b      	beq.n	80037a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	4a25      	ldr	r2, [pc, #148]	; (8003824 <UART_AdvFeatureConfig+0x158>)
 8003790:	4013      	ands	r3, r2
 8003792:	0019      	movs	r1, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	2240      	movs	r2, #64	; 0x40
 80037a6:	4013      	ands	r3, r2
 80037a8:	d01d      	beq.n	80037e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4a1d      	ldr	r2, [pc, #116]	; (8003828 <UART_AdvFeatureConfig+0x15c>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	0019      	movs	r1, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037c6:	2380      	movs	r3, #128	; 0x80
 80037c8:	035b      	lsls	r3, r3, #13
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d10b      	bne.n	80037e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	4a15      	ldr	r2, [pc, #84]	; (800382c <UART_AdvFeatureConfig+0x160>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	0019      	movs	r1, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	2280      	movs	r2, #128	; 0x80
 80037ec:	4013      	ands	r3, r2
 80037ee:	d00b      	beq.n	8003808 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	4a0e      	ldr	r2, [pc, #56]	; (8003830 <UART_AdvFeatureConfig+0x164>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	0019      	movs	r1, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	605a      	str	r2, [r3, #4]
  }
}
 8003808:	46c0      	nop			; (mov r8, r8)
 800380a:	46bd      	mov	sp, r7
 800380c:	b002      	add	sp, #8
 800380e:	bd80      	pop	{r7, pc}
 8003810:	fffdffff 	.word	0xfffdffff
 8003814:	fffeffff 	.word	0xfffeffff
 8003818:	fffbffff 	.word	0xfffbffff
 800381c:	ffff7fff 	.word	0xffff7fff
 8003820:	ffffefff 	.word	0xffffefff
 8003824:	ffffdfff 	.word	0xffffdfff
 8003828:	ffefffff 	.word	0xffefffff
 800382c:	ff9fffff 	.word	0xff9fffff
 8003830:	fff7ffff 	.word	0xfff7ffff

08003834 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af02      	add	r7, sp, #8
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003842:	f7fd fbaf 	bl	8000fa4 <HAL_GetTick>
 8003846:	0003      	movs	r3, r0
 8003848:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2208      	movs	r2, #8
 8003852:	4013      	ands	r3, r2
 8003854:	2b08      	cmp	r3, #8
 8003856:	d10d      	bne.n	8003874 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	2380      	movs	r3, #128	; 0x80
 800385c:	0399      	lsls	r1, r3, #14
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	4b16      	ldr	r3, [pc, #88]	; (80038bc <UART_CheckIdleState+0x88>)
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	0013      	movs	r3, r2
 8003866:	2200      	movs	r2, #0
 8003868:	f000 f82a 	bl	80038c0 <UART_WaitOnFlagUntilTimeout>
 800386c:	1e03      	subs	r3, r0, #0
 800386e:	d001      	beq.n	8003874 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e01f      	b.n	80038b4 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2204      	movs	r2, #4
 800387c:	4013      	ands	r3, r2
 800387e:	2b04      	cmp	r3, #4
 8003880:	d10d      	bne.n	800389e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	03d9      	lsls	r1, r3, #15
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <UART_CheckIdleState+0x88>)
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	0013      	movs	r3, r2
 8003890:	2200      	movs	r2, #0
 8003892:	f000 f815 	bl	80038c0 <UART_WaitOnFlagUntilTimeout>
 8003896:	1e03      	subs	r3, r0, #0
 8003898:	d001      	beq.n	800389e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e00a      	b.n	80038b4 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2220      	movs	r2, #32
 80038a2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2270      	movs	r2, #112	; 0x70
 80038ae:	2100      	movs	r1, #0
 80038b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	0018      	movs	r0, r3
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b004      	add	sp, #16
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	01ffffff 	.word	0x01ffffff

080038c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	603b      	str	r3, [r7, #0]
 80038cc:	1dfb      	adds	r3, r7, #7
 80038ce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d0:	e029      	b.n	8003926 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	3301      	adds	r3, #1
 80038d6:	d026      	beq.n	8003926 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d8:	f7fd fb64 	bl	8000fa4 <HAL_GetTick>
 80038dc:	0002      	movs	r2, r0
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d302      	bcc.n	80038ee <UART_WaitOnFlagUntilTimeout+0x2e>
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d11b      	bne.n	8003926 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4915      	ldr	r1, [pc, #84]	; (8003950 <UART_WaitOnFlagUntilTimeout+0x90>)
 80038fa:	400a      	ands	r2, r1
 80038fc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2101      	movs	r1, #1
 800390a:	438a      	bics	r2, r1
 800390c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2220      	movs	r2, #32
 8003912:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2220      	movs	r2, #32
 8003918:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2270      	movs	r2, #112	; 0x70
 800391e:	2100      	movs	r1, #0
 8003920:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e00f      	b.n	8003946 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	4013      	ands	r3, r2
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	425a      	negs	r2, r3
 8003936:	4153      	adcs	r3, r2
 8003938:	b2db      	uxtb	r3, r3
 800393a:	001a      	movs	r2, r3
 800393c:	1dfb      	adds	r3, r7, #7
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d0c6      	beq.n	80038d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	0018      	movs	r0, r3
 8003948:	46bd      	mov	sp, r7
 800394a:	b004      	add	sp, #16
 800394c:	bd80      	pop	{r7, pc}
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	fffffe5f 	.word	0xfffffe5f

08003954 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	490a      	ldr	r1, [pc, #40]	; (8003990 <UART_EndRxTransfer+0x3c>)
 8003968:	400a      	ands	r2, r1
 800396a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2101      	movs	r1, #1
 8003978:	438a      	bics	r2, r1
 800397a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2220      	movs	r2, #32
 8003980:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003988:	46c0      	nop			; (mov r8, r8)
 800398a:	46bd      	mov	sp, r7
 800398c:	b002      	add	sp, #8
 800398e:	bd80      	pop	{r7, pc}
 8003990:	fffffedf 	.word	0xfffffedf

08003994 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	225a      	movs	r2, #90	; 0x5a
 80039a6:	2100      	movs	r1, #0
 80039a8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2252      	movs	r2, #82	; 0x52
 80039ae:	2100      	movs	r1, #0
 80039b0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	0018      	movs	r0, r3
 80039b6:	f7ff fb3b 	bl	8003030 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	b004      	add	sp, #16
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ce:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	225a      	movs	r2, #90	; 0x5a
 80039d4:	2100      	movs	r1, #0
 80039d6:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	220f      	movs	r2, #15
 80039de:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2108      	movs	r1, #8
 80039ec:	430a      	orrs	r2, r1
 80039ee:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	0018      	movs	r0, r3
 80039fa:	f7fc feb1 	bl	8000760 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	46bd      	mov	sp, r7
 8003a02:	b004      	add	sp, #16
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a12:	2b21      	cmp	r3, #33	; 0x21
 8003a14:	d12a      	bne.n	8003a6c <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2252      	movs	r2, #82	; 0x52
 8003a1a:	5a9b      	ldrh	r3, [r3, r2]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d110      	bne.n	8003a44 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2180      	movs	r1, #128	; 0x80
 8003a2e:	438a      	bics	r2, r1
 8003a30:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2140      	movs	r1, #64	; 0x40
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003a42:	e013      	b.n	8003a6c <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a48:	781a      	ldrb	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2252      	movs	r2, #82	; 0x52
 8003a5e:	5a9b      	ldrh	r3, [r3, r2]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b299      	uxth	r1, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2252      	movs	r2, #82	; 0x52
 8003a6a:	5299      	strh	r1, [r3, r2]
}
 8003a6c:	46c0      	nop			; (mov r8, r8)
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	b002      	add	sp, #8
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a80:	2b21      	cmp	r3, #33	; 0x21
 8003a82:	d12f      	bne.n	8003ae4 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2252      	movs	r2, #82	; 0x52
 8003a88:	5a9b      	ldrh	r3, [r3, r2]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d110      	bne.n	8003ab2 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2180      	movs	r1, #128	; 0x80
 8003a9c:	438a      	bics	r2, r1
 8003a9e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2140      	movs	r1, #64	; 0x40
 8003aac:	430a      	orrs	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003ab0:	e018      	b.n	8003ae4 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab6:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	001a      	movs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	05d2      	lsls	r2, r2, #23
 8003ac4:	0dd2      	lsrs	r2, r2, #23
 8003ac6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003acc:	1c9a      	adds	r2, r3, #2
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2252      	movs	r2, #82	; 0x52
 8003ad6:	5a9b      	ldrh	r3, [r3, r2]
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b299      	uxth	r1, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2252      	movs	r2, #82	; 0x52
 8003ae2:	5299      	strh	r1, [r3, r2]
}
 8003ae4:	46c0      	nop			; (mov r8, r8)
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	b004      	add	sp, #16
 8003aea:	bd80      	pop	{r7, pc}

08003aec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2140      	movs	r1, #64	; 0x40
 8003b00:	438a      	bics	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	0018      	movs	r0, r3
 8003b14:	f7fc fe00 	bl	8000718 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b18:	46c0      	nop			; (mov r8, r8)
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b002      	add	sp, #8
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003b28:	230e      	movs	r3, #14
 8003b2a:	18fb      	adds	r3, r7, r3
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	215c      	movs	r1, #92	; 0x5c
 8003b30:	5a52      	ldrh	r2, [r2, r1]
 8003b32:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b38:	2b22      	cmp	r3, #34	; 0x22
 8003b3a:	d140      	bne.n	8003bbe <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b42:	210c      	movs	r1, #12
 8003b44:	187b      	adds	r3, r7, r1
 8003b46:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003b48:	187b      	adds	r3, r7, r1
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	230e      	movs	r3, #14
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	b2d9      	uxtb	r1, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5a:	400a      	ands	r2, r1
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	225a      	movs	r2, #90	; 0x5a
 8003b6e:	5a9b      	ldrh	r3, [r3, r2]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b299      	uxth	r1, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	225a      	movs	r2, #90	; 0x5a
 8003b7a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	225a      	movs	r2, #90	; 0x5a
 8003b80:	5a9b      	ldrh	r3, [r3, r2]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d122      	bne.n	8003bce <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4911      	ldr	r1, [pc, #68]	; (8003bd8 <UART_RxISR_8BIT+0xb8>)
 8003b94:	400a      	ands	r2, r1
 8003b96:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	438a      	bics	r2, r1
 8003ba6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2220      	movs	r2, #32
 8003bac:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f7fc fd78 	bl	80006ac <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003bbc:	e007      	b.n	8003bce <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699a      	ldr	r2, [r3, #24]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2108      	movs	r1, #8
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	619a      	str	r2, [r3, #24]
}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	b004      	add	sp, #16
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	fffffedf 	.word	0xfffffedf

08003bdc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003be4:	230e      	movs	r3, #14
 8003be6:	18fb      	adds	r3, r7, r3
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	215c      	movs	r1, #92	; 0x5c
 8003bec:	5a52      	ldrh	r2, [r2, r1]
 8003bee:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bf4:	2b22      	cmp	r3, #34	; 0x22
 8003bf6:	d140      	bne.n	8003c7a <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bfe:	210c      	movs	r1, #12
 8003c00:	187b      	adds	r3, r7, r1
 8003c02:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c08:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003c0a:	187b      	adds	r3, r7, r1
 8003c0c:	220e      	movs	r2, #14
 8003c0e:	18ba      	adds	r2, r7, r2
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	8812      	ldrh	r2, [r2, #0]
 8003c14:	4013      	ands	r3, r2
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c20:	1c9a      	adds	r2, r3, #2
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	225a      	movs	r2, #90	; 0x5a
 8003c2a:	5a9b      	ldrh	r3, [r3, r2]
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	b299      	uxth	r1, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	225a      	movs	r2, #90	; 0x5a
 8003c36:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	225a      	movs	r2, #90	; 0x5a
 8003c3c:	5a9b      	ldrh	r3, [r3, r2]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d122      	bne.n	8003c8a <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4911      	ldr	r1, [pc, #68]	; (8003c94 <UART_RxISR_16BIT+0xb8>)
 8003c50:	400a      	ands	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2101      	movs	r1, #1
 8003c60:	438a      	bics	r2, r1
 8003c62:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	0018      	movs	r0, r3
 8003c74:	f7fc fd1a 	bl	80006ac <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c78:	e007      	b.n	8003c8a <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	699a      	ldr	r2, [r3, #24]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2108      	movs	r1, #8
 8003c86:	430a      	orrs	r2, r1
 8003c88:	619a      	str	r2, [r3, #24]
}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b004      	add	sp, #16
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	fffffedf 	.word	0xfffffedf

08003c98 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ca0:	46c0      	nop			; (mov r8, r8)
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b002      	add	sp, #8
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <__libc_init_array>:
 8003ca8:	b570      	push	{r4, r5, r6, lr}
 8003caa:	2600      	movs	r6, #0
 8003cac:	4d0c      	ldr	r5, [pc, #48]	; (8003ce0 <__libc_init_array+0x38>)
 8003cae:	4c0d      	ldr	r4, [pc, #52]	; (8003ce4 <__libc_init_array+0x3c>)
 8003cb0:	1b64      	subs	r4, r4, r5
 8003cb2:	10a4      	asrs	r4, r4, #2
 8003cb4:	42a6      	cmp	r6, r4
 8003cb6:	d109      	bne.n	8003ccc <__libc_init_array+0x24>
 8003cb8:	2600      	movs	r6, #0
 8003cba:	f000 f821 	bl	8003d00 <_init>
 8003cbe:	4d0a      	ldr	r5, [pc, #40]	; (8003ce8 <__libc_init_array+0x40>)
 8003cc0:	4c0a      	ldr	r4, [pc, #40]	; (8003cec <__libc_init_array+0x44>)
 8003cc2:	1b64      	subs	r4, r4, r5
 8003cc4:	10a4      	asrs	r4, r4, #2
 8003cc6:	42a6      	cmp	r6, r4
 8003cc8:	d105      	bne.n	8003cd6 <__libc_init_array+0x2e>
 8003cca:	bd70      	pop	{r4, r5, r6, pc}
 8003ccc:	00b3      	lsls	r3, r6, #2
 8003cce:	58eb      	ldr	r3, [r5, r3]
 8003cd0:	4798      	blx	r3
 8003cd2:	3601      	adds	r6, #1
 8003cd4:	e7ee      	b.n	8003cb4 <__libc_init_array+0xc>
 8003cd6:	00b3      	lsls	r3, r6, #2
 8003cd8:	58eb      	ldr	r3, [r5, r3]
 8003cda:	4798      	blx	r3
 8003cdc:	3601      	adds	r6, #1
 8003cde:	e7f2      	b.n	8003cc6 <__libc_init_array+0x1e>
 8003ce0:	08003d98 	.word	0x08003d98
 8003ce4:	08003d98 	.word	0x08003d98
 8003ce8:	08003d98 	.word	0x08003d98
 8003cec:	08003d9c 	.word	0x08003d9c

08003cf0 <memset>:
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	1812      	adds	r2, r2, r0
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d100      	bne.n	8003cfa <memset+0xa>
 8003cf8:	4770      	bx	lr
 8003cfa:	7019      	strb	r1, [r3, #0]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	e7f9      	b.n	8003cf4 <memset+0x4>

08003d00 <_init>:
 8003d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d06:	bc08      	pop	{r3}
 8003d08:	469e      	mov	lr, r3
 8003d0a:	4770      	bx	lr

08003d0c <_fini>:
 8003d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d12:	bc08      	pop	{r3}
 8003d14:	469e      	mov	lr, r3
 8003d16:	4770      	bx	lr
