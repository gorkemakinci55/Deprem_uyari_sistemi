
deprem uyari.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003938  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080039f8  080039f8  000139f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a64  08003a64  00020008  2**0
                  CONTENTS
  4 .ARM          00000008  08003a64  08003a64  00013a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a6c  08003a6c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a6c  08003a6c  00013a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a70  08003a70  00013a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08003a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  20000008  08003a7c  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  08003a7c  00020560  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cff9  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ebc  00000000  00000000  0002d029  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d40  00000000  00000000  0002eee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c38  00000000  00000000  0002fc28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002208  00000000  00000000  00030860  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a61f  00000000  00000000  00032a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007a754  00000000  00000000  0003d087  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b77db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f54  00000000  00000000  000b7858  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080039e0 	.word	0x080039e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	080039e0 	.word	0x080039e0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <init_queue>:
#include "data_queue.h"
#include "stdio.h"
#include "stdlib.h"


void init_queue(queue* queue) {
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
    queue->tail = -1;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	2201      	movs	r2, #1
 8000444:	4252      	negs	r2, r2
 8000446:	601a      	str	r2, [r3, #0]
    queue->head = -1;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	2201      	movs	r2, #1
 800044c:	4252      	negs	r2, r2
 800044e:	605a      	str	r2, [r3, #4]
    queue->size = 0;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]
}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	b002      	add	sp, #8
 800045c:	bd80      	pop	{r7, pc}

0800045e <enqueue>:

void enqueue(queue* myqueue, char value) {
 800045e:	b580      	push	{r7, lr}
 8000460:	b082      	sub	sp, #8
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
 8000466:	000a      	movs	r2, r1
 8000468:	1cfb      	adds	r3, r7, #3
 800046a:	701a      	strb	r2, [r3, #0]


    if(myqueue->tail == -1){
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	3301      	adds	r3, #1
 8000472:	d116      	bne.n	80004a2 <enqueue+0x44>

        ++myqueue->tail;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	1c5a      	adds	r2, r3, #1
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	601a      	str	r2, [r3, #0]
        myqueue->QueueBuffer[myqueue->tail] = value;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	18d3      	adds	r3, r2, r3
 8000486:	1cfa      	adds	r2, r7, #3
 8000488:	7812      	ldrb	r2, [r2, #0]
 800048a:	741a      	strb	r2, [r3, #16]
        ++myqueue->head;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	685b      	ldr	r3, [r3, #4]
 8000490:	1c5a      	adds	r2, r3, #1
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	605a      	str	r2, [r3, #4]
        ++myqueue->size;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	689b      	ldr	r3, [r3, #8]
 800049a:	1c5a      	adds	r2, r3, #1
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	609a      	str	r2, [r3, #8]
    else{

        ++myqueue->tail;
        myqueue->QueueBuffer[myqueue->tail] = value;
    }
}
 80004a0:	e00b      	b.n	80004ba <enqueue+0x5c>
        ++myqueue->tail;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	1c5a      	adds	r2, r3, #1
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	601a      	str	r2, [r3, #0]
        myqueue->QueueBuffer[myqueue->tail] = value;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	18d3      	adds	r3, r2, r3
 80004b4:	1cfa      	adds	r2, r7, #3
 80004b6:	7812      	ldrb	r2, [r2, #0]
 80004b8:	741a      	strb	r2, [r3, #16]
}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	b002      	add	sp, #8
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <clear_queue>:
    --myqueue->size;
    return tmp;

}

void clear_queue(queue* queue){
 80004c2:	b580      	push	{r7, lr}
 80004c4:	b084      	sub	sp, #16
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < MAX_SIZE_OF_ARRAY; ++i){
 80004ca:	2300      	movs	r3, #0
 80004cc:	60fb      	str	r3, [r7, #12]
 80004ce:	e008      	b.n	80004e2 <clear_queue+0x20>
        queue->QueueBuffer[i] = 0;
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	18d3      	adds	r3, r2, r3
 80004d6:	3310      	adds	r3, #16
 80004d8:	2200      	movs	r2, #0
 80004da:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < MAX_SIZE_OF_ARRAY; ++i){
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	3301      	adds	r3, #1
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	2bc7      	cmp	r3, #199	; 0xc7
 80004e6:	ddf3      	ble.n	80004d0 <clear_queue+0xe>
    }
}
 80004e8:	46c0      	nop			; (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b004      	add	sp, #16
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fc50 	bl	8000d98 <HAL_Init>

  //bc95_at_start_check(bc95);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f8f8 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 fa58 	bl	80009b0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000500:	f000 f968 	bl	80007d4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000504:	f000 f9f4 	bl	80008f0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000508:	f000 fa22 	bl	8000950 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800050c:	f000 f99a 	bl	8000844 <MX_TIM2_Init>
  init_queue(&dataQueue);
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <main+0x60>)
 8000512:	0018      	movs	r0, r3
 8000514:	f7ff ff90 	bl	8000438 <init_queue>
  //HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart1,(uint8_t*)&rxBuf_IT,1);
 8000518:	490e      	ldr	r1, [pc, #56]	; (8000554 <main+0x64>)
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <main+0x68>)
 800051c:	2201      	movs	r2, #1
 800051e:	0018      	movs	r0, r3
 8000520:	f002 fa1a 	bl	8002958 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000524:	4b0d      	ldr	r3, [pc, #52]	; (800055c <main+0x6c>)
 8000526:	0018      	movs	r0, r3
 8000528:	f001 fe9e 	bl	8002268 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      if(uartReady == 0){
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <main+0x70>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d109      	bne.n	8000548 <main+0x58>
          gorkem = HAL_UART_Receive_IT(&huart1,(uint8_t*)&rxBuf_IT,1);
 8000534:	4907      	ldr	r1, [pc, #28]	; (8000554 <main+0x64>)
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <main+0x68>)
 8000538:	2201      	movs	r2, #1
 800053a:	0018      	movs	r0, r3
 800053c:	f002 fa0c 	bl	8002958 <HAL_UART_Receive_IT>
 8000540:	0003      	movs	r3, r0
 8000542:	001a      	movs	r2, r3
 8000544:	4b07      	ldr	r3, [pc, #28]	; (8000564 <main+0x74>)
 8000546:	701a      	strb	r2, [r3, #0]
      }


          uartReady = 1;
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <main+0x70>)
 800054a:	2201      	movs	r2, #1
 800054c:	601a      	str	r2, [r3, #0]
      if(uartReady == 0){
 800054e:	e7ed      	b.n	800052c <main+0x3c>
 8000550:	20000484 	.word	0x20000484
 8000554:	20000480 	.word	0x20000480
 8000558:	20000344 	.word	0x20000344
 800055c:	200003c4 	.word	0x200003c4
 8000560:	20000028 	.word	0x20000028
 8000564:	20000000 	.word	0x20000000

08000568 <HAL_UART_RxCpltCallback>:

  /* USER CODE END 3 */
}
}

  void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]

      if(huart->Instance==USART1 ){
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a0b      	ldr	r2, [pc, #44]	; (80005a4 <HAL_UART_RxCpltCallback+0x3c>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d110      	bne.n	800059c <HAL_UART_RxCpltCallback+0x34>

           enqueue(&dataQueue, rxBuf_IT);
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <HAL_UART_RxCpltCallback+0x40>)
 800057c:	781a      	ldrb	r2, [r3, #0]
 800057e:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <HAL_UART_RxCpltCallback+0x44>)
 8000580:	0011      	movs	r1, r2
 8000582:	0018      	movs	r0, r3
 8000584:	f7ff ff6b 	bl	800045e <enqueue>
           gorkem = HAL_UART_Receive_IT(&huart1,(uint8_t*)&rxBuf_IT, 1);
 8000588:	4907      	ldr	r1, [pc, #28]	; (80005a8 <HAL_UART_RxCpltCallback+0x40>)
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <HAL_UART_RxCpltCallback+0x48>)
 800058c:	2201      	movs	r2, #1
 800058e:	0018      	movs	r0, r3
 8000590:	f002 f9e2 	bl	8002958 <HAL_UART_Receive_IT>
 8000594:	0003      	movs	r3, r0
 8000596:	001a      	movs	r2, r3
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <HAL_UART_RxCpltCallback+0x4c>)
 800059a:	701a      	strb	r2, [r3, #0]
      }
  }
 800059c:	46c0      	nop			; (mov r8, r8)
 800059e:	46bd      	mov	sp, r7
 80005a0:	b002      	add	sp, #8
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40013800 	.word	0x40013800
 80005a8:	20000480 	.word	0x20000480
 80005ac:	20000484 	.word	0x20000484
 80005b0:	20000344 	.word	0x20000344
 80005b4:	20000000 	.word	0x20000000

080005b8 <HAL_UART_TxCpltCallback>:


  void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

       // HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);
      //gorkem = HAL_UART_GetState(&huart1);
        AT_Transmit_FLag = 0;
 80005c0:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <HAL_UART_TxCpltCallback+0x34>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]

        AT_Waiting_Flag = 1;
 80005c6:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <HAL_UART_TxCpltCallback+0x38>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	601a      	str	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart1,(uint8_t*)&rxBuf_IT,1);
 80005cc:	4909      	ldr	r1, [pc, #36]	; (80005f4 <HAL_UART_TxCpltCallback+0x3c>)
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <HAL_UART_TxCpltCallback+0x40>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	0018      	movs	r0, r3
 80005d4:	f002 f9c0 	bl	8002958 <HAL_UART_Receive_IT>
        ++count;
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <HAL_UART_TxCpltCallback+0x44>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	1c5a      	adds	r2, r3, #1
 80005de:	4b07      	ldr	r3, [pc, #28]	; (80005fc <HAL_UART_TxCpltCallback+0x44>)
 80005e0:	601a      	str	r2, [r3, #0]
  }
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	b002      	add	sp, #8
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	2000002c 	.word	0x2000002c
 80005f0:	20000030 	.word	0x20000030
 80005f4:	20000480 	.word	0x20000480
 80005f8:	20000344 	.word	0x20000344
 80005fc:	20000038 	.word	0x20000038

08000600 <HAL_UART_AbortReceiveCpltCallback>:

  void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart){
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]

      if(huart->Instance==USART1 ){
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a0d      	ldr	r2, [pc, #52]	; (8000644 <HAL_UART_AbortReceiveCpltCallback+0x44>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d113      	bne.n	800063a <HAL_UART_AbortReceiveCpltCallback+0x3a>
          clear_queue(&dataQueue);
 8000612:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <HAL_UART_AbortReceiveCpltCallback+0x48>)
 8000614:	0018      	movs	r0, r3
 8000616:	f7ff ff54 	bl	80004c2 <clear_queue>

          gorkem = HAL_UART_GetState(&huart1);
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <HAL_UART_AbortReceiveCpltCallback+0x4c>)
 800061c:	0018      	movs	r0, r3
 800061e:	f002 fbf1 	bl	8002e04 <HAL_UART_GetState>
 8000622:	0003      	movs	r3, r0
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <HAL_UART_AbortReceiveCpltCallback+0x50>)
 8000628:	701a      	strb	r2, [r3, #0]
          ++abourtCount;
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <HAL_UART_AbortReceiveCpltCallback+0x54>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	1c5a      	adds	r2, r3, #1
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <HAL_UART_AbortReceiveCpltCallback+0x54>)
 8000632:	601a      	str	r2, [r3, #0]
          AT_Transmit_FLag = 1;
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <HAL_UART_AbortReceiveCpltCallback+0x58>)
 8000636:	2201      	movs	r2, #1
 8000638:	601a      	str	r2, [r3, #0]
      }
  }
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	b002      	add	sp, #8
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	40013800 	.word	0x40013800
 8000648:	20000484 	.word	0x20000484
 800064c:	20000344 	.word	0x20000344
 8000650:	20000000 	.word	0x20000000
 8000654:	2000003c 	.word	0x2000003c
 8000658:	2000002c 	.word	0x2000002c

0800065c <HAL_TIM_PeriodElapsedCallback>:

  void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

      if(htim->Instance == TIM2){
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	05db      	lsls	r3, r3, #23
 800066c:	429a      	cmp	r2, r3
 800066e:	d12a      	bne.n	80006c6 <HAL_TIM_PeriodElapsedCallback+0x6a>
          if((gorkem = HAL_UART_GetState(&huart1)) == HAL_UART_STATE_BUSY_RX && (AT_Waiting_Flag == 1 || AT_READY_FLAG == 1)){
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000672:	0018      	movs	r0, r3
 8000674:	f002 fbc6 	bl	8002e04 <HAL_UART_GetState>
 8000678:	0003      	movs	r3, r0
 800067a:	b2da      	uxtb	r2, r3
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800067e:	701a      	strb	r2, [r3, #0]
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b22      	cmp	r3, #34	; 0x22
 8000686:	d11a      	bne.n	80006be <HAL_TIM_PeriodElapsedCallback+0x62>
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d003      	beq.n	8000698 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d112      	bne.n	80006be <HAL_TIM_PeriodElapsedCallback+0x62>
              HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	015b      	lsls	r3, r3, #5
 800069c:	4a10      	ldr	r2, [pc, #64]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800069e:	0019      	movs	r1, r3
 80006a0:	0010      	movs	r0, r2
 80006a2:	f000 fe96 	bl	80013d2 <HAL_GPIO_TogglePin>
              AT_Waiting_Flag = 0;
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
              ++timAbortCount;
 80006ac:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80006b4:	601a      	str	r2, [r3, #0]
              HAL_UART_AbortReceive_IT(&huart1);
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80006b8:	0018      	movs	r0, r3
 80006ba:	f002 fa05 	bl	8002ac8 <HAL_UART_AbortReceive_IT>
          }

        //  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);
          HAL_TIM_Base_Start_IT(&htim2);
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80006c0:	0018      	movs	r0, r3
 80006c2:	f001 fdd1 	bl	8002268 <HAL_TIM_Base_Start_IT>
      }
  }
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b002      	add	sp, #8
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	20000344 	.word	0x20000344
 80006d4:	20000000 	.word	0x20000000
 80006d8:	20000030 	.word	0x20000030
 80006dc:	20000024 	.word	0x20000024
 80006e0:	50000800 	.word	0x50000800
 80006e4:	20000034 	.word	0x20000034
 80006e8:	200003c4 	.word	0x200003c4

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b09b      	sub	sp, #108	; 0x6c
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	2434      	movs	r4, #52	; 0x34
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	0018      	movs	r0, r3
 80006f8:	2334      	movs	r3, #52	; 0x34
 80006fa:	001a      	movs	r2, r3
 80006fc:	2100      	movs	r1, #0
 80006fe:	f003 f967 	bl	80039d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000702:	2320      	movs	r3, #32
 8000704:	18fb      	adds	r3, r7, r3
 8000706:	0018      	movs	r0, r3
 8000708:	2314      	movs	r3, #20
 800070a:	001a      	movs	r2, r3
 800070c:	2100      	movs	r1, #0
 800070e:	f003 f95f 	bl	80039d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000712:	003b      	movs	r3, r7
 8000714:	0018      	movs	r0, r3
 8000716:	2320      	movs	r3, #32
 8000718:	001a      	movs	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	f003 f958 	bl	80039d0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000720:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <SystemClock_Config+0xe0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a2a      	ldr	r2, [pc, #168]	; (80007d0 <SystemClock_Config+0xe4>)
 8000726:	401a      	ands	r2, r3
 8000728:	4b28      	ldr	r3, [pc, #160]	; (80007cc <SystemClock_Config+0xe0>)
 800072a:	2180      	movs	r1, #128	; 0x80
 800072c:	0109      	lsls	r1, r1, #4
 800072e:	430a      	orrs	r2, r1
 8000730:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000732:	0021      	movs	r1, r4
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2201      	movs	r2, #1
 8000738:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	0252      	lsls	r2, r2, #9
 8000740:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2202      	movs	r2, #2
 8000746:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2280      	movs	r2, #128	; 0x80
 800074c:	0252      	lsls	r2, r2, #9
 800074e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2280      	movs	r2, #128	; 0x80
 8000754:	02d2      	lsls	r2, r2, #11
 8000756:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2280      	movs	r2, #128	; 0x80
 800075c:	03d2      	lsls	r2, r2, #15
 800075e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	187b      	adds	r3, r7, r1
 8000762:	0018      	movs	r0, r3
 8000764:	f000 fe48 	bl	80013f8 <HAL_RCC_OscConfig>
 8000768:	1e03      	subs	r3, r0, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800076c:	f000 f97e 	bl	8000a6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	2120      	movs	r1, #32
 8000772:	187b      	adds	r3, r7, r1
 8000774:	220f      	movs	r2, #15
 8000776:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2203      	movs	r2, #3
 800077c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2101      	movs	r1, #1
 8000794:	0018      	movs	r0, r3
 8000796:	f001 f9a9 	bl	8001aec <HAL_RCC_ClockConfig>
 800079a:	1e03      	subs	r3, r0, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800079e:	f000 f965 	bl	8000a6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80007a2:	003b      	movs	r3, r7
 80007a4:	2203      	movs	r2, #3
 80007a6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007a8:	003b      	movs	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007ae:	003b      	movs	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007b4:	003b      	movs	r3, r7
 80007b6:	0018      	movs	r0, r3
 80007b8:	f001 fb7a 	bl	8001eb0 <HAL_RCCEx_PeriphCLKConfig>
 80007bc:	1e03      	subs	r3, r0, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80007c0:	f000 f954 	bl	8000a6c <Error_Handler>
  }
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b01b      	add	sp, #108	; 0x6c
 80007ca:	bd90      	pop	{r4, r7, pc}
 80007cc:	40007000 	.word	0x40007000
 80007d0:	ffffe7ff 	.word	0xffffe7ff

080007d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_SPI2_Init+0x68>)
 80007da:	4a19      	ldr	r2, [pc, #100]	; (8000840 <MX_SPI2_Init+0x6c>)
 80007dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007de:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_SPI2_Init+0x68>)
 80007e0:	2282      	movs	r2, #130	; 0x82
 80007e2:	0052      	lsls	r2, r2, #1
 80007e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_SPI2_Init+0x68>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_SPI2_Init+0x68>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_SPI2_Init+0x68>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f8:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_SPI2_Init+0x68>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_SPI2_Init+0x68>)
 8000800:	2280      	movs	r2, #128	; 0x80
 8000802:	02d2      	lsls	r2, r2, #11
 8000804:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000806:	4b0d      	ldr	r3, [pc, #52]	; (800083c <MX_SPI2_Init+0x68>)
 8000808:	2200      	movs	r2, #0
 800080a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800080c:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_SPI2_Init+0x68>)
 800080e:	2200      	movs	r2, #0
 8000810:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <MX_SPI2_Init+0x68>)
 8000814:	2200      	movs	r2, #0
 8000816:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_SPI2_Init+0x68>)
 800081a:	2200      	movs	r2, #0
 800081c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800081e:	4b07      	ldr	r3, [pc, #28]	; (800083c <MX_SPI2_Init+0x68>)
 8000820:	2207      	movs	r2, #7
 8000822:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <MX_SPI2_Init+0x68>)
 8000826:	0018      	movs	r0, r3
 8000828:	f001 fc88 	bl	800213c <HAL_SPI_Init>
 800082c:	1e03      	subs	r3, r0, #0
 800082e:	d001      	beq.n	8000834 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000830:	f000 f91c 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000834:	46c0      	nop			; (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	20000040 	.word	0x20000040
 8000840:	40003800 	.word	0x40003800

08000844 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800084a:	2308      	movs	r3, #8
 800084c:	18fb      	adds	r3, r7, r3
 800084e:	0018      	movs	r0, r3
 8000850:	2310      	movs	r3, #16
 8000852:	001a      	movs	r2, r3
 8000854:	2100      	movs	r1, #0
 8000856:	f003 f8bb 	bl	80039d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800085a:	003b      	movs	r3, r7
 800085c:	0018      	movs	r0, r3
 800085e:	2308      	movs	r3, #8
 8000860:	001a      	movs	r2, r3
 8000862:	2100      	movs	r1, #0
 8000864:	f003 f8b4 	bl	80039d0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000868:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <MX_TIM2_Init+0xa0>)
 800086a:	2280      	movs	r2, #128	; 0x80
 800086c:	05d2      	lsls	r2, r2, #23
 800086e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8000870:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_TIM2_Init+0xa0>)
 8000872:	4a1d      	ldr	r2, [pc, #116]	; (80008e8 <MX_TIM2_Init+0xa4>)
 8000874:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000876:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <MX_TIM2_Init+0xa0>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 800087c:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_TIM2_Init+0xa0>)
 800087e:	4a1b      	ldr	r2, [pc, #108]	; (80008ec <MX_TIM2_Init+0xa8>)
 8000880:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_TIM2_Init+0xa0>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_TIM2_Init+0xa0>)
 800088a:	2200      	movs	r2, #0
 800088c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_TIM2_Init+0xa0>)
 8000890:	0018      	movs	r0, r3
 8000892:	f001 fcbd 	bl	8002210 <HAL_TIM_Base_Init>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d001      	beq.n	800089e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800089a:	f000 f8e7 	bl	8000a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800089e:	2108      	movs	r1, #8
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2280      	movs	r2, #128	; 0x80
 80008a4:	0152      	lsls	r2, r2, #5
 80008a6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008a8:	187a      	adds	r2, r7, r1
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_TIM2_Init+0xa0>)
 80008ac:	0011      	movs	r1, r2
 80008ae:	0018      	movs	r0, r3
 80008b0:	f001 fde4 	bl	800247c <HAL_TIM_ConfigClockSource>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80008b8:	f000 f8d8 	bl	8000a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008bc:	003b      	movs	r3, r7
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c2:	003b      	movs	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008c8:	003a      	movs	r2, r7
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_TIM2_Init+0xa0>)
 80008cc:	0011      	movs	r1, r2
 80008ce:	0018      	movs	r0, r3
 80008d0:	f001 ffaa 	bl	8002828 <HAL_TIMEx_MasterConfigSynchronization>
 80008d4:	1e03      	subs	r3, r0, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80008d8:	f000 f8c8 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	b006      	add	sp, #24
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200003c4 	.word	0x200003c4
 80008e8:	00007cff 	.word	0x00007cff
 80008ec:	00000bb7 	.word	0x00000bb7

080008f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_USART1_UART_Init+0x58>)
 80008f6:	4a15      	ldr	r2, [pc, #84]	; (800094c <MX_USART1_UART_Init+0x5c>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_USART1_UART_Init+0x58>)
 80008fc:	2296      	movs	r2, #150	; 0x96
 80008fe:	0192      	lsls	r2, r2, #6
 8000900:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_USART1_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_USART1_UART_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_USART1_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_USART1_UART_Init+0x58>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_USART1_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_USART1_UART_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_USART1_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_USART1_UART_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <MX_USART1_UART_Init+0x58>)
 8000934:	0018      	movs	r0, r3
 8000936:	f001 ffbb 	bl	80028b0 <HAL_UART_Init>
 800093a:	1e03      	subs	r3, r0, #0
 800093c:	d001      	beq.n	8000942 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800093e:	f000 f895 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000344 	.word	0x20000344
 800094c:	40013800 	.word	0x40013800

08000950 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000956:	4a15      	ldr	r2, [pc, #84]	; (80009ac <MX_USART2_UART_Init+0x5c>)
 8000958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 800095c:	22e1      	movs	r2, #225	; 0xe1
 800095e:	0252      	lsls	r2, r2, #9
 8000960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000992:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000994:	0018      	movs	r0, r3
 8000996:	f001 ff8b 	bl	80028b0 <HAL_UART_Init>
 800099a:	1e03      	subs	r3, r0, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800099e:	f000 f865 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000400 	.word	0x20000400
 80009ac:	40004400 	.word	0x40004400

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b08b      	sub	sp, #44	; 0x2c
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	2414      	movs	r4, #20
 80009b8:	193b      	adds	r3, r7, r4
 80009ba:	0018      	movs	r0, r3
 80009bc:	2314      	movs	r3, #20
 80009be:	001a      	movs	r2, r3
 80009c0:	2100      	movs	r1, #0
 80009c2:	f003 f805 	bl	80039d0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c6:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <MX_GPIO_Init+0xb4>)
 80009c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009ca:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <MX_GPIO_Init+0xb4>)
 80009cc:	2180      	movs	r1, #128	; 0x80
 80009ce:	430a      	orrs	r2, r1
 80009d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80009d2:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <MX_GPIO_Init+0xb4>)
 80009d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	4013      	ands	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <MX_GPIO_Init+0xb4>)
 80009e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009e2:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <MX_GPIO_Init+0xb4>)
 80009e4:	2101      	movs	r1, #1
 80009e6:	430a      	orrs	r2, r1
 80009e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <MX_GPIO_Init+0xb4>)
 80009ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ee:	2201      	movs	r2, #1
 80009f0:	4013      	ands	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_GPIO_Init+0xb4>)
 80009f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_GPIO_Init+0xb4>)
 80009fc:	2102      	movs	r1, #2
 80009fe:	430a      	orrs	r2, r1
 8000a00:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_GPIO_Init+0xb4>)
 8000a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a06:	2202      	movs	r2, #2
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_GPIO_Init+0xb4>)
 8000a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_GPIO_Init+0xb4>)
 8000a14:	2104      	movs	r1, #4
 8000a16:	430a      	orrs	r2, r1
 8000a18:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a1a:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_GPIO_Init+0xb4>)
 8000a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1e:	2204      	movs	r2, #4
 8000a20:	4013      	ands	r3, r2
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000a26:	23c0      	movs	r3, #192	; 0xc0
 8000a28:	015b      	lsls	r3, r3, #5
 8000a2a:	480f      	ldr	r0, [pc, #60]	; (8000a68 <MX_GPIO_Init+0xb8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	0019      	movs	r1, r3
 8000a30:	f000 fcb2 	bl	8001398 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a34:	193b      	adds	r3, r7, r4
 8000a36:	22c0      	movs	r2, #192	; 0xc0
 8000a38:	0152      	lsls	r2, r2, #5
 8000a3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	2201      	movs	r2, #1
 8000a40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <MX_GPIO_Init+0xb8>)
 8000a52:	0019      	movs	r1, r3
 8000a54:	0010      	movs	r0, r2
 8000a56:	f000 fb21 	bl	800109c <HAL_GPIO_Init>

}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b00b      	add	sp, #44	; 0x2c
 8000a60:	bd90      	pop	{r4, r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	40021000 	.word	0x40021000
 8000a68:	50000800 	.word	0x50000800

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7c:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <HAL_MspInit+0x24>)
 8000a7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_MspInit+0x24>)
 8000a82:	2101      	movs	r1, #1
 8000a84:	430a      	orrs	r2, r1
 8000a86:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <HAL_MspInit+0x24>)
 8000a8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <HAL_MspInit+0x24>)
 8000a8e:	2180      	movs	r1, #128	; 0x80
 8000a90:	0549      	lsls	r1, r1, #21
 8000a92:	430a      	orrs	r2, r1
 8000a94:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	230c      	movs	r3, #12
 8000aaa:	18fb      	adds	r3, r7, r3
 8000aac:	0018      	movs	r0, r3
 8000aae:	2314      	movs	r3, #20
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	f002 ff8c 	bl	80039d0 <memset>
  if(hspi->Instance==SPI2)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a18      	ldr	r2, [pc, #96]	; (8000b20 <HAL_SPI_MspInit+0x80>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d129      	bne.n	8000b16 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <HAL_SPI_MspInit+0x84>)
 8000ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ac6:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <HAL_SPI_MspInit+0x84>)
 8000ac8:	2180      	movs	r1, #128	; 0x80
 8000aca:	01c9      	lsls	r1, r1, #7
 8000acc:	430a      	orrs	r2, r1
 8000ace:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <HAL_SPI_MspInit+0x84>)
 8000ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <HAL_SPI_MspInit+0x84>)
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	62da      	str	r2, [r3, #44]	; 0x2c
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <HAL_SPI_MspInit+0x84>)
 8000ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ae8:	210c      	movs	r1, #12
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	22f0      	movs	r2, #240	; 0xf0
 8000aee:	0212      	lsls	r2, r2, #8
 8000af0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	2202      	movs	r2, #2
 8000af6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2203      	movs	r2, #3
 8000b02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <HAL_SPI_MspInit+0x88>)
 8000b0e:	0019      	movs	r1, r3
 8000b10:	0010      	movs	r0, r2
 8000b12:	f000 fac3 	bl	800109c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b008      	add	sp, #32
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	40003800 	.word	0x40003800
 8000b24:	40021000 	.word	0x40021000
 8000b28:	50000400 	.word	0x50000400

08000b2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	2380      	movs	r3, #128	; 0x80
 8000b3a:	05db      	lsls	r3, r3, #23
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d10d      	bne.n	8000b5c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_TIM_Base_MspInit+0x38>)
 8000b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <HAL_TIM_Base_MspInit+0x38>)
 8000b46:	2101      	movs	r1, #1
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	200f      	movs	r0, #15
 8000b52:	f000 fa29 	bl	8000fa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b56:	200f      	movs	r0, #15
 8000b58:	f000 fa3b 	bl	8000fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b002      	add	sp, #8
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40021000 	.word	0x40021000

08000b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	2314      	movs	r3, #20
 8000b72:	18fb      	adds	r3, r7, r3
 8000b74:	0018      	movs	r0, r3
 8000b76:	2314      	movs	r3, #20
 8000b78:	001a      	movs	r2, r3
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	f002 ff28 	bl	80039d0 <memset>
  if(huart->Instance==USART1)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a34      	ldr	r2, [pc, #208]	; (8000c58 <HAL_UART_MspInit+0xf0>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d133      	bne.n	8000bf2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b8a:	4b34      	ldr	r3, [pc, #208]	; (8000c5c <HAL_UART_MspInit+0xf4>)
 8000b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b8e:	4b33      	ldr	r3, [pc, #204]	; (8000c5c <HAL_UART_MspInit+0xf4>)
 8000b90:	2180      	movs	r1, #128	; 0x80
 8000b92:	01c9      	lsls	r1, r1, #7
 8000b94:	430a      	orrs	r2, r1
 8000b96:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b98:	4b30      	ldr	r3, [pc, #192]	; (8000c5c <HAL_UART_MspInit+0xf4>)
 8000b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b9c:	4b2f      	ldr	r3, [pc, #188]	; (8000c5c <HAL_UART_MspInit+0xf4>)
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ba4:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <HAL_UART_MspInit+0xf4>)
 8000ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bb0:	2114      	movs	r1, #20
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	22c0      	movs	r2, #192	; 0xc0
 8000bb6:	00d2      	lsls	r2, r2, #3
 8000bb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2203      	movs	r2, #3
 8000bca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2204      	movs	r2, #4
 8000bd0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	187a      	adds	r2, r7, r1
 8000bd4:	23a0      	movs	r3, #160	; 0xa0
 8000bd6:	05db      	lsls	r3, r3, #23
 8000bd8:	0011      	movs	r1, r2
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f000 fa5e 	bl	800109c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	201b      	movs	r0, #27
 8000be6:	f000 f9df 	bl	8000fa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bea:	201b      	movs	r0, #27
 8000bec:	f000 f9f1 	bl	8000fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bf0:	e02e      	b.n	8000c50 <HAL_UART_MspInit+0xe8>
  else if(huart->Instance==USART2)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a1a      	ldr	r2, [pc, #104]	; (8000c60 <HAL_UART_MspInit+0xf8>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d129      	bne.n	8000c50 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bfc:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <HAL_UART_MspInit+0xf4>)
 8000bfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <HAL_UART_MspInit+0xf4>)
 8000c02:	2180      	movs	r1, #128	; 0x80
 8000c04:	0289      	lsls	r1, r1, #10
 8000c06:	430a      	orrs	r2, r1
 8000c08:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <HAL_UART_MspInit+0xf4>)
 8000c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c0e:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <HAL_UART_MspInit+0xf4>)
 8000c10:	2101      	movs	r1, #1
 8000c12:	430a      	orrs	r2, r1
 8000c14:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_UART_MspInit+0xf4>)
 8000c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c22:	2114      	movs	r1, #20
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	220c      	movs	r2, #12
 8000c28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	2203      	movs	r2, #3
 8000c3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	2204      	movs	r2, #4
 8000c40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	187a      	adds	r2, r7, r1
 8000c44:	23a0      	movs	r3, #160	; 0xa0
 8000c46:	05db      	lsls	r3, r3, #23
 8000c48:	0011      	movs	r1, r2
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 fa26 	bl	800109c <HAL_GPIO_Init>
}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b00a      	add	sp, #40	; 0x28
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40013800 	.word	0x40013800
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40004400 	.word	0x40004400

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <HardFault_Handler+0x4>

08000c74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8c:	f000 f8ce 	bl	8000e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <TIM2_IRQHandler+0x14>)
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f001 fb04 	bl	80022ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	200003c4 	.word	0x200003c4

08000cb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <USART1_IRQHandler+0x14>)
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f001 ff76 	bl	8002ba8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	20000344 	.word	0x20000344

08000cc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <SystemInit+0x64>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <SystemInit+0x64>)
 8000cd2:	2180      	movs	r1, #128	; 0x80
 8000cd4:	0049      	lsls	r1, r1, #1
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <SystemInit+0x64>)
 8000cdc:	68da      	ldr	r2, [r3, #12]
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <SystemInit+0x64>)
 8000ce0:	4913      	ldr	r1, [pc, #76]	; (8000d30 <SystemInit+0x68>)
 8000ce2:	400a      	ands	r2, r1
 8000ce4:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <SystemInit+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <SystemInit+0x64>)
 8000cec:	4911      	ldr	r1, [pc, #68]	; (8000d34 <SystemInit+0x6c>)
 8000cee:	400a      	ands	r2, r1
 8000cf0:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <SystemInit+0x64>)
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <SystemInit+0x64>)
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	438a      	bics	r2, r1
 8000cfc:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <SystemInit+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <SystemInit+0x64>)
 8000d04:	490c      	ldr	r1, [pc, #48]	; (8000d38 <SystemInit+0x70>)
 8000d06:	400a      	ands	r2, r1
 8000d08:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <SystemInit+0x64>)
 8000d0c:	68da      	ldr	r2, [r3, #12]
 8000d0e:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <SystemInit+0x64>)
 8000d10:	490a      	ldr	r1, [pc, #40]	; (8000d3c <SystemInit+0x74>)
 8000d12:	400a      	ands	r2, r1
 8000d14:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d16:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <SystemInit+0x64>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <SystemInit+0x78>)
 8000d1e:	2280      	movs	r2, #128	; 0x80
 8000d20:	0512      	lsls	r2, r2, #20
 8000d22:	609a      	str	r2, [r3, #8]
#endif
}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	88ff400c 	.word	0x88ff400c
 8000d34:	fef6fff6 	.word	0xfef6fff6
 8000d38:	fffbffff 	.word	0xfffbffff
 8000d3c:	ff02ffff 	.word	0xff02ffff
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000d44:	480d      	ldr	r0, [pc, #52]	; (8000d7c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000d46:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000d48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d4a:	e003      	b.n	8000d54 <LoopCopyDataInit>

08000d4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000d4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d52:	3104      	adds	r1, #4

08000d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d54:	480b      	ldr	r0, [pc, #44]	; (8000d84 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000d58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d5c:	d3f6      	bcc.n	8000d4c <CopyDataInit>
  ldr  r2, =_sbss
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <LoopForever+0x12>)
  b  LoopFillZerobss
 8000d60:	e002      	b.n	8000d68 <LoopFillZerobss>

08000d62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000d62:	2300      	movs	r3, #0
  str  r3, [r2]
 8000d64:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d66:	3204      	adds	r2, #4

08000d68 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <LoopForever+0x16>)
  cmp  r2, r3
 8000d6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d6c:	d3f9      	bcc.n	8000d62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d6e:	f7ff ffab 	bl	8000cc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d72:	f002 fe09 	bl	8003988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d76:	f7ff fbbb 	bl	80004f0 <main>

08000d7a <LoopForever>:

LoopForever:
    b LoopForever
 8000d7a:	e7fe      	b.n	8000d7a <LoopForever>
   ldr   r0, =_estack
 8000d7c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8000d80:	08003a74 	.word	0x08003a74
  ldr  r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d88:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8000d8c:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8000d90:	20000560 	.word	0x20000560

08000d94 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC1_COMP_IRQHandler>
	...

08000d98 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <HAL_Init+0x3c>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <HAL_Init+0x3c>)
 8000daa:	2140      	movs	r1, #64	; 0x40
 8000dac:	430a      	orrs	r2, r1
 8000dae:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000db0:	2000      	movs	r0, #0
 8000db2:	f000 f811 	bl	8000dd8 <HAL_InitTick>
 8000db6:	1e03      	subs	r3, r0, #0
 8000db8:	d003      	beq.n	8000dc2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000dba:	1dfb      	adds	r3, r7, #7
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	701a      	strb	r2, [r3, #0]
 8000dc0:	e001      	b.n	8000dc6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dc2:	f7ff fe59 	bl	8000a78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dc6:	1dfb      	adds	r3, r7, #7
 8000dc8:	781b      	ldrb	r3, [r3, #0]
}
 8000dca:	0018      	movs	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b002      	add	sp, #8
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	40022000 	.word	0x40022000

08000dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000de0:	230f      	movs	r3, #15
 8000de2:	18fb      	adds	r3, r7, r3
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <HAL_InitTick+0x50>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	23fa      	movs	r3, #250	; 0xfa
 8000dee:	0099      	lsls	r1, r3, #2
 8000df0:	0010      	movs	r0, r2
 8000df2:	f7ff f989 	bl	8000108 <__udivsi3>
 8000df6:	0003      	movs	r3, r0
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f000 f8fa 	bl	8000ff2 <HAL_SYSTICK_Config>
 8000dfe:	1e03      	subs	r3, r0, #0
 8000e00:	d004      	beq.n	8000e0c <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8000e02:	230f      	movs	r3, #15
 8000e04:	18fb      	adds	r3, r7, r3
 8000e06:	2201      	movs	r2, #1
 8000e08:	701a      	strb	r2, [r3, #0]
 8000e0a:	e006      	b.n	8000e1a <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000e0c:	6879      	ldr	r1, [r7, #4]
 8000e0e:	2301      	movs	r3, #1
 8000e10:	425b      	negs	r3, r3
 8000e12:	2200      	movs	r2, #0
 8000e14:	0018      	movs	r0, r3
 8000e16:	f000 f8c7 	bl	8000fa8 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8000e1a:	230f      	movs	r3, #15
 8000e1c:	18fb      	adds	r3, r7, r3
 8000e1e:	781b      	ldrb	r3, [r3, #0]
}
 8000e20:	0018      	movs	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b004      	add	sp, #16
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000004 	.word	0x20000004

08000e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  uwTick++;
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <HAL_IncTick+0x14>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	1c5a      	adds	r2, r3, #1
 8000e36:	4b02      	ldr	r3, [pc, #8]	; (8000e40 <HAL_IncTick+0x14>)
 8000e38:	601a      	str	r2, [r3, #0]
}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	2000055c 	.word	0x2000055c

08000e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b02      	ldr	r3, [pc, #8]	; (8000e54 <HAL_GetTick+0x10>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	2000055c 	.word	0x2000055c

08000e58 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	0002      	movs	r2, r0
 8000e60:	1dfb      	adds	r3, r7, #7
 8000e62:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000e64:	1dfb      	adds	r3, r7, #7
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	001a      	movs	r2, r3
 8000e6a:	231f      	movs	r3, #31
 8000e6c:	401a      	ands	r2, r3
 8000e6e:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <NVIC_EnableIRQ+0x28>)
 8000e70:	2101      	movs	r1, #1
 8000e72:	4091      	lsls	r1, r2
 8000e74:	000a      	movs	r2, r1
 8000e76:	601a      	str	r2, [r3, #0]
}
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b002      	add	sp, #8
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	e000e100 	.word	0xe000e100

08000e84 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e84:	b590      	push	{r4, r7, lr}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	6039      	str	r1, [r7, #0]
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b7f      	cmp	r3, #127	; 0x7f
 8000e98:	d932      	bls.n	8000f00 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e9a:	4a2f      	ldr	r2, [pc, #188]	; (8000f58 <NVIC_SetPriority+0xd4>)
 8000e9c:	1dfb      	adds	r3, r7, #7
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	0019      	movs	r1, r3
 8000ea2:	230f      	movs	r3, #15
 8000ea4:	400b      	ands	r3, r1
 8000ea6:	3b08      	subs	r3, #8
 8000ea8:	089b      	lsrs	r3, r3, #2
 8000eaa:	3306      	adds	r3, #6
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	18d3      	adds	r3, r2, r3
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	1dfa      	adds	r2, r7, #7
 8000eb6:	7812      	ldrb	r2, [r2, #0]
 8000eb8:	0011      	movs	r1, r2
 8000eba:	2203      	movs	r2, #3
 8000ebc:	400a      	ands	r2, r1
 8000ebe:	00d2      	lsls	r2, r2, #3
 8000ec0:	21ff      	movs	r1, #255	; 0xff
 8000ec2:	4091      	lsls	r1, r2
 8000ec4:	000a      	movs	r2, r1
 8000ec6:	43d2      	mvns	r2, r2
 8000ec8:	401a      	ands	r2, r3
 8000eca:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	019b      	lsls	r3, r3, #6
 8000ed0:	22ff      	movs	r2, #255	; 0xff
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	1dfb      	adds	r3, r7, #7
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	0018      	movs	r0, r3
 8000eda:	2303      	movs	r3, #3
 8000edc:	4003      	ands	r3, r0
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ee2:	481d      	ldr	r0, [pc, #116]	; (8000f58 <NVIC_SetPriority+0xd4>)
 8000ee4:	1dfb      	adds	r3, r7, #7
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	001c      	movs	r4, r3
 8000eea:	230f      	movs	r3, #15
 8000eec:	4023      	ands	r3, r4
 8000eee:	3b08      	subs	r3, #8
 8000ef0:	089b      	lsrs	r3, r3, #2
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	3306      	adds	r3, #6
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	18c3      	adds	r3, r0, r3
 8000efa:	3304      	adds	r3, #4
 8000efc:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000efe:	e027      	b.n	8000f50 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f00:	4a16      	ldr	r2, [pc, #88]	; (8000f5c <NVIC_SetPriority+0xd8>)
 8000f02:	1dfb      	adds	r3, r7, #7
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	089b      	lsrs	r3, r3, #2
 8000f0a:	33c0      	adds	r3, #192	; 0xc0
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	589b      	ldr	r3, [r3, r2]
 8000f10:	1dfa      	adds	r2, r7, #7
 8000f12:	7812      	ldrb	r2, [r2, #0]
 8000f14:	0011      	movs	r1, r2
 8000f16:	2203      	movs	r2, #3
 8000f18:	400a      	ands	r2, r1
 8000f1a:	00d2      	lsls	r2, r2, #3
 8000f1c:	21ff      	movs	r1, #255	; 0xff
 8000f1e:	4091      	lsls	r1, r2
 8000f20:	000a      	movs	r2, r1
 8000f22:	43d2      	mvns	r2, r2
 8000f24:	401a      	ands	r2, r3
 8000f26:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	019b      	lsls	r3, r3, #6
 8000f2c:	22ff      	movs	r2, #255	; 0xff
 8000f2e:	401a      	ands	r2, r3
 8000f30:	1dfb      	adds	r3, r7, #7
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	0018      	movs	r0, r3
 8000f36:	2303      	movs	r3, #3
 8000f38:	4003      	ands	r3, r0
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f3e:	4807      	ldr	r0, [pc, #28]	; (8000f5c <NVIC_SetPriority+0xd8>)
 8000f40:	1dfb      	adds	r3, r7, #7
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b25b      	sxtb	r3, r3
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	33c0      	adds	r3, #192	; 0xc0
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	501a      	str	r2, [r3, r0]
}
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b003      	add	sp, #12
 8000f56:	bd90      	pop	{r4, r7, pc}
 8000f58:	e000ed00 	.word	0xe000ed00
 8000f5c:	e000e100 	.word	0xe000e100

08000f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	4a0c      	ldr	r2, [pc, #48]	; (8000fa0 <SysTick_Config+0x40>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d901      	bls.n	8000f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f72:	2301      	movs	r3, #1
 8000f74:	e010      	b.n	8000f98 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <SysTick_Config+0x44>)
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	3a01      	subs	r2, #1
 8000f7c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7e:	2301      	movs	r3, #1
 8000f80:	425b      	negs	r3, r3
 8000f82:	2103      	movs	r1, #3
 8000f84:	0018      	movs	r0, r3
 8000f86:	f7ff ff7d 	bl	8000e84 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <SysTick_Config+0x44>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <SysTick_Config+0x44>)
 8000f92:	2207      	movs	r2, #7
 8000f94:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	0018      	movs	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b002      	add	sp, #8
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	00ffffff 	.word	0x00ffffff
 8000fa4:	e000e010 	.word	0xe000e010

08000fa8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	1c02      	adds	r2, r0, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	0011      	movs	r1, r2
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f7ff ff5d 	bl	8000e84 <NVIC_SetPriority>
}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b004      	add	sp, #16
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	0002      	movs	r2, r0
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	b25b      	sxtb	r3, r3
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff ff37 	bl	8000e58 <NVIC_EnableIRQ>
}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	46bd      	mov	sp, r7
 8000fee:	b002      	add	sp, #8
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f7ff ffaf 	bl	8000f60 <SysTick_Config>
 8001002:	0003      	movs	r3, r0
}
 8001004:	0018      	movs	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	b002      	add	sp, #8
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001014:	230f      	movs	r3, #15
 8001016:	18fb      	adds	r3, r7, r3
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2225      	movs	r2, #37	; 0x25
 8001020:	5c9b      	ldrb	r3, [r3, r2]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d007      	beq.n	8001038 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2204      	movs	r2, #4
 800102c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800102e:	230f      	movs	r3, #15
 8001030:	18fb      	adds	r3, r7, r3
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]
 8001036:	e02a      	b.n	800108e <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	210e      	movs	r1, #14
 8001044:	438a      	bics	r2, r1
 8001046:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2101      	movs	r1, #1
 8001054:	438a      	bics	r2, r1
 8001056:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105c:	221c      	movs	r2, #28
 800105e:	401a      	ands	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	2101      	movs	r1, #1
 8001066:	4091      	lsls	r1, r2
 8001068:	000a      	movs	r2, r1
 800106a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2225      	movs	r2, #37	; 0x25
 8001070:	2101      	movs	r1, #1
 8001072:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2224      	movs	r2, #36	; 0x24
 8001078:	2100      	movs	r1, #0
 800107a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001080:	2b00      	cmp	r3, #0
 8001082:	d004      	beq.n	800108e <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	0010      	movs	r0, r2
 800108c:	4798      	blx	r3
    }
  }
  return status;
 800108e:	230f      	movs	r3, #15
 8001090:	18fb      	adds	r3, r7, r3
 8001092:	781b      	ldrb	r3, [r3, #0]
}
 8001094:	0018      	movs	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	b004      	add	sp, #16
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80010b2:	e155      	b.n	8001360 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2101      	movs	r1, #1
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	4091      	lsls	r1, r2
 80010be:	000a      	movs	r2, r1
 80010c0:	4013      	ands	r3, r2
 80010c2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d100      	bne.n	80010cc <HAL_GPIO_Init+0x30>
 80010ca:	e146      	b.n	800135a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x40>
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2b12      	cmp	r3, #18
 80010da:	d123      	bne.n	8001124 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	08da      	lsrs	r2, r3, #3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3208      	adds	r2, #8
 80010e4:	0092      	lsls	r2, r2, #2
 80010e6:	58d3      	ldr	r3, [r2, r3]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	2207      	movs	r2, #7
 80010ee:	4013      	ands	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	220f      	movs	r2, #15
 80010f4:	409a      	lsls	r2, r3
 80010f6:	0013      	movs	r3, r2
 80010f8:	43da      	mvns	r2, r3
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	691a      	ldr	r2, [r3, #16]
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	2107      	movs	r1, #7
 8001108:	400b      	ands	r3, r1
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	409a      	lsls	r2, r3
 800110e:	0013      	movs	r3, r2
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	08da      	lsrs	r2, r3, #3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3208      	adds	r2, #8
 800111e:	0092      	lsls	r2, r2, #2
 8001120:	6939      	ldr	r1, [r7, #16]
 8001122:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d00b      	beq.n	8001144 <HAL_GPIO_Init+0xa8>
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b02      	cmp	r3, #2
 8001132:	d007      	beq.n	8001144 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001138:	2b11      	cmp	r3, #17
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b12      	cmp	r3, #18
 8001142:	d130      	bne.n	80011a6 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2203      	movs	r2, #3
 8001150:	409a      	lsls	r2, r3
 8001152:	0013      	movs	r3, r2
 8001154:	43da      	mvns	r2, r3
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	68da      	ldr	r2, [r3, #12]
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	409a      	lsls	r2, r3
 8001166:	0013      	movs	r3, r2
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800117a:	2201      	movs	r2, #1
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	409a      	lsls	r2, r3
 8001180:	0013      	movs	r3, r2
 8001182:	43da      	mvns	r2, r3
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	091b      	lsrs	r3, r3, #4
 8001190:	2201      	movs	r2, #1
 8001192:	401a      	ands	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	409a      	lsls	r2, r3
 8001198:	0013      	movs	r3, r2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	2203      	movs	r2, #3
 80011b2:	409a      	lsls	r2, r3
 80011b4:	0013      	movs	r3, r2
 80011b6:	43da      	mvns	r2, r3
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2203      	movs	r2, #3
 80011c4:	401a      	ands	r2, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	409a      	lsls	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	2203      	movs	r2, #3
 80011e6:	409a      	lsls	r2, r3
 80011e8:	0013      	movs	r3, r2
 80011ea:	43da      	mvns	r2, r3
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	409a      	lsls	r2, r3
 80011fc:	0013      	movs	r3, r2
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	055b      	lsls	r3, r3, #21
 8001212:	4013      	ands	r3, r2
 8001214:	d100      	bne.n	8001218 <HAL_GPIO_Init+0x17c>
 8001216:	e0a0      	b.n	800135a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001218:	4b57      	ldr	r3, [pc, #348]	; (8001378 <HAL_GPIO_Init+0x2dc>)
 800121a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800121c:	4b56      	ldr	r3, [pc, #344]	; (8001378 <HAL_GPIO_Init+0x2dc>)
 800121e:	2101      	movs	r1, #1
 8001220:	430a      	orrs	r2, r1
 8001222:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8001224:	4a55      	ldr	r2, [pc, #340]	; (800137c <HAL_GPIO_Init+0x2e0>)
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	089b      	lsrs	r3, r3, #2
 800122a:	3302      	adds	r3, #2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	589b      	ldr	r3, [r3, r2]
 8001230:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	2203      	movs	r2, #3
 8001236:	4013      	ands	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	220f      	movs	r2, #15
 800123c:	409a      	lsls	r2, r3
 800123e:	0013      	movs	r3, r2
 8001240:	43da      	mvns	r2, r3
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	23a0      	movs	r3, #160	; 0xa0
 800124c:	05db      	lsls	r3, r3, #23
 800124e:	429a      	cmp	r2, r3
 8001250:	d01f      	beq.n	8001292 <HAL_GPIO_Init+0x1f6>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4a      	ldr	r2, [pc, #296]	; (8001380 <HAL_GPIO_Init+0x2e4>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d019      	beq.n	800128e <HAL_GPIO_Init+0x1f2>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a49      	ldr	r2, [pc, #292]	; (8001384 <HAL_GPIO_Init+0x2e8>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d013      	beq.n	800128a <HAL_GPIO_Init+0x1ee>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a48      	ldr	r2, [pc, #288]	; (8001388 <HAL_GPIO_Init+0x2ec>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d00d      	beq.n	8001286 <HAL_GPIO_Init+0x1ea>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a47      	ldr	r2, [pc, #284]	; (800138c <HAL_GPIO_Init+0x2f0>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d007      	beq.n	8001282 <HAL_GPIO_Init+0x1e6>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a46      	ldr	r2, [pc, #280]	; (8001390 <HAL_GPIO_Init+0x2f4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_GPIO_Init+0x1e2>
 800127a:	2305      	movs	r3, #5
 800127c:	e00a      	b.n	8001294 <HAL_GPIO_Init+0x1f8>
 800127e:	2306      	movs	r3, #6
 8001280:	e008      	b.n	8001294 <HAL_GPIO_Init+0x1f8>
 8001282:	2304      	movs	r3, #4
 8001284:	e006      	b.n	8001294 <HAL_GPIO_Init+0x1f8>
 8001286:	2303      	movs	r3, #3
 8001288:	e004      	b.n	8001294 <HAL_GPIO_Init+0x1f8>
 800128a:	2302      	movs	r3, #2
 800128c:	e002      	b.n	8001294 <HAL_GPIO_Init+0x1f8>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <HAL_GPIO_Init+0x1f8>
 8001292:	2300      	movs	r3, #0
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	2103      	movs	r1, #3
 8001298:	400a      	ands	r2, r1
 800129a:	0092      	lsls	r2, r2, #2
 800129c:	4093      	lsls	r3, r2
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a4:	4935      	ldr	r1, [pc, #212]	; (800137c <HAL_GPIO_Init+0x2e0>)
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	3302      	adds	r3, #2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012b2:	4b38      	ldr	r3, [pc, #224]	; (8001394 <HAL_GPIO_Init+0x2f8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	43da      	mvns	r2, r3
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	025b      	lsls	r3, r3, #9
 80012ca:	4013      	ands	r3, r2
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012d6:	4b2f      	ldr	r3, [pc, #188]	; (8001394 <HAL_GPIO_Init+0x2f8>)
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80012dc:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <HAL_GPIO_Init+0x2f8>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	43da      	mvns	r2, r3
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	029b      	lsls	r3, r3, #10
 80012f4:	4013      	ands	r3, r2
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001300:	4b24      	ldr	r3, [pc, #144]	; (8001394 <HAL_GPIO_Init+0x2f8>)
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <HAL_GPIO_Init+0x2f8>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	43da      	mvns	r2, r3
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	035b      	lsls	r3, r3, #13
 800131e:	4013      	ands	r3, r2
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <HAL_GPIO_Init+0x2f8>)
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001330:	4b18      	ldr	r3, [pc, #96]	; (8001394 <HAL_GPIO_Init+0x2f8>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	43da      	mvns	r2, r3
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	039b      	lsls	r3, r3, #14
 8001348:	4013      	ands	r3, r2
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_GPIO_Init+0x2f8>)
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	3301      	adds	r3, #1
 800135e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	40da      	lsrs	r2, r3
 8001368:	1e13      	subs	r3, r2, #0
 800136a:	d000      	beq.n	800136e <HAL_GPIO_Init+0x2d2>
 800136c:	e6a2      	b.n	80010b4 <HAL_GPIO_Init+0x18>
  }
}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	46bd      	mov	sp, r7
 8001372:	b006      	add	sp, #24
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	40021000 	.word	0x40021000
 800137c:	40010000 	.word	0x40010000
 8001380:	50000400 	.word	0x50000400
 8001384:	50000800 	.word	0x50000800
 8001388:	50000c00 	.word	0x50000c00
 800138c:	50001000 	.word	0x50001000
 8001390:	50001c00 	.word	0x50001c00
 8001394:	40010400 	.word	0x40010400

08001398 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	0008      	movs	r0, r1
 80013a2:	0011      	movs	r1, r2
 80013a4:	1cbb      	adds	r3, r7, #2
 80013a6:	1c02      	adds	r2, r0, #0
 80013a8:	801a      	strh	r2, [r3, #0]
 80013aa:	1c7b      	adds	r3, r7, #1
 80013ac:	1c0a      	adds	r2, r1, #0
 80013ae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80013b0:	1c7b      	adds	r3, r7, #1
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d004      	beq.n	80013c2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b8:	1cbb      	adds	r3, r7, #2
 80013ba:	881a      	ldrh	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80013c0:	e003      	b.n	80013ca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80013c2:	1cbb      	adds	r3, r7, #2
 80013c4:	881a      	ldrh	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	46bd      	mov	sp, r7
 80013ce:	b002      	add	sp, #8
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	000a      	movs	r2, r1
 80013dc:	1cbb      	adds	r3, r7, #2
 80013de:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	695a      	ldr	r2, [r3, #20]
 80013e4:	1cbb      	adds	r3, r7, #2
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	405a      	eors	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	615a      	str	r2, [r3, #20]
}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b002      	add	sp, #8
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d102      	bne.n	800140c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	f000 fb6a 	bl	8001ae0 <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800140c:	4bc7      	ldr	r3, [pc, #796]	; (800172c <HAL_RCC_OscConfig+0x334>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	220c      	movs	r2, #12
 8001412:	4013      	ands	r3, r2
 8001414:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001416:	4bc5      	ldr	r3, [pc, #788]	; (800172c <HAL_RCC_OscConfig+0x334>)
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	2380      	movs	r3, #128	; 0x80
 800141c:	025b      	lsls	r3, r3, #9
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2201      	movs	r2, #1
 8001428:	4013      	ands	r3, r2
 800142a:	d100      	bne.n	800142e <HAL_RCC_OscConfig+0x36>
 800142c:	e07d      	b.n	800152a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	2b08      	cmp	r3, #8
 8001432:	d007      	beq.n	8001444 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	2b0c      	cmp	r3, #12
 8001438:	d112      	bne.n	8001460 <HAL_RCC_OscConfig+0x68>
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	025b      	lsls	r3, r3, #9
 8001440:	429a      	cmp	r2, r3
 8001442:	d10d      	bne.n	8001460 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001444:	4bb9      	ldr	r3, [pc, #740]	; (800172c <HAL_RCC_OscConfig+0x334>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	029b      	lsls	r3, r3, #10
 800144c:	4013      	ands	r3, r2
 800144e:	d100      	bne.n	8001452 <HAL_RCC_OscConfig+0x5a>
 8001450:	e06a      	b.n	8001528 <HAL_RCC_OscConfig+0x130>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d166      	bne.n	8001528 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	f000 fb40 	bl	8001ae0 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	025b      	lsls	r3, r3, #9
 8001468:	429a      	cmp	r2, r3
 800146a:	d107      	bne.n	800147c <HAL_RCC_OscConfig+0x84>
 800146c:	4baf      	ldr	r3, [pc, #700]	; (800172c <HAL_RCC_OscConfig+0x334>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4bae      	ldr	r3, [pc, #696]	; (800172c <HAL_RCC_OscConfig+0x334>)
 8001472:	2180      	movs	r1, #128	; 0x80
 8001474:	0249      	lsls	r1, r1, #9
 8001476:	430a      	orrs	r2, r1
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	e027      	b.n	80014cc <HAL_RCC_OscConfig+0xd4>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	23a0      	movs	r3, #160	; 0xa0
 8001482:	02db      	lsls	r3, r3, #11
 8001484:	429a      	cmp	r2, r3
 8001486:	d10e      	bne.n	80014a6 <HAL_RCC_OscConfig+0xae>
 8001488:	4ba8      	ldr	r3, [pc, #672]	; (800172c <HAL_RCC_OscConfig+0x334>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4ba7      	ldr	r3, [pc, #668]	; (800172c <HAL_RCC_OscConfig+0x334>)
 800148e:	2180      	movs	r1, #128	; 0x80
 8001490:	02c9      	lsls	r1, r1, #11
 8001492:	430a      	orrs	r2, r1
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	4ba5      	ldr	r3, [pc, #660]	; (800172c <HAL_RCC_OscConfig+0x334>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4ba4      	ldr	r3, [pc, #656]	; (800172c <HAL_RCC_OscConfig+0x334>)
 800149c:	2180      	movs	r1, #128	; 0x80
 800149e:	0249      	lsls	r1, r1, #9
 80014a0:	430a      	orrs	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	e012      	b.n	80014cc <HAL_RCC_OscConfig+0xd4>
 80014a6:	4ba1      	ldr	r3, [pc, #644]	; (800172c <HAL_RCC_OscConfig+0x334>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4ba0      	ldr	r3, [pc, #640]	; (800172c <HAL_RCC_OscConfig+0x334>)
 80014ac:	49a0      	ldr	r1, [pc, #640]	; (8001730 <HAL_RCC_OscConfig+0x338>)
 80014ae:	400a      	ands	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	4b9e      	ldr	r3, [pc, #632]	; (800172c <HAL_RCC_OscConfig+0x334>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	025b      	lsls	r3, r3, #9
 80014ba:	4013      	ands	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4b9a      	ldr	r3, [pc, #616]	; (800172c <HAL_RCC_OscConfig+0x334>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b99      	ldr	r3, [pc, #612]	; (800172c <HAL_RCC_OscConfig+0x334>)
 80014c6:	499b      	ldr	r1, [pc, #620]	; (8001734 <HAL_RCC_OscConfig+0x33c>)
 80014c8:	400a      	ands	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d014      	beq.n	80014fe <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fcb6 	bl	8000e44 <HAL_GetTick>
 80014d8:	0003      	movs	r3, r0
 80014da:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014de:	f7ff fcb1 	bl	8000e44 <HAL_GetTick>
 80014e2:	0002      	movs	r2, r0
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b64      	cmp	r3, #100	; 0x64
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e2f7      	b.n	8001ae0 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014f0:	4b8e      	ldr	r3, [pc, #568]	; (800172c <HAL_RCC_OscConfig+0x334>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	2380      	movs	r3, #128	; 0x80
 80014f6:	029b      	lsls	r3, r3, #10
 80014f8:	4013      	ands	r3, r2
 80014fa:	d0f0      	beq.n	80014de <HAL_RCC_OscConfig+0xe6>
 80014fc:	e015      	b.n	800152a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7ff fca1 	bl	8000e44 <HAL_GetTick>
 8001502:	0003      	movs	r3, r0
 8001504:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001508:	f7ff fc9c 	bl	8000e44 <HAL_GetTick>
 800150c:	0002      	movs	r2, r0
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	; 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e2e2      	b.n	8001ae0 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800151a:	4b84      	ldr	r3, [pc, #528]	; (800172c <HAL_RCC_OscConfig+0x334>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	2380      	movs	r3, #128	; 0x80
 8001520:	029b      	lsls	r3, r3, #10
 8001522:	4013      	ands	r3, r2
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x110>
 8001526:	e000      	b.n	800152a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001528:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2202      	movs	r2, #2
 8001530:	4013      	ands	r3, r2
 8001532:	d100      	bne.n	8001536 <HAL_RCC_OscConfig+0x13e>
 8001534:	e098      	b.n	8001668 <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	2220      	movs	r2, #32
 8001540:	4013      	ands	r3, r2
 8001542:	d009      	beq.n	8001558 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001544:	4b79      	ldr	r3, [pc, #484]	; (800172c <HAL_RCC_OscConfig+0x334>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b78      	ldr	r3, [pc, #480]	; (800172c <HAL_RCC_OscConfig+0x334>)
 800154a:	2120      	movs	r1, #32
 800154c:	430a      	orrs	r2, r1
 800154e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	2220      	movs	r2, #32
 8001554:	4393      	bics	r3, r2
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	2b04      	cmp	r3, #4
 800155c:	d005      	beq.n	800156a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	2b0c      	cmp	r3, #12
 8001562:	d13d      	bne.n	80015e0 <HAL_RCC_OscConfig+0x1e8>
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d13a      	bne.n	80015e0 <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800156a:	4b70      	ldr	r3, [pc, #448]	; (800172c <HAL_RCC_OscConfig+0x334>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2204      	movs	r2, #4
 8001570:	4013      	ands	r3, r2
 8001572:	d004      	beq.n	800157e <HAL_RCC_OscConfig+0x186>
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e2b0      	b.n	8001ae0 <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157e:	4b6b      	ldr	r3, [pc, #428]	; (800172c <HAL_RCC_OscConfig+0x334>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	4a6d      	ldr	r2, [pc, #436]	; (8001738 <HAL_RCC_OscConfig+0x340>)
 8001584:	4013      	ands	r3, r2
 8001586:	0019      	movs	r1, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	021a      	lsls	r2, r3, #8
 800158e:	4b67      	ldr	r3, [pc, #412]	; (800172c <HAL_RCC_OscConfig+0x334>)
 8001590:	430a      	orrs	r2, r1
 8001592:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001594:	4b65      	ldr	r3, [pc, #404]	; (800172c <HAL_RCC_OscConfig+0x334>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2209      	movs	r2, #9
 800159a:	4393      	bics	r3, r2
 800159c:	0019      	movs	r1, r3
 800159e:	4b63      	ldr	r3, [pc, #396]	; (800172c <HAL_RCC_OscConfig+0x334>)
 80015a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a2:	430a      	orrs	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015a6:	f000 fbcb 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 80015aa:	0001      	movs	r1, r0
 80015ac:	4b5f      	ldr	r3, [pc, #380]	; (800172c <HAL_RCC_OscConfig+0x334>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	220f      	movs	r2, #15
 80015b4:	4013      	ands	r3, r2
 80015b6:	4a61      	ldr	r2, [pc, #388]	; (800173c <HAL_RCC_OscConfig+0x344>)
 80015b8:	5cd3      	ldrb	r3, [r2, r3]
 80015ba:	000a      	movs	r2, r1
 80015bc:	40da      	lsrs	r2, r3
 80015be:	4b60      	ldr	r3, [pc, #384]	; (8001740 <HAL_RCC_OscConfig+0x348>)
 80015c0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80015c2:	2513      	movs	r5, #19
 80015c4:	197c      	adds	r4, r7, r5
 80015c6:	2000      	movs	r0, #0
 80015c8:	f7ff fc06 	bl	8000dd8 <HAL_InitTick>
 80015cc:	0003      	movs	r3, r0
 80015ce:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80015d0:	197b      	adds	r3, r7, r5
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d047      	beq.n	8001668 <HAL_RCC_OscConfig+0x270>
      {
        return status;
 80015d8:	2313      	movs	r3, #19
 80015da:	18fb      	adds	r3, r7, r3
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	e27f      	b.n	8001ae0 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d027      	beq.n	8001636 <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80015e6:	4b51      	ldr	r3, [pc, #324]	; (800172c <HAL_RCC_OscConfig+0x334>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2209      	movs	r2, #9
 80015ec:	4393      	bics	r3, r2
 80015ee:	0019      	movs	r1, r3
 80015f0:	4b4e      	ldr	r3, [pc, #312]	; (800172c <HAL_RCC_OscConfig+0x334>)
 80015f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f4:	430a      	orrs	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fc24 	bl	8000e44 <HAL_GetTick>
 80015fc:	0003      	movs	r3, r0
 80015fe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001602:	f7ff fc1f 	bl	8000e44 <HAL_GetTick>
 8001606:	0002      	movs	r2, r0
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e265      	b.n	8001ae0 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001614:	4b45      	ldr	r3, [pc, #276]	; (800172c <HAL_RCC_OscConfig+0x334>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2204      	movs	r2, #4
 800161a:	4013      	ands	r3, r2
 800161c:	d0f1      	beq.n	8001602 <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161e:	4b43      	ldr	r3, [pc, #268]	; (800172c <HAL_RCC_OscConfig+0x334>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	4a45      	ldr	r2, [pc, #276]	; (8001738 <HAL_RCC_OscConfig+0x340>)
 8001624:	4013      	ands	r3, r2
 8001626:	0019      	movs	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	021a      	lsls	r2, r3, #8
 800162e:	4b3f      	ldr	r3, [pc, #252]	; (800172c <HAL_RCC_OscConfig+0x334>)
 8001630:	430a      	orrs	r2, r1
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	e018      	b.n	8001668 <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001636:	4b3d      	ldr	r3, [pc, #244]	; (800172c <HAL_RCC_OscConfig+0x334>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	4b3c      	ldr	r3, [pc, #240]	; (800172c <HAL_RCC_OscConfig+0x334>)
 800163c:	2101      	movs	r1, #1
 800163e:	438a      	bics	r2, r1
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff fbff 	bl	8000e44 <HAL_GetTick>
 8001646:	0003      	movs	r3, r0
 8001648:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800164c:	f7ff fbfa 	bl	8000e44 <HAL_GetTick>
 8001650:	0002      	movs	r2, r0
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e240      	b.n	8001ae0 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800165e:	4b33      	ldr	r3, [pc, #204]	; (800172c <HAL_RCC_OscConfig+0x334>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2204      	movs	r2, #4
 8001664:	4013      	ands	r3, r2
 8001666:	d1f1      	bne.n	800164c <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2210      	movs	r2, #16
 800166e:	4013      	ands	r3, r2
 8001670:	d100      	bne.n	8001674 <HAL_RCC_OscConfig+0x27c>
 8001672:	e09e      	b.n	80017b2 <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d13f      	bne.n	80016fa <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800167a:	4b2c      	ldr	r3, [pc, #176]	; (800172c <HAL_RCC_OscConfig+0x334>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4013      	ands	r3, r2
 8001684:	d005      	beq.n	8001692 <HAL_RCC_OscConfig+0x29a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e226      	b.n	8001ae0 <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001692:	4b26      	ldr	r3, [pc, #152]	; (800172c <HAL_RCC_OscConfig+0x334>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	4a2b      	ldr	r2, [pc, #172]	; (8001744 <HAL_RCC_OscConfig+0x34c>)
 8001698:	4013      	ands	r3, r2
 800169a:	0019      	movs	r1, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a1a      	ldr	r2, [r3, #32]
 80016a0:	4b22      	ldr	r3, [pc, #136]	; (800172c <HAL_RCC_OscConfig+0x334>)
 80016a2:	430a      	orrs	r2, r1
 80016a4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016a6:	4b21      	ldr	r3, [pc, #132]	; (800172c <HAL_RCC_OscConfig+0x334>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	021b      	lsls	r3, r3, #8
 80016ac:	0a19      	lsrs	r1, r3, #8
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	061a      	lsls	r2, r3, #24
 80016b4:	4b1d      	ldr	r3, [pc, #116]	; (800172c <HAL_RCC_OscConfig+0x334>)
 80016b6:	430a      	orrs	r2, r1
 80016b8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	0b5b      	lsrs	r3, r3, #13
 80016c0:	3301      	adds	r3, #1
 80016c2:	2280      	movs	r2, #128	; 0x80
 80016c4:	0212      	lsls	r2, r2, #8
 80016c6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80016c8:	4b18      	ldr	r3, [pc, #96]	; (800172c <HAL_RCC_OscConfig+0x334>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	091b      	lsrs	r3, r3, #4
 80016ce:	210f      	movs	r1, #15
 80016d0:	400b      	ands	r3, r1
 80016d2:	491a      	ldr	r1, [pc, #104]	; (800173c <HAL_RCC_OscConfig+0x344>)
 80016d4:	5ccb      	ldrb	r3, [r1, r3]
 80016d6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016d8:	4b19      	ldr	r3, [pc, #100]	; (8001740 <HAL_RCC_OscConfig+0x348>)
 80016da:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80016dc:	2513      	movs	r5, #19
 80016de:	197c      	adds	r4, r7, r5
 80016e0:	2000      	movs	r0, #0
 80016e2:	f7ff fb79 	bl	8000dd8 <HAL_InitTick>
 80016e6:	0003      	movs	r3, r0
 80016e8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80016ea:	197b      	adds	r3, r7, r5
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d05f      	beq.n	80017b2 <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 80016f2:	2313      	movs	r3, #19
 80016f4:	18fb      	adds	r3, r7, r3
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	e1f2      	b.n	8001ae0 <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d03d      	beq.n	800177e <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_RCC_OscConfig+0x334>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_RCC_OscConfig+0x334>)
 8001708:	2180      	movs	r1, #128	; 0x80
 800170a:	0049      	lsls	r1, r1, #1
 800170c:	430a      	orrs	r2, r1
 800170e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff fb98 	bl	8000e44 <HAL_GetTick>
 8001714:	0003      	movs	r3, r0
 8001716:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001718:	e016      	b.n	8001748 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800171a:	f7ff fb93 	bl	8000e44 <HAL_GetTick>
 800171e:	0002      	movs	r2, r0
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d90f      	bls.n	8001748 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e1d9      	b.n	8001ae0 <HAL_RCC_OscConfig+0x6e8>
 800172c:	40021000 	.word	0x40021000
 8001730:	fffeffff 	.word	0xfffeffff
 8001734:	fffbffff 	.word	0xfffbffff
 8001738:	ffffe0ff 	.word	0xffffe0ff
 800173c:	080039f8 	.word	0x080039f8
 8001740:	20000004 	.word	0x20000004
 8001744:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001748:	4bca      	ldr	r3, [pc, #808]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4013      	ands	r3, r2
 8001752:	d0e2      	beq.n	800171a <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001754:	4bc7      	ldr	r3, [pc, #796]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	4ac7      	ldr	r2, [pc, #796]	; (8001a78 <HAL_RCC_OscConfig+0x680>)
 800175a:	4013      	ands	r3, r2
 800175c:	0019      	movs	r1, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a1a      	ldr	r2, [r3, #32]
 8001762:	4bc4      	ldr	r3, [pc, #784]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 8001764:	430a      	orrs	r2, r1
 8001766:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001768:	4bc2      	ldr	r3, [pc, #776]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	021b      	lsls	r3, r3, #8
 800176e:	0a19      	lsrs	r1, r3, #8
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	061a      	lsls	r2, r3, #24
 8001776:	4bbf      	ldr	r3, [pc, #764]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 8001778:	430a      	orrs	r2, r1
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	e019      	b.n	80017b2 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800177e:	4bbd      	ldr	r3, [pc, #756]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4bbc      	ldr	r3, [pc, #752]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 8001784:	49bd      	ldr	r1, [pc, #756]	; (8001a7c <HAL_RCC_OscConfig+0x684>)
 8001786:	400a      	ands	r2, r1
 8001788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178a:	f7ff fb5b 	bl	8000e44 <HAL_GetTick>
 800178e:	0003      	movs	r3, r0
 8001790:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001794:	f7ff fb56 	bl	8000e44 <HAL_GetTick>
 8001798:	0002      	movs	r2, r0
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e19c      	b.n	8001ae0 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80017a6:	4bb3      	ldr	r3, [pc, #716]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4013      	ands	r3, r2
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2208      	movs	r2, #8
 80017b8:	4013      	ands	r3, r2
 80017ba:	d036      	beq.n	800182a <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d019      	beq.n	80017f8 <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c4:	4bab      	ldr	r3, [pc, #684]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 80017c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017c8:	4baa      	ldr	r3, [pc, #680]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 80017ca:	2101      	movs	r1, #1
 80017cc:	430a      	orrs	r2, r1
 80017ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d0:	f7ff fb38 	bl	8000e44 <HAL_GetTick>
 80017d4:	0003      	movs	r3, r0
 80017d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017da:	f7ff fb33 	bl	8000e44 <HAL_GetTick>
 80017de:	0002      	movs	r2, r0
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e179      	b.n	8001ae0 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017ec:	4ba1      	ldr	r3, [pc, #644]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 80017ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017f0:	2202      	movs	r2, #2
 80017f2:	4013      	ands	r3, r2
 80017f4:	d0f1      	beq.n	80017da <HAL_RCC_OscConfig+0x3e2>
 80017f6:	e018      	b.n	800182a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f8:	4b9e      	ldr	r3, [pc, #632]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 80017fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017fc:	4b9d      	ldr	r3, [pc, #628]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 80017fe:	2101      	movs	r1, #1
 8001800:	438a      	bics	r2, r1
 8001802:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001804:	f7ff fb1e 	bl	8000e44 <HAL_GetTick>
 8001808:	0003      	movs	r3, r0
 800180a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800180e:	f7ff fb19 	bl	8000e44 <HAL_GetTick>
 8001812:	0002      	movs	r2, r0
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e15f      	b.n	8001ae0 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001820:	4b94      	ldr	r3, [pc, #592]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 8001822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001824:	2202      	movs	r2, #2
 8001826:	4013      	ands	r3, r2
 8001828:	d1f1      	bne.n	800180e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2204      	movs	r2, #4
 8001830:	4013      	ands	r3, r2
 8001832:	d100      	bne.n	8001836 <HAL_RCC_OscConfig+0x43e>
 8001834:	e0af      	b.n	8001996 <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001836:	2323      	movs	r3, #35	; 0x23
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800183e:	4b8d      	ldr	r3, [pc, #564]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 8001840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	055b      	lsls	r3, r3, #21
 8001846:	4013      	ands	r3, r2
 8001848:	d10a      	bne.n	8001860 <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	4b8a      	ldr	r3, [pc, #552]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 800184c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800184e:	4b89      	ldr	r3, [pc, #548]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 8001850:	2180      	movs	r1, #128	; 0x80
 8001852:	0549      	lsls	r1, r1, #21
 8001854:	430a      	orrs	r2, r1
 8001856:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001858:	2323      	movs	r3, #35	; 0x23
 800185a:	18fb      	adds	r3, r7, r3
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001860:	4b87      	ldr	r3, [pc, #540]	; (8001a80 <HAL_RCC_OscConfig+0x688>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4013      	ands	r3, r2
 800186a:	d11a      	bne.n	80018a2 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800186c:	4b84      	ldr	r3, [pc, #528]	; (8001a80 <HAL_RCC_OscConfig+0x688>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b83      	ldr	r3, [pc, #524]	; (8001a80 <HAL_RCC_OscConfig+0x688>)
 8001872:	2180      	movs	r1, #128	; 0x80
 8001874:	0049      	lsls	r1, r1, #1
 8001876:	430a      	orrs	r2, r1
 8001878:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187a:	f7ff fae3 	bl	8000e44 <HAL_GetTick>
 800187e:	0003      	movs	r3, r0
 8001880:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001884:	f7ff fade 	bl	8000e44 <HAL_GetTick>
 8001888:	0002      	movs	r2, r0
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b64      	cmp	r3, #100	; 0x64
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e124      	b.n	8001ae0 <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001896:	4b7a      	ldr	r3, [pc, #488]	; (8001a80 <HAL_RCC_OscConfig+0x688>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4013      	ands	r3, r2
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d107      	bne.n	80018be <HAL_RCC_OscConfig+0x4c6>
 80018ae:	4b71      	ldr	r3, [pc, #452]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 80018b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018b2:	4b70      	ldr	r3, [pc, #448]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 80018b4:	2180      	movs	r1, #128	; 0x80
 80018b6:	0049      	lsls	r1, r1, #1
 80018b8:	430a      	orrs	r2, r1
 80018ba:	651a      	str	r2, [r3, #80]	; 0x50
 80018bc:	e031      	b.n	8001922 <HAL_RCC_OscConfig+0x52a>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10c      	bne.n	80018e0 <HAL_RCC_OscConfig+0x4e8>
 80018c6:	4b6b      	ldr	r3, [pc, #428]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 80018c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018ca:	4b6a      	ldr	r3, [pc, #424]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 80018cc:	496b      	ldr	r1, [pc, #428]	; (8001a7c <HAL_RCC_OscConfig+0x684>)
 80018ce:	400a      	ands	r2, r1
 80018d0:	651a      	str	r2, [r3, #80]	; 0x50
 80018d2:	4b68      	ldr	r3, [pc, #416]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 80018d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018d6:	4b67      	ldr	r3, [pc, #412]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 80018d8:	496a      	ldr	r1, [pc, #424]	; (8001a84 <HAL_RCC_OscConfig+0x68c>)
 80018da:	400a      	ands	r2, r1
 80018dc:	651a      	str	r2, [r3, #80]	; 0x50
 80018de:	e020      	b.n	8001922 <HAL_RCC_OscConfig+0x52a>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	23a0      	movs	r3, #160	; 0xa0
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d10e      	bne.n	800190a <HAL_RCC_OscConfig+0x512>
 80018ec:	4b61      	ldr	r3, [pc, #388]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 80018ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018f0:	4b60      	ldr	r3, [pc, #384]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 80018f2:	2180      	movs	r1, #128	; 0x80
 80018f4:	00c9      	lsls	r1, r1, #3
 80018f6:	430a      	orrs	r2, r1
 80018f8:	651a      	str	r2, [r3, #80]	; 0x50
 80018fa:	4b5e      	ldr	r3, [pc, #376]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 80018fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018fe:	4b5d      	ldr	r3, [pc, #372]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 8001900:	2180      	movs	r1, #128	; 0x80
 8001902:	0049      	lsls	r1, r1, #1
 8001904:	430a      	orrs	r2, r1
 8001906:	651a      	str	r2, [r3, #80]	; 0x50
 8001908:	e00b      	b.n	8001922 <HAL_RCC_OscConfig+0x52a>
 800190a:	4b5a      	ldr	r3, [pc, #360]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 800190c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800190e:	4b59      	ldr	r3, [pc, #356]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 8001910:	495a      	ldr	r1, [pc, #360]	; (8001a7c <HAL_RCC_OscConfig+0x684>)
 8001912:	400a      	ands	r2, r1
 8001914:	651a      	str	r2, [r3, #80]	; 0x50
 8001916:	4b57      	ldr	r3, [pc, #348]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 8001918:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800191a:	4b56      	ldr	r3, [pc, #344]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 800191c:	4959      	ldr	r1, [pc, #356]	; (8001a84 <HAL_RCC_OscConfig+0x68c>)
 800191e:	400a      	ands	r2, r1
 8001920:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d015      	beq.n	8001956 <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192a:	f7ff fa8b 	bl	8000e44 <HAL_GetTick>
 800192e:	0003      	movs	r3, r0
 8001930:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001932:	e009      	b.n	8001948 <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001934:	f7ff fa86 	bl	8000e44 <HAL_GetTick>
 8001938:	0002      	movs	r2, r0
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	4a52      	ldr	r2, [pc, #328]	; (8001a88 <HAL_RCC_OscConfig+0x690>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e0cb      	b.n	8001ae0 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001948:	4b4a      	ldr	r3, [pc, #296]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 800194a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4013      	ands	r3, r2
 8001952:	d0ef      	beq.n	8001934 <HAL_RCC_OscConfig+0x53c>
 8001954:	e014      	b.n	8001980 <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001956:	f7ff fa75 	bl	8000e44 <HAL_GetTick>
 800195a:	0003      	movs	r3, r0
 800195c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800195e:	e009      	b.n	8001974 <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001960:	f7ff fa70 	bl	8000e44 <HAL_GetTick>
 8001964:	0002      	movs	r2, r0
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	4a47      	ldr	r2, [pc, #284]	; (8001a88 <HAL_RCC_OscConfig+0x690>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e0b5      	b.n	8001ae0 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001974:	4b3f      	ldr	r3, [pc, #252]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 8001976:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4013      	ands	r3, r2
 800197e:	d1ef      	bne.n	8001960 <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001980:	2323      	movs	r3, #35	; 0x23
 8001982:	18fb      	adds	r3, r7, r3
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d105      	bne.n	8001996 <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800198a:	4b3a      	ldr	r3, [pc, #232]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 800198c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800198e:	4b39      	ldr	r3, [pc, #228]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 8001990:	493e      	ldr	r1, [pc, #248]	; (8001a8c <HAL_RCC_OscConfig+0x694>)
 8001992:	400a      	ands	r2, r1
 8001994:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	2b00      	cmp	r3, #0
 800199c:	d100      	bne.n	80019a0 <HAL_RCC_OscConfig+0x5a8>
 800199e:	e09e      	b.n	8001ade <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	2b0c      	cmp	r3, #12
 80019a4:	d100      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5b0>
 80019a6:	e077      	b.n	8001a98 <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d145      	bne.n	8001a3c <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b0:	4b30      	ldr	r3, [pc, #192]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b2f      	ldr	r3, [pc, #188]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 80019b6:	4936      	ldr	r1, [pc, #216]	; (8001a90 <HAL_RCC_OscConfig+0x698>)
 80019b8:	400a      	ands	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019bc:	f7ff fa42 	bl	8000e44 <HAL_GetTick>
 80019c0:	0003      	movs	r3, r0
 80019c2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c6:	f7ff fa3d 	bl	8000e44 <HAL_GetTick>
 80019ca:	0002      	movs	r2, r0
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e083      	b.n	8001ae0 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019d8:	4b26      	ldr	r3, [pc, #152]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	049b      	lsls	r3, r3, #18
 80019e0:	4013      	ands	r3, r2
 80019e2:	d1f0      	bne.n	80019c6 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019e4:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	4a2a      	ldr	r2, [pc, #168]	; (8001a94 <HAL_RCC_OscConfig+0x69c>)
 80019ea:	4013      	ands	r3, r2
 80019ec:	0019      	movs	r1, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fc:	431a      	orrs	r2, r3
 80019fe:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 8001a00:	430a      	orrs	r2, r1
 8001a02:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a04:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 8001a0a:	2180      	movs	r1, #128	; 0x80
 8001a0c:	0449      	lsls	r1, r1, #17
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a12:	f7ff fa17 	bl	8000e44 <HAL_GetTick>
 8001a16:	0003      	movs	r3, r0
 8001a18:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a1c:	f7ff fa12 	bl	8000e44 <HAL_GetTick>
 8001a20:	0002      	movs	r2, r0
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e058      	b.n	8001ae0 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	049b      	lsls	r3, r3, #18
 8001a36:	4013      	ands	r3, r2
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0x624>
 8001a3a:	e050      	b.n	8001ade <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3c:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 8001a42:	4913      	ldr	r1, [pc, #76]	; (8001a90 <HAL_RCC_OscConfig+0x698>)
 8001a44:	400a      	ands	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff f9fc 	bl	8000e44 <HAL_GetTick>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a52:	f7ff f9f7 	bl	8000e44 <HAL_GetTick>
 8001a56:	0002      	movs	r2, r0
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e03d      	b.n	8001ae0 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <HAL_RCC_OscConfig+0x67c>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	049b      	lsls	r3, r3, #18
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d1f0      	bne.n	8001a52 <HAL_RCC_OscConfig+0x65a>
 8001a70:	e035      	b.n	8001ade <HAL_RCC_OscConfig+0x6e6>
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	40021000 	.word	0x40021000
 8001a78:	ffff1fff 	.word	0xffff1fff
 8001a7c:	fffffeff 	.word	0xfffffeff
 8001a80:	40007000 	.word	0x40007000
 8001a84:	fffffbff 	.word	0xfffffbff
 8001a88:	00001388 	.word	0x00001388
 8001a8c:	efffffff 	.word	0xefffffff
 8001a90:	feffffff 	.word	0xfeffffff
 8001a94:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e01d      	b.n	8001ae0 <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001aa4:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <HAL_RCC_OscConfig+0x6f0>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	025b      	lsls	r3, r3, #9
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d10f      	bne.n	8001ada <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	23f0      	movs	r3, #240	; 0xf0
 8001abe:	039b      	lsls	r3, r3, #14
 8001ac0:	401a      	ands	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d107      	bne.n	8001ada <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	23c0      	movs	r3, #192	; 0xc0
 8001ace:	041b      	lsls	r3, r3, #16
 8001ad0:	401a      	ands	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d001      	beq.n	8001ade <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b00a      	add	sp, #40	; 0x28
 8001ae6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae8:	40021000 	.word	0x40021000

08001aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aec:	b5b0      	push	{r4, r5, r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e10d      	b.n	8001d1c <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b00:	4b88      	ldr	r3, [pc, #544]	; (8001d24 <HAL_RCC_ClockConfig+0x238>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2201      	movs	r2, #1
 8001b06:	4013      	ands	r3, r2
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d911      	bls.n	8001b32 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0e:	4b85      	ldr	r3, [pc, #532]	; (8001d24 <HAL_RCC_ClockConfig+0x238>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2201      	movs	r2, #1
 8001b14:	4393      	bics	r3, r2
 8001b16:	0019      	movs	r1, r3
 8001b18:	4b82      	ldr	r3, [pc, #520]	; (8001d24 <HAL_RCC_ClockConfig+0x238>)
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b20:	4b80      	ldr	r3, [pc, #512]	; (8001d24 <HAL_RCC_ClockConfig+0x238>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2201      	movs	r2, #1
 8001b26:	4013      	ands	r3, r2
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d001      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e0f4      	b.n	8001d1c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2202      	movs	r2, #2
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d009      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b3c:	4b7a      	ldr	r3, [pc, #488]	; (8001d28 <HAL_RCC_ClockConfig+0x23c>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	22f0      	movs	r2, #240	; 0xf0
 8001b42:	4393      	bics	r3, r2
 8001b44:	0019      	movs	r1, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	4b77      	ldr	r3, [pc, #476]	; (8001d28 <HAL_RCC_ClockConfig+0x23c>)
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2201      	movs	r2, #1
 8001b56:	4013      	ands	r3, r2
 8001b58:	d100      	bne.n	8001b5c <HAL_RCC_ClockConfig+0x70>
 8001b5a:	e089      	b.n	8001c70 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d107      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b64:	4b70      	ldr	r3, [pc, #448]	; (8001d28 <HAL_RCC_ClockConfig+0x23c>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	029b      	lsls	r3, r3, #10
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d120      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0d3      	b.n	8001d1c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d107      	bne.n	8001b8c <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b7c:	4b6a      	ldr	r3, [pc, #424]	; (8001d28 <HAL_RCC_ClockConfig+0x23c>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	049b      	lsls	r3, r3, #18
 8001b84:	4013      	ands	r3, r2
 8001b86:	d114      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0c7      	b.n	8001d1c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d106      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b94:	4b64      	ldr	r3, [pc, #400]	; (8001d28 <HAL_RCC_ClockConfig+0x23c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2204      	movs	r2, #4
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d109      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e0bc      	b.n	8001d1c <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ba2:	4b61      	ldr	r3, [pc, #388]	; (8001d28 <HAL_RCC_ClockConfig+0x23c>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4013      	ands	r3, r2
 8001bac:	d101      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e0b4      	b.n	8001d1c <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bb2:	4b5d      	ldr	r3, [pc, #372]	; (8001d28 <HAL_RCC_ClockConfig+0x23c>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	4393      	bics	r3, r2
 8001bba:	0019      	movs	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	4b59      	ldr	r3, [pc, #356]	; (8001d28 <HAL_RCC_ClockConfig+0x23c>)
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bc6:	f7ff f93d 	bl	8000e44 <HAL_GetTick>
 8001bca:	0003      	movs	r3, r0
 8001bcc:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d111      	bne.n	8001bfa <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bd6:	e009      	b.n	8001bec <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd8:	f7ff f934 	bl	8000e44 <HAL_GetTick>
 8001bdc:	0002      	movs	r2, r0
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	4a52      	ldr	r2, [pc, #328]	; (8001d2c <HAL_RCC_ClockConfig+0x240>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e097      	b.n	8001d1c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bec:	4b4e      	ldr	r3, [pc, #312]	; (8001d28 <HAL_RCC_ClockConfig+0x23c>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	220c      	movs	r2, #12
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d1ef      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0xec>
 8001bf8:	e03a      	b.n	8001c70 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d111      	bne.n	8001c26 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c02:	e009      	b.n	8001c18 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c04:	f7ff f91e 	bl	8000e44 <HAL_GetTick>
 8001c08:	0002      	movs	r2, r0
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	4a47      	ldr	r2, [pc, #284]	; (8001d2c <HAL_RCC_ClockConfig+0x240>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e081      	b.n	8001d1c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c18:	4b43      	ldr	r3, [pc, #268]	; (8001d28 <HAL_RCC_ClockConfig+0x23c>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	220c      	movs	r2, #12
 8001c1e:	4013      	ands	r3, r2
 8001c20:	2b0c      	cmp	r3, #12
 8001c22:	d1ef      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x118>
 8001c24:	e024      	b.n	8001c70 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d11b      	bne.n	8001c66 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c2e:	e009      	b.n	8001c44 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c30:	f7ff f908 	bl	8000e44 <HAL_GetTick>
 8001c34:	0002      	movs	r2, r0
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	4a3c      	ldr	r2, [pc, #240]	; (8001d2c <HAL_RCC_ClockConfig+0x240>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e06b      	b.n	8001d1c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c44:	4b38      	ldr	r3, [pc, #224]	; (8001d28 <HAL_RCC_ClockConfig+0x23c>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	220c      	movs	r2, #12
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d1ef      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x144>
 8001c50:	e00e      	b.n	8001c70 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c52:	f7ff f8f7 	bl	8000e44 <HAL_GetTick>
 8001c56:	0002      	movs	r2, r0
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	4a33      	ldr	r2, [pc, #204]	; (8001d2c <HAL_RCC_ClockConfig+0x240>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e05a      	b.n	8001d1c <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c66:	4b30      	ldr	r3, [pc, #192]	; (8001d28 <HAL_RCC_ClockConfig+0x23c>)
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	220c      	movs	r2, #12
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d1f0      	bne.n	8001c52 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c70:	4b2c      	ldr	r3, [pc, #176]	; (8001d24 <HAL_RCC_ClockConfig+0x238>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2201      	movs	r2, #1
 8001c76:	4013      	ands	r3, r2
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d211      	bcs.n	8001ca2 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7e:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <HAL_RCC_ClockConfig+0x238>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2201      	movs	r2, #1
 8001c84:	4393      	bics	r3, r2
 8001c86:	0019      	movs	r1, r3
 8001c88:	4b26      	ldr	r3, [pc, #152]	; (8001d24 <HAL_RCC_ClockConfig+0x238>)
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c90:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <HAL_RCC_ClockConfig+0x238>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2201      	movs	r2, #1
 8001c96:	4013      	ands	r3, r2
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d001      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e03c      	b.n	8001d1c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d009      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cac:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <HAL_RCC_ClockConfig+0x23c>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	4a1f      	ldr	r2, [pc, #124]	; (8001d30 <HAL_RCC_ClockConfig+0x244>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <HAL_RCC_ClockConfig+0x23c>)
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d00a      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cca:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <HAL_RCC_ClockConfig+0x23c>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	4a19      	ldr	r2, [pc, #100]	; (8001d34 <HAL_RCC_ClockConfig+0x248>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	00da      	lsls	r2, r3, #3
 8001cda:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <HAL_RCC_ClockConfig+0x23c>)
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ce0:	f000 f82e 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8001ce4:	0001      	movs	r1, r0
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <HAL_RCC_ClockConfig+0x23c>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	091b      	lsrs	r3, r3, #4
 8001cec:	220f      	movs	r2, #15
 8001cee:	4013      	ands	r3, r2
 8001cf0:	4a11      	ldr	r2, [pc, #68]	; (8001d38 <HAL_RCC_ClockConfig+0x24c>)
 8001cf2:	5cd3      	ldrb	r3, [r2, r3]
 8001cf4:	000a      	movs	r2, r1
 8001cf6:	40da      	lsrs	r2, r3
 8001cf8:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <HAL_RCC_ClockConfig+0x250>)
 8001cfa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001cfc:	250b      	movs	r5, #11
 8001cfe:	197c      	adds	r4, r7, r5
 8001d00:	2000      	movs	r0, #0
 8001d02:	f7ff f869 	bl	8000dd8 <HAL_InitTick>
 8001d06:	0003      	movs	r3, r0
 8001d08:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001d0a:	197b      	adds	r3, r7, r5
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8001d12:	230b      	movs	r3, #11
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	e000      	b.n	8001d1c <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b004      	add	sp, #16
 8001d22:	bdb0      	pop	{r4, r5, r7, pc}
 8001d24:	40022000 	.word	0x40022000
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	00001388 	.word	0x00001388
 8001d30:	fffff8ff 	.word	0xfffff8ff
 8001d34:	ffffc7ff 	.word	0xffffc7ff
 8001d38:	080039f8 	.word	0x080039f8
 8001d3c:	20000004 	.word	0x20000004

08001d40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001d46:	4b3b      	ldr	r3, [pc, #236]	; (8001e34 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	220c      	movs	r2, #12
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d00e      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0x34>
 8001d56:	2b0c      	cmp	r3, #12
 8001d58:	d00f      	beq.n	8001d7a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d157      	bne.n	8001e0e <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d5e:	4b35      	ldr	r3, [pc, #212]	; (8001e34 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2210      	movs	r2, #16
 8001d64:	4013      	ands	r3, r2
 8001d66:	d002      	beq.n	8001d6e <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001d68:	4b33      	ldr	r3, [pc, #204]	; (8001e38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d6a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001d6c:	e05d      	b.n	8001e2a <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8001d6e:	4b33      	ldr	r3, [pc, #204]	; (8001e3c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d70:	613b      	str	r3, [r7, #16]
      break;
 8001d72:	e05a      	b.n	8001e2a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d74:	4b31      	ldr	r3, [pc, #196]	; (8001e3c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d76:	613b      	str	r3, [r7, #16]
      break;
 8001d78:	e057      	b.n	8001e2a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	0c9b      	lsrs	r3, r3, #18
 8001d7e:	220f      	movs	r2, #15
 8001d80:	4013      	ands	r3, r2
 8001d82:	4a2f      	ldr	r2, [pc, #188]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x100>)
 8001d84:	5cd3      	ldrb	r3, [r2, r3]
 8001d86:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	0d9b      	lsrs	r3, r3, #22
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	4013      	ands	r3, r2
 8001d90:	3301      	adds	r3, #1
 8001d92:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d94:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	025b      	lsls	r3, r3, #9
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d00f      	beq.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001da0:	68b9      	ldr	r1, [r7, #8]
 8001da2:	000a      	movs	r2, r1
 8001da4:	0152      	lsls	r2, r2, #5
 8001da6:	1a52      	subs	r2, r2, r1
 8001da8:	0193      	lsls	r3, r2, #6
 8001daa:	1a9b      	subs	r3, r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	185b      	adds	r3, r3, r1
 8001db0:	029b      	lsls	r3, r3, #10
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	0018      	movs	r0, r3
 8001db6:	f7fe f9a7 	bl	8000108 <__udivsi3>
 8001dba:	0003      	movs	r3, r0
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	e023      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001dc0:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2210      	movs	r2, #16
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d00f      	beq.n	8001dea <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001dca:	68b9      	ldr	r1, [r7, #8]
 8001dcc:	000a      	movs	r2, r1
 8001dce:	0152      	lsls	r2, r2, #5
 8001dd0:	1a52      	subs	r2, r2, r1
 8001dd2:	0193      	lsls	r3, r2, #6
 8001dd4:	1a9b      	subs	r3, r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	185b      	adds	r3, r3, r1
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	0018      	movs	r0, r3
 8001de0:	f7fe f992 	bl	8000108 <__udivsi3>
 8001de4:	0003      	movs	r3, r0
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	e00e      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8001dea:	68b9      	ldr	r1, [r7, #8]
 8001dec:	000a      	movs	r2, r1
 8001dee:	0152      	lsls	r2, r2, #5
 8001df0:	1a52      	subs	r2, r2, r1
 8001df2:	0193      	lsls	r3, r2, #6
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	185b      	adds	r3, r3, r1
 8001dfa:	029b      	lsls	r3, r3, #10
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f7fe f982 	bl	8000108 <__udivsi3>
 8001e04:	0003      	movs	r3, r0
 8001e06:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	613b      	str	r3, [r7, #16]
      break;
 8001e0c:	e00d      	b.n	8001e2a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	0b5b      	lsrs	r3, r3, #13
 8001e14:	2207      	movs	r2, #7
 8001e16:	4013      	ands	r3, r2
 8001e18:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	2280      	movs	r2, #128	; 0x80
 8001e20:	0212      	lsls	r2, r2, #8
 8001e22:	409a      	lsls	r2, r3
 8001e24:	0013      	movs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
      break;
 8001e28:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e2a:	693b      	ldr	r3, [r7, #16]
}
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	b006      	add	sp, #24
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40021000 	.word	0x40021000
 8001e38:	003d0900 	.word	0x003d0900
 8001e3c:	00f42400 	.word	0x00f42400
 8001e40:	08003a10 	.word	0x08003a10

08001e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e48:	4b02      	ldr	r3, [pc, #8]	; (8001e54 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	20000004 	.word	0x20000004

08001e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e5c:	f7ff fff2 	bl	8001e44 <HAL_RCC_GetHCLKFreq>
 8001e60:	0001      	movs	r1, r0
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	0a1b      	lsrs	r3, r3, #8
 8001e68:	2207      	movs	r2, #7
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	4a04      	ldr	r2, [pc, #16]	; (8001e80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e6e:	5cd3      	ldrb	r3, [r2, r3]
 8001e70:	40d9      	lsrs	r1, r3
 8001e72:	000b      	movs	r3, r1
}
 8001e74:	0018      	movs	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	08003a08 	.word	0x08003a08

08001e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e88:	f7ff ffdc 	bl	8001e44 <HAL_RCC_GetHCLKFreq>
 8001e8c:	0001      	movs	r1, r0
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	0adb      	lsrs	r3, r3, #11
 8001e94:	2207      	movs	r2, #7
 8001e96:	4013      	ands	r3, r2
 8001e98:	4a04      	ldr	r2, [pc, #16]	; (8001eac <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e9a:	5cd3      	ldrb	r3, [r2, r3]
 8001e9c:	40d9      	lsrs	r1, r3
 8001e9e:	000b      	movs	r3, r1
}
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	08003a08 	.word	0x08003a08

08001eb0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d100      	bne.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8001ec2:	e0c7      	b.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8001ec4:	2317      	movs	r3, #23
 8001ec6:	18fb      	adds	r3, r7, r3
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ecc:	4b91      	ldr	r3, [pc, #580]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	055b      	lsls	r3, r3, #21
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d10a      	bne.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed8:	4b8e      	ldr	r3, [pc, #568]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001edc:	4b8d      	ldr	r3, [pc, #564]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ede:	2180      	movs	r1, #128	; 0x80
 8001ee0:	0549      	lsls	r1, r1, #21
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001ee6:	2317      	movs	r3, #23
 8001ee8:	18fb      	adds	r3, r7, r3
 8001eea:	2201      	movs	r2, #1
 8001eec:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eee:	4b8a      	ldr	r3, [pc, #552]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d11a      	bne.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001efa:	4b87      	ldr	r3, [pc, #540]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	4b86      	ldr	r3, [pc, #536]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001f00:	2180      	movs	r1, #128	; 0x80
 8001f02:	0049      	lsls	r1, r1, #1
 8001f04:	430a      	orrs	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f08:	f7fe ff9c 	bl	8000e44 <HAL_GetTick>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f10:	e008      	b.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f12:	f7fe ff97 	bl	8000e44 <HAL_GetTick>
 8001f16:	0002      	movs	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b64      	cmp	r3, #100	; 0x64
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e0f3      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x25c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f24:	4b7c      	ldr	r3, [pc, #496]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d0f0      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001f30:	4b78      	ldr	r3, [pc, #480]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	23c0      	movs	r3, #192	; 0xc0
 8001f36:	039b      	lsls	r3, r3, #14
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	23c0      	movs	r3, #192	; 0xc0
 8001f42:	039b      	lsls	r3, r3, #14
 8001f44:	4013      	ands	r3, r2
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d013      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	23c0      	movs	r3, #192	; 0xc0
 8001f52:	029b      	lsls	r3, r3, #10
 8001f54:	401a      	ands	r2, r3
 8001f56:	23c0      	movs	r3, #192	; 0xc0
 8001f58:	029b      	lsls	r3, r3, #10
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d10a      	bne.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001f5e:	4b6d      	ldr	r3, [pc, #436]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	029b      	lsls	r3, r3, #10
 8001f66:	401a      	ands	r2, r3
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	029b      	lsls	r3, r3, #10
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d101      	bne.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0cb      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x25c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001f74:	4b67      	ldr	r3, [pc, #412]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f78:	23c0      	movs	r3, #192	; 0xc0
 8001f7a:	029b      	lsls	r3, r3, #10
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d03b      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	23c0      	movs	r3, #192	; 0xc0
 8001f8c:	029b      	lsls	r3, r3, #10
 8001f8e:	4013      	ands	r3, r2
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d033      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d02e      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001fa0:	4b5c      	ldr	r3, [pc, #368]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa4:	4a5d      	ldr	r2, [pc, #372]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001faa:	4b5a      	ldr	r3, [pc, #360]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fae:	4b59      	ldr	r3, [pc, #356]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fb0:	2180      	movs	r1, #128	; 0x80
 8001fb2:	0309      	lsls	r1, r1, #12
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fb8:	4b56      	ldr	r3, [pc, #344]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fbc:	4b55      	ldr	r3, [pc, #340]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fbe:	4958      	ldr	r1, [pc, #352]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8001fc0:	400a      	ands	r2, r1
 8001fc2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001fc4:	4b53      	ldr	r3, [pc, #332]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d014      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7fe ff36 	bl	8000e44 <HAL_GetTick>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fdc:	e009      	b.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fde:	f7fe ff31 	bl	8000e44 <HAL_GetTick>
 8001fe2:	0002      	movs	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	4a4e      	ldr	r2, [pc, #312]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e08c      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x25c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ff2:	4b48      	ldr	r3, [pc, #288]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ff4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d0ef      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	23c0      	movs	r3, #192	; 0xc0
 8002004:	029b      	lsls	r3, r3, #10
 8002006:	401a      	ands	r2, r3
 8002008:	23c0      	movs	r3, #192	; 0xc0
 800200a:	029b      	lsls	r3, r3, #10
 800200c:	429a      	cmp	r2, r3
 800200e:	d10c      	bne.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002010:	4b40      	ldr	r3, [pc, #256]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a44      	ldr	r2, [pc, #272]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002016:	4013      	ands	r3, r2
 8002018:	0019      	movs	r1, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	23c0      	movs	r3, #192	; 0xc0
 8002020:	039b      	lsls	r3, r3, #14
 8002022:	401a      	ands	r2, r3
 8002024:	4b3b      	ldr	r3, [pc, #236]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002026:	430a      	orrs	r2, r1
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	4b3a      	ldr	r3, [pc, #232]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800202c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	23c0      	movs	r3, #192	; 0xc0
 8002034:	029b      	lsls	r3, r3, #10
 8002036:	401a      	ands	r2, r3
 8002038:	4b36      	ldr	r3, [pc, #216]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800203a:	430a      	orrs	r2, r1
 800203c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800203e:	2317      	movs	r3, #23
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d105      	bne.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002048:	4b32      	ldr	r3, [pc, #200]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800204a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800204c:	4b31      	ldr	r3, [pc, #196]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800204e:	4937      	ldr	r1, [pc, #220]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002050:	400a      	ands	r2, r1
 8002052:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2201      	movs	r2, #1
 800205a:	4013      	ands	r3, r2
 800205c:	d009      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800205e:	4b2d      	ldr	r3, [pc, #180]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002062:	2203      	movs	r2, #3
 8002064:	4393      	bics	r3, r2
 8002066:	0019      	movs	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	4b29      	ldr	r3, [pc, #164]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800206e:	430a      	orrs	r2, r1
 8002070:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2202      	movs	r2, #2
 8002078:	4013      	ands	r3, r2
 800207a:	d009      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800207c:	4b25      	ldr	r3, [pc, #148]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800207e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002080:	220c      	movs	r2, #12
 8002082:	4393      	bics	r3, r2
 8002084:	0019      	movs	r1, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	4b22      	ldr	r3, [pc, #136]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800208c:	430a      	orrs	r2, r1
 800208e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2204      	movs	r2, #4
 8002096:	4013      	ands	r3, r2
 8002098:	d009      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800209a:	4b1e      	ldr	r3, [pc, #120]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209e:	4a24      	ldr	r2, [pc, #144]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	0019      	movs	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020aa:	430a      	orrs	r2, r1
 80020ac:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2208      	movs	r2, #8
 80020b4:	4013      	ands	r3, r2
 80020b6:	d009      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020b8:	4b16      	ldr	r3, [pc, #88]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020bc:	4a1d      	ldr	r2, [pc, #116]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80020be:	4013      	ands	r3, r2
 80020c0:	0019      	movs	r1, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695a      	ldr	r2, [r3, #20]
 80020c6:	4b13      	ldr	r3, [pc, #76]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020c8:	430a      	orrs	r2, r1
 80020ca:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4013      	ands	r3, r2
 80020d6:	d009      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020d8:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020dc:	4a0f      	ldr	r2, [pc, #60]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80020de:	4013      	ands	r3, r2
 80020e0:	0019      	movs	r1, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699a      	ldr	r2, [r3, #24]
 80020e6:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020e8:	430a      	orrs	r2, r1
 80020ea:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2280      	movs	r2, #128	; 0x80
 80020f2:	4013      	ands	r3, r2
 80020f4:	d009      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80020f6:	4b07      	ldr	r3, [pc, #28]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fa:	4a0f      	ldr	r2, [pc, #60]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	0019      	movs	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69da      	ldr	r2, [r3, #28]
 8002104:	4b03      	ldr	r3, [pc, #12]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002106:	430a      	orrs	r2, r1
 8002108:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	0018      	movs	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	b006      	add	sp, #24
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40021000 	.word	0x40021000
 8002118:	40007000 	.word	0x40007000
 800211c:	fffcffff 	.word	0xfffcffff
 8002120:	fff7ffff 	.word	0xfff7ffff
 8002124:	00001388 	.word	0x00001388
 8002128:	ffcfffff 	.word	0xffcfffff
 800212c:	efffffff 	.word	0xefffffff
 8002130:	fffff3ff 	.word	0xfffff3ff
 8002134:	ffffcfff 	.word	0xffffcfff
 8002138:	fff3ffff 	.word	0xfff3ffff

0800213c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e059      	b.n	8002202 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2251      	movs	r2, #81	; 0x51
 8002158:	5c9b      	ldrb	r3, [r3, r2]
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	d107      	bne.n	8002170 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2250      	movs	r2, #80	; 0x50
 8002164:	2100      	movs	r1, #0
 8002166:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	0018      	movs	r0, r3
 800216c:	f7fe fc98 	bl	8000aa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2251      	movs	r2, #81	; 0x51
 8002174:	2102      	movs	r1, #2
 8002176:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2140      	movs	r1, #64	; 0x40
 8002184:	438a      	bics	r2, r1
 8002186:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	431a      	orrs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	431a      	orrs	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6999      	ldr	r1, [r3, #24]
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	400b      	ands	r3, r1
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	431a      	orrs	r2, r3
 80021bc:	0011      	movs	r1, r2
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	0c1b      	lsrs	r3, r3, #16
 80021d0:	2204      	movs	r2, #4
 80021d2:	4013      	ands	r3, r2
 80021d4:	0019      	movs	r1, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	69da      	ldr	r2, [r3, #28]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4907      	ldr	r1, [pc, #28]	; (800220c <HAL_SPI_Init+0xd0>)
 80021ee:	400a      	ands	r2, r1
 80021f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2251      	movs	r2, #81	; 0x51
 80021fc:	2101      	movs	r1, #1
 80021fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	0018      	movs	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	b002      	add	sp, #8
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	fffff7ff 	.word	0xfffff7ff

08002210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e01e      	b.n	8002260 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2239      	movs	r2, #57	; 0x39
 8002226:	5c9b      	ldrb	r3, [r3, r2]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d107      	bne.n	800223e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2238      	movs	r2, #56	; 0x38
 8002232:	2100      	movs	r1, #0
 8002234:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	0018      	movs	r0, r3
 800223a:	f7fe fc77 	bl	8000b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2239      	movs	r2, #57	; 0x39
 8002242:	2102      	movs	r1, #2
 8002244:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3304      	adds	r3, #4
 800224e:	0019      	movs	r1, r3
 8002250:	0010      	movs	r0, r2
 8002252:	f000 f9f1 	bl	8002638 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2239      	movs	r2, #57	; 0x39
 800225a:	2101      	movs	r1, #1
 800225c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	b002      	add	sp, #8
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2101      	movs	r1, #1
 800227c:	430a      	orrs	r2, r1
 800227e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	2207      	movs	r2, #7
 8002288:	4013      	ands	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b06      	cmp	r3, #6
 8002290:	d007      	beq.n	80022a2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2101      	movs	r1, #1
 800229e:	430a      	orrs	r2, r1
 80022a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	0018      	movs	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b004      	add	sp, #16
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	2202      	movs	r2, #2
 80022bc:	4013      	ands	r3, r2
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d124      	bne.n	800230c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	2202      	movs	r2, #2
 80022ca:	4013      	ands	r3, r2
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d11d      	bne.n	800230c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2203      	movs	r2, #3
 80022d6:	4252      	negs	r2, r2
 80022d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	2203      	movs	r2, #3
 80022e8:	4013      	ands	r3, r2
 80022ea:	d004      	beq.n	80022f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	0018      	movs	r0, r3
 80022f0:	f000 f98a 	bl	8002608 <HAL_TIM_IC_CaptureCallback>
 80022f4:	e007      	b.n	8002306 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	0018      	movs	r0, r3
 80022fa:	f000 f97d 	bl	80025f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	0018      	movs	r0, r3
 8002302:	f000 f989 	bl	8002618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	2204      	movs	r2, #4
 8002314:	4013      	ands	r3, r2
 8002316:	2b04      	cmp	r3, #4
 8002318:	d125      	bne.n	8002366 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	2204      	movs	r2, #4
 8002322:	4013      	ands	r3, r2
 8002324:	2b04      	cmp	r3, #4
 8002326:	d11e      	bne.n	8002366 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2205      	movs	r2, #5
 800232e:	4252      	negs	r2, r2
 8002330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2202      	movs	r2, #2
 8002336:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699a      	ldr	r2, [r3, #24]
 800233e:	23c0      	movs	r3, #192	; 0xc0
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4013      	ands	r3, r2
 8002344:	d004      	beq.n	8002350 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	0018      	movs	r0, r3
 800234a:	f000 f95d 	bl	8002608 <HAL_TIM_IC_CaptureCallback>
 800234e:	e007      	b.n	8002360 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	0018      	movs	r0, r3
 8002354:	f000 f950 	bl	80025f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	0018      	movs	r0, r3
 800235c:	f000 f95c 	bl	8002618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	2208      	movs	r2, #8
 800236e:	4013      	ands	r3, r2
 8002370:	2b08      	cmp	r3, #8
 8002372:	d124      	bne.n	80023be <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2208      	movs	r2, #8
 800237c:	4013      	ands	r3, r2
 800237e:	2b08      	cmp	r3, #8
 8002380:	d11d      	bne.n	80023be <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2209      	movs	r2, #9
 8002388:	4252      	negs	r2, r2
 800238a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2204      	movs	r2, #4
 8002390:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	2203      	movs	r2, #3
 800239a:	4013      	ands	r3, r2
 800239c:	d004      	beq.n	80023a8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	0018      	movs	r0, r3
 80023a2:	f000 f931 	bl	8002608 <HAL_TIM_IC_CaptureCallback>
 80023a6:	e007      	b.n	80023b8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	0018      	movs	r0, r3
 80023ac:	f000 f924 	bl	80025f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	0018      	movs	r0, r3
 80023b4:	f000 f930 	bl	8002618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	2210      	movs	r2, #16
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b10      	cmp	r3, #16
 80023ca:	d125      	bne.n	8002418 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	2210      	movs	r2, #16
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b10      	cmp	r3, #16
 80023d8:	d11e      	bne.n	8002418 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2211      	movs	r2, #17
 80023e0:	4252      	negs	r2, r2
 80023e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2208      	movs	r2, #8
 80023e8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	69da      	ldr	r2, [r3, #28]
 80023f0:	23c0      	movs	r3, #192	; 0xc0
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4013      	ands	r3, r2
 80023f6:	d004      	beq.n	8002402 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	0018      	movs	r0, r3
 80023fc:	f000 f904 	bl	8002608 <HAL_TIM_IC_CaptureCallback>
 8002400:	e007      	b.n	8002412 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	0018      	movs	r0, r3
 8002406:	f000 f8f7 	bl	80025f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	0018      	movs	r0, r3
 800240e:	f000 f903 	bl	8002618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	2201      	movs	r2, #1
 8002420:	4013      	ands	r3, r2
 8002422:	2b01      	cmp	r3, #1
 8002424:	d10f      	bne.n	8002446 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2201      	movs	r2, #1
 800242e:	4013      	ands	r3, r2
 8002430:	2b01      	cmp	r3, #1
 8002432:	d108      	bne.n	8002446 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2202      	movs	r2, #2
 800243a:	4252      	negs	r2, r2
 800243c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	0018      	movs	r0, r3
 8002442:	f7fe f90b 	bl	800065c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	2240      	movs	r2, #64	; 0x40
 800244e:	4013      	ands	r3, r2
 8002450:	2b40      	cmp	r3, #64	; 0x40
 8002452:	d10f      	bne.n	8002474 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2240      	movs	r2, #64	; 0x40
 800245c:	4013      	ands	r3, r2
 800245e:	2b40      	cmp	r3, #64	; 0x40
 8002460:	d108      	bne.n	8002474 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2241      	movs	r2, #65	; 0x41
 8002468:	4252      	negs	r2, r2
 800246a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	0018      	movs	r0, r3
 8002470:	f000 f8da 	bl	8002628 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b002      	add	sp, #8
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2238      	movs	r2, #56	; 0x38
 800248a:	5c9b      	ldrb	r3, [r3, r2]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_TIM_ConfigClockSource+0x18>
 8002490:	2302      	movs	r3, #2
 8002492:	e0ab      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x170>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2238      	movs	r2, #56	; 0x38
 8002498:	2101      	movs	r1, #1
 800249a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2239      	movs	r2, #57	; 0x39
 80024a0:	2102      	movs	r1, #2
 80024a2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2277      	movs	r2, #119	; 0x77
 80024b0:	4393      	bics	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4a4f      	ldr	r2, [pc, #316]	; (80025f4 <HAL_TIM_ConfigClockSource+0x178>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b40      	cmp	r3, #64	; 0x40
 80024ca:	d100      	bne.n	80024ce <HAL_TIM_ConfigClockSource+0x52>
 80024cc:	e06b      	b.n	80025a6 <HAL_TIM_ConfigClockSource+0x12a>
 80024ce:	d80e      	bhi.n	80024ee <HAL_TIM_ConfigClockSource+0x72>
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	d100      	bne.n	80024d6 <HAL_TIM_ConfigClockSource+0x5a>
 80024d4:	e077      	b.n	80025c6 <HAL_TIM_ConfigClockSource+0x14a>
 80024d6:	d803      	bhi.n	80024e0 <HAL_TIM_ConfigClockSource+0x64>
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d100      	bne.n	80024de <HAL_TIM_ConfigClockSource+0x62>
 80024dc:	e073      	b.n	80025c6 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80024de:	e07c      	b.n	80025da <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80024e0:	2b20      	cmp	r3, #32
 80024e2:	d100      	bne.n	80024e6 <HAL_TIM_ConfigClockSource+0x6a>
 80024e4:	e06f      	b.n	80025c6 <HAL_TIM_ConfigClockSource+0x14a>
 80024e6:	2b30      	cmp	r3, #48	; 0x30
 80024e8:	d100      	bne.n	80024ec <HAL_TIM_ConfigClockSource+0x70>
 80024ea:	e06c      	b.n	80025c6 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80024ec:	e075      	b.n	80025da <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80024ee:	2b70      	cmp	r3, #112	; 0x70
 80024f0:	d00e      	beq.n	8002510 <HAL_TIM_ConfigClockSource+0x94>
 80024f2:	d804      	bhi.n	80024fe <HAL_TIM_ConfigClockSource+0x82>
 80024f4:	2b50      	cmp	r3, #80	; 0x50
 80024f6:	d036      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0xea>
 80024f8:	2b60      	cmp	r3, #96	; 0x60
 80024fa:	d044      	beq.n	8002586 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80024fc:	e06d      	b.n	80025da <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80024fe:	2280      	movs	r2, #128	; 0x80
 8002500:	0152      	lsls	r2, r2, #5
 8002502:	4293      	cmp	r3, r2
 8002504:	d068      	beq.n	80025d8 <HAL_TIM_ConfigClockSource+0x15c>
 8002506:	2280      	movs	r2, #128	; 0x80
 8002508:	0192      	lsls	r2, r2, #6
 800250a:	4293      	cmp	r3, r2
 800250c:	d017      	beq.n	800253e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800250e:	e064      	b.n	80025da <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6818      	ldr	r0, [r3, #0]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	6899      	ldr	r1, [r3, #8]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f000 f962 	bl	80027e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2277      	movs	r2, #119	; 0x77
 8002530:	4313      	orrs	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	609a      	str	r2, [r3, #8]
      break;
 800253c:	e04d      	b.n	80025da <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6899      	ldr	r1, [r3, #8]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f000 f94b 	bl	80027e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2180      	movs	r1, #128	; 0x80
 800255e:	01c9      	lsls	r1, r1, #7
 8002560:	430a      	orrs	r2, r1
 8002562:	609a      	str	r2, [r3, #8]
      break;
 8002564:	e039      	b.n	80025da <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	6859      	ldr	r1, [r3, #4]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	001a      	movs	r2, r3
 8002574:	f000 f8be 	bl	80026f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2150      	movs	r1, #80	; 0x50
 800257e:	0018      	movs	r0, r3
 8002580:	f000 f918 	bl	80027b4 <TIM_ITRx_SetConfig>
      break;
 8002584:	e029      	b.n	80025da <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6859      	ldr	r1, [r3, #4]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	001a      	movs	r2, r3
 8002594:	f000 f8dc 	bl	8002750 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2160      	movs	r1, #96	; 0x60
 800259e:	0018      	movs	r0, r3
 80025a0:	f000 f908 	bl	80027b4 <TIM_ITRx_SetConfig>
      break;
 80025a4:	e019      	b.n	80025da <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	6859      	ldr	r1, [r3, #4]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	001a      	movs	r2, r3
 80025b4:	f000 f89e 	bl	80026f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2140      	movs	r1, #64	; 0x40
 80025be:	0018      	movs	r0, r3
 80025c0:	f000 f8f8 	bl	80027b4 <TIM_ITRx_SetConfig>
      break;
 80025c4:	e009      	b.n	80025da <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	0019      	movs	r1, r3
 80025d0:	0010      	movs	r0, r2
 80025d2:	f000 f8ef 	bl	80027b4 <TIM_ITRx_SetConfig>
      break;
 80025d6:	e000      	b.n	80025da <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80025d8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2239      	movs	r2, #57	; 0x39
 80025de:	2101      	movs	r1, #1
 80025e0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2238      	movs	r2, #56	; 0x38
 80025e6:	2100      	movs	r1, #0
 80025e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	0018      	movs	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b004      	add	sp, #16
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	ffff00ff 	.word	0xffff00ff

080025f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002600:	46c0      	nop			; (mov r8, r8)
 8002602:	46bd      	mov	sp, r7
 8002604:	b002      	add	sp, #8
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002610:	46c0      	nop			; (mov r8, r8)
 8002612:	46bd      	mov	sp, r7
 8002614:	b002      	add	sp, #8
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002620:	46c0      	nop			; (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	b002      	add	sp, #8
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002630:	46c0      	nop			; (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	b002      	add	sp, #8
 8002636:	bd80      	pop	{r7, pc}

08002638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	05db      	lsls	r3, r3, #23
 800264e:	429a      	cmp	r2, r3
 8002650:	d00b      	beq.n	800266a <TIM_Base_SetConfig+0x32>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a23      	ldr	r2, [pc, #140]	; (80026e4 <TIM_Base_SetConfig+0xac>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d007      	beq.n	800266a <TIM_Base_SetConfig+0x32>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a22      	ldr	r2, [pc, #136]	; (80026e8 <TIM_Base_SetConfig+0xb0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d003      	beq.n	800266a <TIM_Base_SetConfig+0x32>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a21      	ldr	r2, [pc, #132]	; (80026ec <TIM_Base_SetConfig+0xb4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d108      	bne.n	800267c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2270      	movs	r2, #112	; 0x70
 800266e:	4393      	bics	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4313      	orrs	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	05db      	lsls	r3, r3, #23
 8002682:	429a      	cmp	r2, r3
 8002684:	d00b      	beq.n	800269e <TIM_Base_SetConfig+0x66>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a16      	ldr	r2, [pc, #88]	; (80026e4 <TIM_Base_SetConfig+0xac>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d007      	beq.n	800269e <TIM_Base_SetConfig+0x66>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a15      	ldr	r2, [pc, #84]	; (80026e8 <TIM_Base_SetConfig+0xb0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d003      	beq.n	800269e <TIM_Base_SetConfig+0x66>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a14      	ldr	r2, [pc, #80]	; (80026ec <TIM_Base_SetConfig+0xb4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d108      	bne.n	80026b0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4a13      	ldr	r2, [pc, #76]	; (80026f0 <TIM_Base_SetConfig+0xb8>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2280      	movs	r2, #128	; 0x80
 80026b4:	4393      	bics	r3, r2
 80026b6:	001a      	movs	r2, r3
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	615a      	str	r2, [r3, #20]
}
 80026dc:	46c0      	nop			; (mov r8, r8)
 80026de:	46bd      	mov	sp, r7
 80026e0:	b004      	add	sp, #16
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40000400 	.word	0x40000400
 80026e8:	40010800 	.word	0x40010800
 80026ec:	40011400 	.word	0x40011400
 80026f0:	fffffcff 	.word	0xfffffcff

080026f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	2201      	movs	r2, #1
 800270c:	4393      	bics	r3, r2
 800270e:	001a      	movs	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	22f0      	movs	r2, #240	; 0xf0
 800271e:	4393      	bics	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	220a      	movs	r2, #10
 8002730:	4393      	bics	r3, r2
 8002732:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	4313      	orrs	r3, r2
 800273a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	621a      	str	r2, [r3, #32]
}
 8002748:	46c0      	nop			; (mov r8, r8)
 800274a:	46bd      	mov	sp, r7
 800274c:	b006      	add	sp, #24
 800274e:	bd80      	pop	{r7, pc}

08002750 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	2210      	movs	r2, #16
 8002762:	4393      	bics	r3, r2
 8002764:	001a      	movs	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	4a0d      	ldr	r2, [pc, #52]	; (80027b0 <TIM_TI2_ConfigInputStage+0x60>)
 800277a:	4013      	ands	r3, r2
 800277c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	031b      	lsls	r3, r3, #12
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	22a0      	movs	r2, #160	; 0xa0
 800278c:	4393      	bics	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	621a      	str	r2, [r3, #32]
}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	46bd      	mov	sp, r7
 80027aa:	b006      	add	sp, #24
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	ffff0fff 	.word	0xffff0fff

080027b4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2270      	movs	r2, #112	; 0x70
 80027c8:	4393      	bics	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	2207      	movs	r2, #7
 80027d4:	4313      	orrs	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	609a      	str	r2, [r3, #8]
}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b004      	add	sp, #16
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
 80027f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	4a09      	ldr	r2, [pc, #36]	; (8002824 <TIM_ETR_SetConfig+0x3c>)
 8002800:	4013      	ands	r3, r2
 8002802:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	021a      	lsls	r2, r3, #8
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	431a      	orrs	r2, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4313      	orrs	r3, r2
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	4313      	orrs	r3, r2
 8002814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	609a      	str	r2, [r3, #8]
}
 800281c:	46c0      	nop			; (mov r8, r8)
 800281e:	46bd      	mov	sp, r7
 8002820:	b006      	add	sp, #24
 8002822:	bd80      	pop	{r7, pc}
 8002824:	ffff00ff 	.word	0xffff00ff

08002828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2238      	movs	r2, #56	; 0x38
 8002836:	5c9b      	ldrb	r3, [r3, r2]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800283c:	2302      	movs	r3, #2
 800283e:	e032      	b.n	80028a6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2238      	movs	r2, #56	; 0x38
 8002844:	2101      	movs	r1, #1
 8002846:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2239      	movs	r2, #57	; 0x39
 800284c:	2102      	movs	r1, #2
 800284e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2270      	movs	r2, #112	; 0x70
 8002864:	4393      	bics	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2280      	movs	r2, #128	; 0x80
 8002876:	4393      	bics	r3, r2
 8002878:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	4313      	orrs	r3, r2
 8002882:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2239      	movs	r2, #57	; 0x39
 8002898:	2101      	movs	r1, #1
 800289a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2238      	movs	r2, #56	; 0x38
 80028a0:	2100      	movs	r1, #0
 80028a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	0018      	movs	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	b004      	add	sp, #16
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e044      	b.n	800294c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d107      	bne.n	80028da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2270      	movs	r2, #112	; 0x70
 80028ce:	2100      	movs	r1, #0
 80028d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	0018      	movs	r0, r3
 80028d6:	f7fe f947 	bl	8000b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2224      	movs	r2, #36	; 0x24
 80028de:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2101      	movs	r1, #1
 80028ec:	438a      	bics	r2, r1
 80028ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	0018      	movs	r0, r3
 80028f4:	f000 fa98 	bl	8002e28 <UART_SetConfig>
 80028f8:	0003      	movs	r3, r0
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e024      	b.n	800294c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	0018      	movs	r0, r3
 800290e:	f000 fdbf 	bl	8003490 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	490d      	ldr	r1, [pc, #52]	; (8002954 <HAL_UART_Init+0xa4>)
 800291e:	400a      	ands	r2, r1
 8002920:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	212a      	movs	r1, #42	; 0x2a
 800292e:	438a      	bics	r2, r1
 8002930:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2101      	movs	r1, #1
 800293e:	430a      	orrs	r2, r1
 8002940:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	0018      	movs	r0, r3
 8002946:	f000 fe57 	bl	80035f8 <UART_CheckIdleState>
 800294a:	0003      	movs	r3, r0
}
 800294c:	0018      	movs	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	b002      	add	sp, #8
 8002952:	bd80      	pop	{r7, pc}
 8002954:	ffffb7ff 	.word	0xffffb7ff

08002958 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	1dbb      	adds	r3, r7, #6
 8002964:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800296a:	2b20      	cmp	r3, #32
 800296c:	d000      	beq.n	8002970 <HAL_UART_Receive_IT+0x18>
 800296e:	e09f      	b.n	8002ab0 <HAL_UART_Receive_IT+0x158>
  {
    if ((pData == NULL) || (Size == 0U))
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_UART_Receive_IT+0x26>
 8002976:	1dbb      	adds	r3, r7, #6
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e097      	b.n	8002ab2 <HAL_UART_Receive_IT+0x15a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	2380      	movs	r3, #128	; 0x80
 8002988:	015b      	lsls	r3, r3, #5
 800298a:	429a      	cmp	r2, r3
 800298c:	d109      	bne.n	80029a2 <HAL_UART_Receive_IT+0x4a>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d105      	bne.n	80029a2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2201      	movs	r2, #1
 800299a:	4013      	ands	r3, r2
 800299c:	d001      	beq.n	80029a2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e087      	b.n	8002ab2 <HAL_UART_Receive_IT+0x15a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2270      	movs	r2, #112	; 0x70
 80029a6:	5c9b      	ldrb	r3, [r3, r2]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_UART_Receive_IT+0x58>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e080      	b.n	8002ab2 <HAL_UART_Receive_IT+0x15a>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2270      	movs	r2, #112	; 0x70
 80029b4:	2101      	movs	r1, #1
 80029b6:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1dba      	adds	r2, r7, #6
 80029c2:	2158      	movs	r1, #88	; 0x58
 80029c4:	8812      	ldrh	r2, [r2, #0]
 80029c6:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1dba      	adds	r2, r7, #6
 80029cc:	215a      	movs	r1, #90	; 0x5a
 80029ce:	8812      	ldrh	r2, [r2, #0]
 80029d0:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	2380      	movs	r3, #128	; 0x80
 80029de:	015b      	lsls	r3, r3, #5
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d10d      	bne.n	8002a00 <HAL_UART_Receive_IT+0xa8>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d104      	bne.n	80029f6 <HAL_UART_Receive_IT+0x9e>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	225c      	movs	r2, #92	; 0x5c
 80029f0:	4932      	ldr	r1, [pc, #200]	; (8002abc <HAL_UART_Receive_IT+0x164>)
 80029f2:	5299      	strh	r1, [r3, r2]
 80029f4:	e02e      	b.n	8002a54 <HAL_UART_Receive_IT+0xfc>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	225c      	movs	r2, #92	; 0x5c
 80029fa:	21ff      	movs	r1, #255	; 0xff
 80029fc:	5299      	strh	r1, [r3, r2]
 80029fe:	e029      	b.n	8002a54 <HAL_UART_Receive_IT+0xfc>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10d      	bne.n	8002a24 <HAL_UART_Receive_IT+0xcc>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d104      	bne.n	8002a1a <HAL_UART_Receive_IT+0xc2>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	225c      	movs	r2, #92	; 0x5c
 8002a14:	21ff      	movs	r1, #255	; 0xff
 8002a16:	5299      	strh	r1, [r3, r2]
 8002a18:	e01c      	b.n	8002a54 <HAL_UART_Receive_IT+0xfc>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	225c      	movs	r2, #92	; 0x5c
 8002a1e:	217f      	movs	r1, #127	; 0x7f
 8002a20:	5299      	strh	r1, [r3, r2]
 8002a22:	e017      	b.n	8002a54 <HAL_UART_Receive_IT+0xfc>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	055b      	lsls	r3, r3, #21
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d10d      	bne.n	8002a4c <HAL_UART_Receive_IT+0xf4>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d104      	bne.n	8002a42 <HAL_UART_Receive_IT+0xea>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	225c      	movs	r2, #92	; 0x5c
 8002a3c:	217f      	movs	r1, #127	; 0x7f
 8002a3e:	5299      	strh	r1, [r3, r2]
 8002a40:	e008      	b.n	8002a54 <HAL_UART_Receive_IT+0xfc>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	225c      	movs	r2, #92	; 0x5c
 8002a46:	213f      	movs	r1, #63	; 0x3f
 8002a48:	5299      	strh	r1, [r3, r2]
 8002a4a:	e003      	b.n	8002a54 <HAL_UART_Receive_IT+0xfc>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	225c      	movs	r2, #92	; 0x5c
 8002a50:	2100      	movs	r1, #0
 8002a52:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2222      	movs	r2, #34	; 0x22
 8002a5e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	2380      	movs	r3, #128	; 0x80
 8002a76:	015b      	lsls	r3, r3, #5
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d107      	bne.n	8002a8c <HAL_UART_Receive_IT+0x134>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d103      	bne.n	8002a8c <HAL_UART_Receive_IT+0x134>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4a0e      	ldr	r2, [pc, #56]	; (8002ac0 <HAL_UART_Receive_IT+0x168>)
 8002a88:	661a      	str	r2, [r3, #96]	; 0x60
 8002a8a:	e002      	b.n	8002a92 <HAL_UART_Receive_IT+0x13a>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4a0d      	ldr	r2, [pc, #52]	; (8002ac4 <HAL_UART_Receive_IT+0x16c>)
 8002a90:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2270      	movs	r2, #112	; 0x70
 8002a96:	2100      	movs	r1, #0
 8002a98:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2190      	movs	r1, #144	; 0x90
 8002aa6:	0049      	lsls	r1, r1, #1
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	e000      	b.n	8002ab2 <HAL_UART_Receive_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8002ab0:	2302      	movs	r3, #2
  }
}
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	b004      	add	sp, #16
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	000001ff 	.word	0x000001ff
 8002ac0:	080038bd 	.word	0x080038bd
 8002ac4:	08003801 	.word	0x08003801

08002ac8 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4931      	ldr	r1, [pc, #196]	; (8002ba0 <HAL_UART_AbortReceive_IT+0xd8>)
 8002adc:	400a      	ands	r2, r1
 8002ade:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2101      	movs	r1, #1
 8002aec:	438a      	bics	r2, r1
 8002aee:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2240      	movs	r2, #64	; 0x40
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b40      	cmp	r3, #64	; 0x40
 8002afc:	d139      	bne.n	8002b72 <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2140      	movs	r1, #64	; 0x40
 8002b0a:	438a      	bics	r2, r1
 8002b0c:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d012      	beq.n	8002b3c <HAL_UART_AbortReceive_IT+0x74>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b1a:	4a22      	ldr	r2, [pc, #136]	; (8002ba4 <HAL_UART_AbortReceive_IT+0xdc>)
 8002b1c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b22:	0018      	movs	r0, r3
 8002b24:	f7fe fa72 	bl	800100c <HAL_DMA_Abort_IT>
 8002b28:	1e03      	subs	r3, r0, #0
 8002b2a:	d034      	beq.n	8002b96 <HAL_UART_AbortReceive_IT+0xce>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b36:	0018      	movs	r0, r3
 8002b38:	4790      	blx	r2
 8002b3a:	e02c      	b.n	8002b96 <HAL_UART_AbortReceive_IT+0xce>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	225a      	movs	r2, #90	; 0x5a
 8002b40:	2100      	movs	r1, #0
 8002b42:	5299      	strh	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	220f      	movs	r2, #15
 8002b50:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699a      	ldr	r2, [r3, #24]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2108      	movs	r1, #8
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2220      	movs	r2, #32
 8002b66:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f7fd fd48 	bl	8000600 <HAL_UART_AbortReceiveCpltCallback>
 8002b70:	e011      	b.n	8002b96 <HAL_UART_AbortReceive_IT+0xce>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	225a      	movs	r2, #90	; 0x5a
 8002b76:	2100      	movs	r1, #0
 8002b78:	5299      	strh	r1, [r3, r2]

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	220f      	movs	r2, #15
 8002b86:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	0018      	movs	r0, r3
 8002b92:	f7fd fd35 	bl	8000600 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	0018      	movs	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b002      	add	sp, #8
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	fffffedf 	.word	0xfffffedf
 8002ba4:	08003787 	.word	0x08003787

08002ba8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	220f      	movs	r2, #15
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d112      	bne.n	8002bfc <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d00e      	beq.n	8002bfc <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	2220      	movs	r2, #32
 8002be2:	4013      	ands	r3, r2
 8002be4:	d00a      	beq.n	8002bfc <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d100      	bne.n	8002bf0 <HAL_UART_IRQHandler+0x48>
 8002bee:	e0f6      	b.n	8002dde <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	0010      	movs	r0, r2
 8002bf8:	4798      	blx	r3
      }
      return;
 8002bfa:	e0f0      	b.n	8002dde <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d100      	bne.n	8002c04 <HAL_UART_IRQHandler+0x5c>
 8002c02:	e0b8      	b.n	8002d76 <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	2201      	movs	r2, #1
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d105      	bne.n	8002c18 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	2390      	movs	r3, #144	; 0x90
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	4013      	ands	r3, r2
 8002c14:	d100      	bne.n	8002c18 <HAL_UART_IRQHandler+0x70>
 8002c16:	e0ae      	b.n	8002d76 <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d00e      	beq.n	8002c3e <HAL_UART_IRQHandler+0x96>
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	4013      	ands	r3, r2
 8002c28:	d009      	beq.n	8002c3e <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c36:	2201      	movs	r2, #1
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	2202      	movs	r2, #2
 8002c42:	4013      	ands	r3, r2
 8002c44:	d00d      	beq.n	8002c62 <HAL_UART_IRQHandler+0xba>
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d009      	beq.n	8002c62 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2202      	movs	r2, #2
 8002c54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	2204      	movs	r2, #4
 8002c66:	4013      	ands	r3, r2
 8002c68:	d00d      	beq.n	8002c86 <HAL_UART_IRQHandler+0xde>
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d009      	beq.n	8002c86 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2204      	movs	r2, #4
 8002c78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c7e:	2202      	movs	r2, #2
 8002c80:	431a      	orrs	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	2208      	movs	r2, #8
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d011      	beq.n	8002cb2 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	2220      	movs	r2, #32
 8002c92:	4013      	ands	r3, r2
 8002c94:	d103      	bne.n	8002c9e <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c9c:	d009      	beq.n	8002cb2 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2208      	movs	r2, #8
 8002ca4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002caa:	2208      	movs	r2, #8
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d100      	bne.n	8002cbc <HAL_UART_IRQHandler+0x114>
 8002cba:	e092      	b.n	8002de2 <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d00c      	beq.n	8002cde <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d008      	beq.n	8002cde <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d004      	beq.n	8002cde <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	0010      	movs	r0, r2
 8002cdc:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ce2:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	2240      	movs	r2, #64	; 0x40
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b40      	cmp	r3, #64	; 0x40
 8002cf0:	d003      	beq.n	8002cfa <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2208      	movs	r2, #8
 8002cf6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002cf8:	d033      	beq.n	8002d62 <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f000 fd0b 	bl	8003718 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2240      	movs	r2, #64	; 0x40
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b40      	cmp	r3, #64	; 0x40
 8002d0e:	d123      	bne.n	8002d58 <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2140      	movs	r1, #64	; 0x40
 8002d1c:	438a      	bics	r2, r1
 8002d1e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d012      	beq.n	8002d4e <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d2c:	4a30      	ldr	r2, [pc, #192]	; (8002df0 <HAL_UART_IRQHandler+0x248>)
 8002d2e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d34:	0018      	movs	r0, r3
 8002d36:	f7fe f969 	bl	800100c <HAL_DMA_Abort_IT>
 8002d3a:	1e03      	subs	r3, r0, #0
 8002d3c:	d019      	beq.n	8002d72 <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d48:	0018      	movs	r0, r3
 8002d4a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d4c:	e011      	b.n	8002d72 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	0018      	movs	r0, r3
 8002d52:	f000 f84f 	bl	8002df4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d56:	e00c      	b.n	8002d72 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f000 f84a 	bl	8002df4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d60:	e007      	b.n	8002d72 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	0018      	movs	r0, r3
 8002d66:	f000 f845 	bl	8002df4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002d70:	e037      	b.n	8002de2 <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d72:	46c0      	nop			; (mov r8, r8)
    return;
 8002d74:	e035      	b.n	8002de2 <HAL_UART_IRQHandler+0x23a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d76:	69fa      	ldr	r2, [r7, #28]
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	035b      	lsls	r3, r3, #13
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d00e      	beq.n	8002d9e <HAL_UART_IRQHandler+0x1f6>
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	2380      	movs	r3, #128	; 0x80
 8002d84:	03db      	lsls	r3, r3, #15
 8002d86:	4013      	ands	r3, r2
 8002d88:	d009      	beq.n	8002d9e <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2280      	movs	r2, #128	; 0x80
 8002d90:	0352      	lsls	r2, r2, #13
 8002d92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	0018      	movs	r0, r3
 8002d98:	f000 fdee 	bl	8003978 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d9c:	e024      	b.n	8002de8 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	2280      	movs	r2, #128	; 0x80
 8002da2:	4013      	ands	r3, r2
 8002da4:	d00d      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	2280      	movs	r2, #128	; 0x80
 8002daa:	4013      	ands	r3, r2
 8002dac:	d009      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d017      	beq.n	8002de6 <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	0010      	movs	r0, r2
 8002dbe:	4798      	blx	r3
    }
    return;
 8002dc0:	e011      	b.n	8002de6 <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	2240      	movs	r2, #64	; 0x40
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d00e      	beq.n	8002de8 <HAL_UART_IRQHandler+0x240>
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	2240      	movs	r2, #64	; 0x40
 8002dce:	4013      	ands	r3, r2
 8002dd0:	d00a      	beq.n	8002de8 <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f000 fcf8 	bl	80037ca <UART_EndTransmit_IT>
    return;
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	e004      	b.n	8002de8 <HAL_UART_IRQHandler+0x240>
      return;
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	e002      	b.n	8002de8 <HAL_UART_IRQHandler+0x240>
    return;
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	e000      	b.n	8002de8 <HAL_UART_IRQHandler+0x240>
    return;
 8002de6:	46c0      	nop			; (mov r8, r8)
  }

}
 8002de8:	46bd      	mov	sp, r7
 8002dea:	b008      	add	sp, #32
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	08003759 	.word	0x08003759

08002df4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b002      	add	sp, #8
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t temp1, temp2;
  temp1 = huart->gState;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e10:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e16:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	4313      	orrs	r3, r2
}
 8002e1e:	0018      	movs	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b004      	add	sp, #16
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e28:	b5b0      	push	{r4, r5, r7, lr}
 8002e2a:	b08e      	sub	sp, #56	; 0x38
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002e30:	231b      	movs	r3, #27
 8002e32:	2218      	movs	r2, #24
 8002e34:	4694      	mov	ip, r2
 8002e36:	44bc      	add	ip, r7
 8002e38:	4463      	add	r3, ip
 8002e3a:	2210      	movs	r2, #16
 8002e3c:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e42:	2313      	movs	r3, #19
 8002e44:	2218      	movs	r2, #24
 8002e46:	4694      	mov	ip, r2
 8002e48:	44bc      	add	ip, r7
 8002e4a:	4463      	add	r3, ip
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4aca      	ldr	r2, [pc, #808]	; (800319c <UART_SetConfig+0x374>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	0019      	movs	r1, r3
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	4ac5      	ldr	r2, [pc, #788]	; (80031a0 <UART_SetConfig+0x378>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4abf      	ldr	r2, [pc, #764]	; (80031a4 <UART_SetConfig+0x37c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d004      	beq.n	8002eb4 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	4abb      	ldr	r2, [pc, #748]	; (80031a8 <UART_SetConfig+0x380>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	0019      	movs	r1, r3
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4ab7      	ldr	r2, [pc, #732]	; (80031ac <UART_SetConfig+0x384>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d134      	bne.n	8002f3e <UART_SetConfig+0x116>
 8002ed4:	4bb6      	ldr	r3, [pc, #728]	; (80031b0 <UART_SetConfig+0x388>)
 8002ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed8:	2203      	movs	r2, #3
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d015      	beq.n	8002f0c <UART_SetConfig+0xe4>
 8002ee0:	d304      	bcc.n	8002eec <UART_SetConfig+0xc4>
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d00a      	beq.n	8002efc <UART_SetConfig+0xd4>
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	d018      	beq.n	8002f1c <UART_SetConfig+0xf4>
 8002eea:	e01f      	b.n	8002f2c <UART_SetConfig+0x104>
 8002eec:	231b      	movs	r3, #27
 8002eee:	2218      	movs	r2, #24
 8002ef0:	4694      	mov	ip, r2
 8002ef2:	44bc      	add	ip, r7
 8002ef4:	4463      	add	r3, ip
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	701a      	strb	r2, [r3, #0]
 8002efa:	e0c5      	b.n	8003088 <UART_SetConfig+0x260>
 8002efc:	231b      	movs	r3, #27
 8002efe:	2218      	movs	r2, #24
 8002f00:	4694      	mov	ip, r2
 8002f02:	44bc      	add	ip, r7
 8002f04:	4463      	add	r3, ip
 8002f06:	2202      	movs	r2, #2
 8002f08:	701a      	strb	r2, [r3, #0]
 8002f0a:	e0bd      	b.n	8003088 <UART_SetConfig+0x260>
 8002f0c:	231b      	movs	r3, #27
 8002f0e:	2218      	movs	r2, #24
 8002f10:	4694      	mov	ip, r2
 8002f12:	44bc      	add	ip, r7
 8002f14:	4463      	add	r3, ip
 8002f16:	2204      	movs	r2, #4
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	e0b5      	b.n	8003088 <UART_SetConfig+0x260>
 8002f1c:	231b      	movs	r3, #27
 8002f1e:	2218      	movs	r2, #24
 8002f20:	4694      	mov	ip, r2
 8002f22:	44bc      	add	ip, r7
 8002f24:	4463      	add	r3, ip
 8002f26:	2208      	movs	r2, #8
 8002f28:	701a      	strb	r2, [r3, #0]
 8002f2a:	e0ad      	b.n	8003088 <UART_SetConfig+0x260>
 8002f2c:	231b      	movs	r3, #27
 8002f2e:	2218      	movs	r2, #24
 8002f30:	4694      	mov	ip, r2
 8002f32:	44bc      	add	ip, r7
 8002f34:	4463      	add	r3, ip
 8002f36:	2210      	movs	r2, #16
 8002f38:	701a      	strb	r2, [r3, #0]
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	e0a4      	b.n	8003088 <UART_SetConfig+0x260>
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a9c      	ldr	r2, [pc, #624]	; (80031b4 <UART_SetConfig+0x38c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d137      	bne.n	8002fb8 <UART_SetConfig+0x190>
 8002f48:	4b99      	ldr	r3, [pc, #612]	; (80031b0 <UART_SetConfig+0x388>)
 8002f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4c:	220c      	movs	r2, #12
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d018      	beq.n	8002f86 <UART_SetConfig+0x15e>
 8002f54:	d802      	bhi.n	8002f5c <UART_SetConfig+0x134>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d005      	beq.n	8002f66 <UART_SetConfig+0x13e>
 8002f5a:	e024      	b.n	8002fa6 <UART_SetConfig+0x17e>
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d00a      	beq.n	8002f76 <UART_SetConfig+0x14e>
 8002f60:	2b0c      	cmp	r3, #12
 8002f62:	d018      	beq.n	8002f96 <UART_SetConfig+0x16e>
 8002f64:	e01f      	b.n	8002fa6 <UART_SetConfig+0x17e>
 8002f66:	231b      	movs	r3, #27
 8002f68:	2218      	movs	r2, #24
 8002f6a:	4694      	mov	ip, r2
 8002f6c:	44bc      	add	ip, r7
 8002f6e:	4463      	add	r3, ip
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]
 8002f74:	e088      	b.n	8003088 <UART_SetConfig+0x260>
 8002f76:	231b      	movs	r3, #27
 8002f78:	2218      	movs	r2, #24
 8002f7a:	4694      	mov	ip, r2
 8002f7c:	44bc      	add	ip, r7
 8002f7e:	4463      	add	r3, ip
 8002f80:	2202      	movs	r2, #2
 8002f82:	701a      	strb	r2, [r3, #0]
 8002f84:	e080      	b.n	8003088 <UART_SetConfig+0x260>
 8002f86:	231b      	movs	r3, #27
 8002f88:	2218      	movs	r2, #24
 8002f8a:	4694      	mov	ip, r2
 8002f8c:	44bc      	add	ip, r7
 8002f8e:	4463      	add	r3, ip
 8002f90:	2204      	movs	r2, #4
 8002f92:	701a      	strb	r2, [r3, #0]
 8002f94:	e078      	b.n	8003088 <UART_SetConfig+0x260>
 8002f96:	231b      	movs	r3, #27
 8002f98:	2218      	movs	r2, #24
 8002f9a:	4694      	mov	ip, r2
 8002f9c:	44bc      	add	ip, r7
 8002f9e:	4463      	add	r3, ip
 8002fa0:	2208      	movs	r2, #8
 8002fa2:	701a      	strb	r2, [r3, #0]
 8002fa4:	e070      	b.n	8003088 <UART_SetConfig+0x260>
 8002fa6:	231b      	movs	r3, #27
 8002fa8:	2218      	movs	r2, #24
 8002faa:	4694      	mov	ip, r2
 8002fac:	44bc      	add	ip, r7
 8002fae:	4463      	add	r3, ip
 8002fb0:	2210      	movs	r2, #16
 8002fb2:	701a      	strb	r2, [r3, #0]
 8002fb4:	46c0      	nop			; (mov r8, r8)
 8002fb6:	e067      	b.n	8003088 <UART_SetConfig+0x260>
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a7e      	ldr	r2, [pc, #504]	; (80031b8 <UART_SetConfig+0x390>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d107      	bne.n	8002fd2 <UART_SetConfig+0x1aa>
 8002fc2:	231b      	movs	r3, #27
 8002fc4:	2218      	movs	r2, #24
 8002fc6:	4694      	mov	ip, r2
 8002fc8:	44bc      	add	ip, r7
 8002fca:	4463      	add	r3, ip
 8002fcc:	2200      	movs	r2, #0
 8002fce:	701a      	strb	r2, [r3, #0]
 8002fd0:	e05a      	b.n	8003088 <UART_SetConfig+0x260>
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a79      	ldr	r2, [pc, #484]	; (80031bc <UART_SetConfig+0x394>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d107      	bne.n	8002fec <UART_SetConfig+0x1c4>
 8002fdc:	231b      	movs	r3, #27
 8002fde:	2218      	movs	r2, #24
 8002fe0:	4694      	mov	ip, r2
 8002fe2:	44bc      	add	ip, r7
 8002fe4:	4463      	add	r3, ip
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	e04d      	b.n	8003088 <UART_SetConfig+0x260>
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a6c      	ldr	r2, [pc, #432]	; (80031a4 <UART_SetConfig+0x37c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d141      	bne.n	800307a <UART_SetConfig+0x252>
 8002ff6:	4b6e      	ldr	r3, [pc, #440]	; (80031b0 <UART_SetConfig+0x388>)
 8002ff8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ffa:	23c0      	movs	r3, #192	; 0xc0
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	4013      	ands	r3, r2
 8003000:	2280      	movs	r2, #128	; 0x80
 8003002:	00d2      	lsls	r2, r2, #3
 8003004:	4293      	cmp	r3, r2
 8003006:	d01f      	beq.n	8003048 <UART_SetConfig+0x220>
 8003008:	2280      	movs	r2, #128	; 0x80
 800300a:	00d2      	lsls	r2, r2, #3
 800300c:	4293      	cmp	r3, r2
 800300e:	d802      	bhi.n	8003016 <UART_SetConfig+0x1ee>
 8003010:	2b00      	cmp	r3, #0
 8003012:	d009      	beq.n	8003028 <UART_SetConfig+0x200>
 8003014:	e028      	b.n	8003068 <UART_SetConfig+0x240>
 8003016:	2280      	movs	r2, #128	; 0x80
 8003018:	0112      	lsls	r2, r2, #4
 800301a:	4293      	cmp	r3, r2
 800301c:	d00c      	beq.n	8003038 <UART_SetConfig+0x210>
 800301e:	22c0      	movs	r2, #192	; 0xc0
 8003020:	0112      	lsls	r2, r2, #4
 8003022:	4293      	cmp	r3, r2
 8003024:	d018      	beq.n	8003058 <UART_SetConfig+0x230>
 8003026:	e01f      	b.n	8003068 <UART_SetConfig+0x240>
 8003028:	231b      	movs	r3, #27
 800302a:	2218      	movs	r2, #24
 800302c:	4694      	mov	ip, r2
 800302e:	44bc      	add	ip, r7
 8003030:	4463      	add	r3, ip
 8003032:	2200      	movs	r2, #0
 8003034:	701a      	strb	r2, [r3, #0]
 8003036:	e027      	b.n	8003088 <UART_SetConfig+0x260>
 8003038:	231b      	movs	r3, #27
 800303a:	2218      	movs	r2, #24
 800303c:	4694      	mov	ip, r2
 800303e:	44bc      	add	ip, r7
 8003040:	4463      	add	r3, ip
 8003042:	2202      	movs	r2, #2
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	e01f      	b.n	8003088 <UART_SetConfig+0x260>
 8003048:	231b      	movs	r3, #27
 800304a:	2218      	movs	r2, #24
 800304c:	4694      	mov	ip, r2
 800304e:	44bc      	add	ip, r7
 8003050:	4463      	add	r3, ip
 8003052:	2204      	movs	r2, #4
 8003054:	701a      	strb	r2, [r3, #0]
 8003056:	e017      	b.n	8003088 <UART_SetConfig+0x260>
 8003058:	231b      	movs	r3, #27
 800305a:	2218      	movs	r2, #24
 800305c:	4694      	mov	ip, r2
 800305e:	44bc      	add	ip, r7
 8003060:	4463      	add	r3, ip
 8003062:	2208      	movs	r2, #8
 8003064:	701a      	strb	r2, [r3, #0]
 8003066:	e00f      	b.n	8003088 <UART_SetConfig+0x260>
 8003068:	231b      	movs	r3, #27
 800306a:	2218      	movs	r2, #24
 800306c:	4694      	mov	ip, r2
 800306e:	44bc      	add	ip, r7
 8003070:	4463      	add	r3, ip
 8003072:	2210      	movs	r2, #16
 8003074:	701a      	strb	r2, [r3, #0]
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	e006      	b.n	8003088 <UART_SetConfig+0x260>
 800307a:	231b      	movs	r3, #27
 800307c:	2218      	movs	r2, #24
 800307e:	4694      	mov	ip, r2
 8003080:	44bc      	add	ip, r7
 8003082:	4463      	add	r3, ip
 8003084:	2210      	movs	r2, #16
 8003086:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a45      	ldr	r2, [pc, #276]	; (80031a4 <UART_SetConfig+0x37c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d000      	beq.n	8003094 <UART_SetConfig+0x26c>
 8003092:	e09d      	b.n	80031d0 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003094:	231b      	movs	r3, #27
 8003096:	2218      	movs	r2, #24
 8003098:	4694      	mov	ip, r2
 800309a:	44bc      	add	ip, r7
 800309c:	4463      	add	r3, ip
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d00d      	beq.n	80030c0 <UART_SetConfig+0x298>
 80030a4:	dc02      	bgt.n	80030ac <UART_SetConfig+0x284>
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <UART_SetConfig+0x28e>
 80030aa:	e01d      	b.n	80030e8 <UART_SetConfig+0x2c0>
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d012      	beq.n	80030d6 <UART_SetConfig+0x2ae>
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d015      	beq.n	80030e0 <UART_SetConfig+0x2b8>
 80030b4:	e018      	b.n	80030e8 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80030b6:	f7fe fecf 	bl	8001e58 <HAL_RCC_GetPCLK1Freq>
 80030ba:	0003      	movs	r3, r0
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80030be:	e01b      	b.n	80030f8 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030c0:	4b3b      	ldr	r3, [pc, #236]	; (80031b0 <UART_SetConfig+0x388>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2210      	movs	r2, #16
 80030c6:	4013      	ands	r3, r2
 80030c8:	d002      	beq.n	80030d0 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 80030ca:	4b3d      	ldr	r3, [pc, #244]	; (80031c0 <UART_SetConfig+0x398>)
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 80030ce:	e013      	b.n	80030f8 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80030d0:	4b3c      	ldr	r3, [pc, #240]	; (80031c4 <UART_SetConfig+0x39c>)
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80030d4:	e010      	b.n	80030f8 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80030d6:	f7fe fe33 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 80030da:	0003      	movs	r3, r0
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80030de:	e00b      	b.n	80030f8 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80030e0:	2380      	movs	r3, #128	; 0x80
 80030e2:	021b      	lsls	r3, r3, #8
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80030e6:	e007      	b.n	80030f8 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80030e8:	2313      	movs	r3, #19
 80030ea:	2218      	movs	r2, #24
 80030ec:	4694      	mov	ip, r2
 80030ee:	44bc      	add	ip, r7
 80030f0:	4463      	add	r3, ip
 80030f2:	2201      	movs	r2, #1
 80030f4:	701a      	strb	r2, [r3, #0]
        break;
 80030f6:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d100      	bne.n	8003100 <UART_SetConfig+0x2d8>
 80030fe:	e1a6      	b.n	800344e <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	0013      	movs	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	189b      	adds	r3, r3, r2
 800310a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310c:	429a      	cmp	r2, r3
 800310e:	d305      	bcc.n	800311c <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003118:	429a      	cmp	r2, r3
 800311a:	d907      	bls.n	800312c <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 800311c:	2313      	movs	r3, #19
 800311e:	2218      	movs	r2, #24
 8003120:	4694      	mov	ip, r2
 8003122:	44bc      	add	ip, r7
 8003124:	4463      	add	r3, ip
 8003126:	2201      	movs	r2, #1
 8003128:	701a      	strb	r2, [r3, #0]
 800312a:	e190      	b.n	800344e <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	6939      	ldr	r1, [r7, #16]
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	000b      	movs	r3, r1
 800313a:	0e1b      	lsrs	r3, r3, #24
 800313c:	0010      	movs	r0, r2
 800313e:	0205      	lsls	r5, r0, #8
 8003140:	431d      	orrs	r5, r3
 8003142:	000b      	movs	r3, r1
 8003144:	021c      	lsls	r4, r3, #8
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	085b      	lsrs	r3, r3, #1
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	68b8      	ldr	r0, [r7, #8]
 8003154:	68f9      	ldr	r1, [r7, #12]
 8003156:	1900      	adds	r0, r0, r4
 8003158:	4169      	adcs	r1, r5
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	603b      	str	r3, [r7, #0]
 8003160:	2300      	movs	r3, #0
 8003162:	607b      	str	r3, [r7, #4]
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f7fd f85a 	bl	8000220 <__aeabi_uldivmod>
 800316c:	0003      	movs	r3, r0
 800316e:	000c      	movs	r4, r1
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003174:	4a14      	ldr	r2, [pc, #80]	; (80031c8 <UART_SetConfig+0x3a0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d908      	bls.n	800318c <UART_SetConfig+0x364>
 800317a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317c:	4a13      	ldr	r2, [pc, #76]	; (80031cc <UART_SetConfig+0x3a4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d804      	bhi.n	800318c <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003188:	60da      	str	r2, [r3, #12]
 800318a:	e160      	b.n	800344e <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 800318c:	2313      	movs	r3, #19
 800318e:	2218      	movs	r2, #24
 8003190:	4694      	mov	ip, r2
 8003192:	44bc      	add	ip, r7
 8003194:	4463      	add	r3, ip
 8003196:	2201      	movs	r2, #1
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	e158      	b.n	800344e <UART_SetConfig+0x626>
 800319c:	efff69f3 	.word	0xefff69f3
 80031a0:	ffffcfff 	.word	0xffffcfff
 80031a4:	40004800 	.word	0x40004800
 80031a8:	fffff4ff 	.word	0xfffff4ff
 80031ac:	40013800 	.word	0x40013800
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40004400 	.word	0x40004400
 80031b8:	40004c00 	.word	0x40004c00
 80031bc:	40005000 	.word	0x40005000
 80031c0:	003d0900 	.word	0x003d0900
 80031c4:	00f42400 	.word	0x00f42400
 80031c8:	000002ff 	.word	0x000002ff
 80031cc:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	69da      	ldr	r2, [r3, #28]
 80031d4:	2380      	movs	r3, #128	; 0x80
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	429a      	cmp	r2, r3
 80031da:	d000      	beq.n	80031de <UART_SetConfig+0x3b6>
 80031dc:	e0a9      	b.n	8003332 <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 80031de:	231b      	movs	r3, #27
 80031e0:	2218      	movs	r2, #24
 80031e2:	4694      	mov	ip, r2
 80031e4:	44bc      	add	ip, r7
 80031e6:	4463      	add	r3, ip
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d86d      	bhi.n	80032ca <UART_SetConfig+0x4a2>
 80031ee:	009a      	lsls	r2, r3, #2
 80031f0:	4b9f      	ldr	r3, [pc, #636]	; (8003470 <UART_SetConfig+0x648>)
 80031f2:	18d3      	adds	r3, r2, r3
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80031f8:	f7fe fe2e 	bl	8001e58 <HAL_RCC_GetPCLK1Freq>
 80031fc:	0003      	movs	r3, r0
 80031fe:	005a      	lsls	r2, r3, #1
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	18d2      	adds	r2, r2, r3
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	0019      	movs	r1, r3
 800320e:	0010      	movs	r0, r2
 8003210:	f7fc ff7a 	bl	8000108 <__udivsi3>
 8003214:	0003      	movs	r3, r0
 8003216:	b29b      	uxth	r3, r3
 8003218:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800321a:	e05e      	b.n	80032da <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800321c:	f7fe fe32 	bl	8001e84 <HAL_RCC_GetPCLK2Freq>
 8003220:	0003      	movs	r3, r0
 8003222:	005a      	lsls	r2, r3, #1
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	085b      	lsrs	r3, r3, #1
 800322a:	18d2      	adds	r2, r2, r3
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	0019      	movs	r1, r3
 8003232:	0010      	movs	r0, r2
 8003234:	f7fc ff68 	bl	8000108 <__udivsi3>
 8003238:	0003      	movs	r3, r0
 800323a:	b29b      	uxth	r3, r3
 800323c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800323e:	e04c      	b.n	80032da <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003240:	4b8c      	ldr	r3, [pc, #560]	; (8003474 <UART_SetConfig+0x64c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2210      	movs	r2, #16
 8003246:	4013      	ands	r3, r2
 8003248:	d00e      	beq.n	8003268 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	085b      	lsrs	r3, r3, #1
 8003250:	4a89      	ldr	r2, [pc, #548]	; (8003478 <UART_SetConfig+0x650>)
 8003252:	189a      	adds	r2, r3, r2
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	0019      	movs	r1, r3
 800325a:	0010      	movs	r0, r2
 800325c:	f7fc ff54 	bl	8000108 <__udivsi3>
 8003260:	0003      	movs	r3, r0
 8003262:	b29b      	uxth	r3, r3
 8003264:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8003266:	e038      	b.n	80032da <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	085b      	lsrs	r3, r3, #1
 800326e:	4a83      	ldr	r2, [pc, #524]	; (800347c <UART_SetConfig+0x654>)
 8003270:	189a      	adds	r2, r3, r2
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	0019      	movs	r1, r3
 8003278:	0010      	movs	r0, r2
 800327a:	f7fc ff45 	bl	8000108 <__udivsi3>
 800327e:	0003      	movs	r3, r0
 8003280:	b29b      	uxth	r3, r3
 8003282:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003284:	e029      	b.n	80032da <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003286:	f7fe fd5b 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 800328a:	0003      	movs	r3, r0
 800328c:	005a      	lsls	r2, r3, #1
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	085b      	lsrs	r3, r3, #1
 8003294:	18d2      	adds	r2, r2, r3
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	0019      	movs	r1, r3
 800329c:	0010      	movs	r0, r2
 800329e:	f7fc ff33 	bl	8000108 <__udivsi3>
 80032a2:	0003      	movs	r3, r0
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032a8:	e017      	b.n	80032da <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	085b      	lsrs	r3, r3, #1
 80032b0:	2280      	movs	r2, #128	; 0x80
 80032b2:	0252      	lsls	r2, r2, #9
 80032b4:	189a      	adds	r2, r3, r2
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	0019      	movs	r1, r3
 80032bc:	0010      	movs	r0, r2
 80032be:	f7fc ff23 	bl	8000108 <__udivsi3>
 80032c2:	0003      	movs	r3, r0
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032c8:	e007      	b.n	80032da <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80032ca:	2313      	movs	r3, #19
 80032cc:	2218      	movs	r2, #24
 80032ce:	4694      	mov	ip, r2
 80032d0:	44bc      	add	ip, r7
 80032d2:	4463      	add	r3, ip
 80032d4:	2201      	movs	r2, #1
 80032d6:	701a      	strb	r2, [r3, #0]
        break;
 80032d8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032dc:	2b0f      	cmp	r3, #15
 80032de:	d920      	bls.n	8003322 <UART_SetConfig+0x4fa>
 80032e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e2:	4a67      	ldr	r2, [pc, #412]	; (8003480 <UART_SetConfig+0x658>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d81c      	bhi.n	8003322 <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	200a      	movs	r0, #10
 80032ee:	2418      	movs	r4, #24
 80032f0:	193b      	adds	r3, r7, r4
 80032f2:	181b      	adds	r3, r3, r0
 80032f4:	210f      	movs	r1, #15
 80032f6:	438a      	bics	r2, r1
 80032f8:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fc:	085b      	lsrs	r3, r3, #1
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2207      	movs	r2, #7
 8003302:	4013      	ands	r3, r2
 8003304:	b299      	uxth	r1, r3
 8003306:	193b      	adds	r3, r7, r4
 8003308:	181b      	adds	r3, r3, r0
 800330a:	193a      	adds	r2, r7, r4
 800330c:	1812      	adds	r2, r2, r0
 800330e:	8812      	ldrh	r2, [r2, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	193a      	adds	r2, r7, r4
 800331a:	1812      	adds	r2, r2, r0
 800331c:	8812      	ldrh	r2, [r2, #0]
 800331e:	60da      	str	r2, [r3, #12]
 8003320:	e095      	b.n	800344e <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8003322:	2313      	movs	r3, #19
 8003324:	2218      	movs	r2, #24
 8003326:	4694      	mov	ip, r2
 8003328:	44bc      	add	ip, r7
 800332a:	4463      	add	r3, ip
 800332c:	2201      	movs	r2, #1
 800332e:	701a      	strb	r2, [r3, #0]
 8003330:	e08d      	b.n	800344e <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 8003332:	231b      	movs	r3, #27
 8003334:	2218      	movs	r2, #24
 8003336:	4694      	mov	ip, r2
 8003338:	44bc      	add	ip, r7
 800333a:	4463      	add	r3, ip
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b08      	cmp	r3, #8
 8003340:	d86a      	bhi.n	8003418 <UART_SetConfig+0x5f0>
 8003342:	009a      	lsls	r2, r3, #2
 8003344:	4b4f      	ldr	r3, [pc, #316]	; (8003484 <UART_SetConfig+0x65c>)
 8003346:	18d3      	adds	r3, r2, r3
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800334c:	f7fe fd84 	bl	8001e58 <HAL_RCC_GetPCLK1Freq>
 8003350:	0002      	movs	r2, r0
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	085b      	lsrs	r3, r3, #1
 8003358:	18d2      	adds	r2, r2, r3
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	0019      	movs	r1, r3
 8003360:	0010      	movs	r0, r2
 8003362:	f7fc fed1 	bl	8000108 <__udivsi3>
 8003366:	0003      	movs	r3, r0
 8003368:	b29b      	uxth	r3, r3
 800336a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800336c:	e05c      	b.n	8003428 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800336e:	f7fe fd89 	bl	8001e84 <HAL_RCC_GetPCLK2Freq>
 8003372:	0002      	movs	r2, r0
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	085b      	lsrs	r3, r3, #1
 800337a:	18d2      	adds	r2, r2, r3
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	0019      	movs	r1, r3
 8003382:	0010      	movs	r0, r2
 8003384:	f7fc fec0 	bl	8000108 <__udivsi3>
 8003388:	0003      	movs	r3, r0
 800338a:	b29b      	uxth	r3, r3
 800338c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800338e:	e04b      	b.n	8003428 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003390:	4b38      	ldr	r3, [pc, #224]	; (8003474 <UART_SetConfig+0x64c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2210      	movs	r2, #16
 8003396:	4013      	ands	r3, r2
 8003398:	d00e      	beq.n	80033b8 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	085b      	lsrs	r3, r3, #1
 80033a0:	4a39      	ldr	r2, [pc, #228]	; (8003488 <UART_SetConfig+0x660>)
 80033a2:	189a      	adds	r2, r3, r2
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	0019      	movs	r1, r3
 80033aa:	0010      	movs	r0, r2
 80033ac:	f7fc feac 	bl	8000108 <__udivsi3>
 80033b0:	0003      	movs	r3, r0
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80033b6:	e037      	b.n	8003428 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	085b      	lsrs	r3, r3, #1
 80033be:	4a33      	ldr	r2, [pc, #204]	; (800348c <UART_SetConfig+0x664>)
 80033c0:	189a      	adds	r2, r3, r2
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	0019      	movs	r1, r3
 80033c8:	0010      	movs	r0, r2
 80033ca:	f7fc fe9d 	bl	8000108 <__udivsi3>
 80033ce:	0003      	movs	r3, r0
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033d4:	e028      	b.n	8003428 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80033d6:	f7fe fcb3 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 80033da:	0002      	movs	r2, r0
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	085b      	lsrs	r3, r3, #1
 80033e2:	18d2      	adds	r2, r2, r3
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	0019      	movs	r1, r3
 80033ea:	0010      	movs	r0, r2
 80033ec:	f7fc fe8c 	bl	8000108 <__udivsi3>
 80033f0:	0003      	movs	r3, r0
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033f6:	e017      	b.n	8003428 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	085b      	lsrs	r3, r3, #1
 80033fe:	2280      	movs	r2, #128	; 0x80
 8003400:	0212      	lsls	r2, r2, #8
 8003402:	189a      	adds	r2, r3, r2
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	0019      	movs	r1, r3
 800340a:	0010      	movs	r0, r2
 800340c:	f7fc fe7c 	bl	8000108 <__udivsi3>
 8003410:	0003      	movs	r3, r0
 8003412:	b29b      	uxth	r3, r3
 8003414:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003416:	e007      	b.n	8003428 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003418:	2313      	movs	r3, #19
 800341a:	2218      	movs	r2, #24
 800341c:	4694      	mov	ip, r2
 800341e:	44bc      	add	ip, r7
 8003420:	4463      	add	r3, ip
 8003422:	2201      	movs	r2, #1
 8003424:	701a      	strb	r2, [r3, #0]
        break;
 8003426:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342a:	2b0f      	cmp	r3, #15
 800342c:	d908      	bls.n	8003440 <UART_SetConfig+0x618>
 800342e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003430:	4a13      	ldr	r2, [pc, #76]	; (8003480 <UART_SetConfig+0x658>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d804      	bhi.n	8003440 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800343c:	60da      	str	r2, [r3, #12]
 800343e:	e006      	b.n	800344e <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8003440:	2313      	movs	r3, #19
 8003442:	2218      	movs	r2, #24
 8003444:	4694      	mov	ip, r2
 8003446:	44bc      	add	ip, r7
 8003448:	4463      	add	r3, ip
 800344a:	2201      	movs	r2, #1
 800344c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	2200      	movs	r2, #0
 8003452:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	2200      	movs	r2, #0
 8003458:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800345a:	2313      	movs	r3, #19
 800345c:	2218      	movs	r2, #24
 800345e:	4694      	mov	ip, r2
 8003460:	44bc      	add	ip, r7
 8003462:	4463      	add	r3, ip
 8003464:	781b      	ldrb	r3, [r3, #0]
}
 8003466:	0018      	movs	r0, r3
 8003468:	46bd      	mov	sp, r7
 800346a:	b00e      	add	sp, #56	; 0x38
 800346c:	bdb0      	pop	{r4, r5, r7, pc}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	08003a1c 	.word	0x08003a1c
 8003474:	40021000 	.word	0x40021000
 8003478:	007a1200 	.word	0x007a1200
 800347c:	01e84800 	.word	0x01e84800
 8003480:	0000ffff 	.word	0x0000ffff
 8003484:	08003a40 	.word	0x08003a40
 8003488:	003d0900 	.word	0x003d0900
 800348c:	00f42400 	.word	0x00f42400

08003490 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	2201      	movs	r2, #1
 800349e:	4013      	ands	r3, r2
 80034a0:	d00b      	beq.n	80034ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	4a4a      	ldr	r2, [pc, #296]	; (80035d4 <UART_AdvFeatureConfig+0x144>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	0019      	movs	r1, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	2202      	movs	r2, #2
 80034c0:	4013      	ands	r3, r2
 80034c2:	d00b      	beq.n	80034dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	4a43      	ldr	r2, [pc, #268]	; (80035d8 <UART_AdvFeatureConfig+0x148>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	0019      	movs	r1, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	2204      	movs	r2, #4
 80034e2:	4013      	ands	r3, r2
 80034e4:	d00b      	beq.n	80034fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	4a3b      	ldr	r2, [pc, #236]	; (80035dc <UART_AdvFeatureConfig+0x14c>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	0019      	movs	r1, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	2208      	movs	r2, #8
 8003504:	4013      	ands	r3, r2
 8003506:	d00b      	beq.n	8003520 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4a34      	ldr	r2, [pc, #208]	; (80035e0 <UART_AdvFeatureConfig+0x150>)
 8003510:	4013      	ands	r3, r2
 8003512:	0019      	movs	r1, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	2210      	movs	r2, #16
 8003526:	4013      	ands	r3, r2
 8003528:	d00b      	beq.n	8003542 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4a2c      	ldr	r2, [pc, #176]	; (80035e4 <UART_AdvFeatureConfig+0x154>)
 8003532:	4013      	ands	r3, r2
 8003534:	0019      	movs	r1, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	2220      	movs	r2, #32
 8003548:	4013      	ands	r3, r2
 800354a:	d00b      	beq.n	8003564 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	4a25      	ldr	r2, [pc, #148]	; (80035e8 <UART_AdvFeatureConfig+0x158>)
 8003554:	4013      	ands	r3, r2
 8003556:	0019      	movs	r1, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	2240      	movs	r2, #64	; 0x40
 800356a:	4013      	ands	r3, r2
 800356c:	d01d      	beq.n	80035aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4a1d      	ldr	r2, [pc, #116]	; (80035ec <UART_AdvFeatureConfig+0x15c>)
 8003576:	4013      	ands	r3, r2
 8003578:	0019      	movs	r1, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	035b      	lsls	r3, r3, #13
 800358e:	429a      	cmp	r2, r3
 8003590:	d10b      	bne.n	80035aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	4a15      	ldr	r2, [pc, #84]	; (80035f0 <UART_AdvFeatureConfig+0x160>)
 800359a:	4013      	ands	r3, r2
 800359c:	0019      	movs	r1, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	2280      	movs	r2, #128	; 0x80
 80035b0:	4013      	ands	r3, r2
 80035b2:	d00b      	beq.n	80035cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4a0e      	ldr	r2, [pc, #56]	; (80035f4 <UART_AdvFeatureConfig+0x164>)
 80035bc:	4013      	ands	r3, r2
 80035be:	0019      	movs	r1, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	605a      	str	r2, [r3, #4]
  }
}
 80035cc:	46c0      	nop			; (mov r8, r8)
 80035ce:	46bd      	mov	sp, r7
 80035d0:	b002      	add	sp, #8
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	fffdffff 	.word	0xfffdffff
 80035d8:	fffeffff 	.word	0xfffeffff
 80035dc:	fffbffff 	.word	0xfffbffff
 80035e0:	ffff7fff 	.word	0xffff7fff
 80035e4:	ffffefff 	.word	0xffffefff
 80035e8:	ffffdfff 	.word	0xffffdfff
 80035ec:	ffefffff 	.word	0xffefffff
 80035f0:	ff9fffff 	.word	0xff9fffff
 80035f4:	fff7ffff 	.word	0xfff7ffff

080035f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003606:	f7fd fc1d 	bl	8000e44 <HAL_GetTick>
 800360a:	0003      	movs	r3, r0
 800360c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2208      	movs	r2, #8
 8003616:	4013      	ands	r3, r2
 8003618:	2b08      	cmp	r3, #8
 800361a:	d10d      	bne.n	8003638 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	0399      	lsls	r1, r3, #14
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	4b16      	ldr	r3, [pc, #88]	; (8003680 <UART_CheckIdleState+0x88>)
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	0013      	movs	r3, r2
 800362a:	2200      	movs	r2, #0
 800362c:	f000 f82a 	bl	8003684 <UART_WaitOnFlagUntilTimeout>
 8003630:	1e03      	subs	r3, r0, #0
 8003632:	d001      	beq.n	8003638 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e01f      	b.n	8003678 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2204      	movs	r2, #4
 8003640:	4013      	ands	r3, r2
 8003642:	2b04      	cmp	r3, #4
 8003644:	d10d      	bne.n	8003662 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	2380      	movs	r3, #128	; 0x80
 800364a:	03d9      	lsls	r1, r3, #15
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <UART_CheckIdleState+0x88>)
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	0013      	movs	r3, r2
 8003654:	2200      	movs	r2, #0
 8003656:	f000 f815 	bl	8003684 <UART_WaitOnFlagUntilTimeout>
 800365a:	1e03      	subs	r3, r0, #0
 800365c:	d001      	beq.n	8003662 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e00a      	b.n	8003678 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2220      	movs	r2, #32
 8003666:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2270      	movs	r2, #112	; 0x70
 8003672:	2100      	movs	r1, #0
 8003674:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	0018      	movs	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	b004      	add	sp, #16
 800367e:	bd80      	pop	{r7, pc}
 8003680:	01ffffff 	.word	0x01ffffff

08003684 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	1dfb      	adds	r3, r7, #7
 8003692:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003694:	e029      	b.n	80036ea <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	3301      	adds	r3, #1
 800369a:	d026      	beq.n	80036ea <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369c:	f7fd fbd2 	bl	8000e44 <HAL_GetTick>
 80036a0:	0002      	movs	r2, r0
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d302      	bcc.n	80036b2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d11b      	bne.n	80036ea <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4915      	ldr	r1, [pc, #84]	; (8003714 <UART_WaitOnFlagUntilTimeout+0x90>)
 80036be:	400a      	ands	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2101      	movs	r1, #1
 80036ce:	438a      	bics	r2, r1
 80036d0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2220      	movs	r2, #32
 80036d6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2220      	movs	r2, #32
 80036dc:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2270      	movs	r2, #112	; 0x70
 80036e2:	2100      	movs	r1, #0
 80036e4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e00f      	b.n	800370a <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	4013      	ands	r3, r2
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	425a      	negs	r2, r3
 80036fa:	4153      	adcs	r3, r2
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	001a      	movs	r2, r3
 8003700:	1dfb      	adds	r3, r7, #7
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d0c6      	beq.n	8003696 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	0018      	movs	r0, r3
 800370c:	46bd      	mov	sp, r7
 800370e:	b004      	add	sp, #16
 8003710:	bd80      	pop	{r7, pc}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	fffffe5f 	.word	0xfffffe5f

08003718 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	490a      	ldr	r1, [pc, #40]	; (8003754 <UART_EndRxTransfer+0x3c>)
 800372c:	400a      	ands	r2, r1
 800372e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2101      	movs	r1, #1
 800373c:	438a      	bics	r2, r1
 800373e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2220      	movs	r2, #32
 8003744:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800374c:	46c0      	nop			; (mov r8, r8)
 800374e:	46bd      	mov	sp, r7
 8003750:	b002      	add	sp, #8
 8003752:	bd80      	pop	{r7, pc}
 8003754:	fffffedf 	.word	0xfffffedf

08003758 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003764:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	225a      	movs	r2, #90	; 0x5a
 800376a:	2100      	movs	r1, #0
 800376c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2252      	movs	r2, #82	; 0x52
 8003772:	2100      	movs	r1, #0
 8003774:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	0018      	movs	r0, r3
 800377a:	f7ff fb3b 	bl	8002df4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	46bd      	mov	sp, r7
 8003782:	b004      	add	sp, #16
 8003784:	bd80      	pop	{r7, pc}

08003786 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b084      	sub	sp, #16
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003792:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	225a      	movs	r2, #90	; 0x5a
 8003798:	2100      	movs	r1, #0
 800379a:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	220f      	movs	r2, #15
 80037a2:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699a      	ldr	r2, [r3, #24]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2108      	movs	r1, #8
 80037b0:	430a      	orrs	r2, r1
 80037b2:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	0018      	movs	r0, r3
 80037be:	f7fc ff1f 	bl	8000600 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b004      	add	sp, #16
 80037c8:	bd80      	pop	{r7, pc}

080037ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b082      	sub	sp, #8
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2140      	movs	r1, #64	; 0x40
 80037de:	438a      	bics	r2, r1
 80037e0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	0018      	movs	r0, r3
 80037f2:	f7fc fee1 	bl	80005b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	46bd      	mov	sp, r7
 80037fa:	b002      	add	sp, #8
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003808:	230e      	movs	r3, #14
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	215c      	movs	r1, #92	; 0x5c
 8003810:	5a52      	ldrh	r2, [r2, r1]
 8003812:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003818:	2b22      	cmp	r3, #34	; 0x22
 800381a:	d140      	bne.n	800389e <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003822:	210c      	movs	r1, #12
 8003824:	187b      	adds	r3, r7, r1
 8003826:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003828:	187b      	adds	r3, r7, r1
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	b2da      	uxtb	r2, r3
 800382e:	230e      	movs	r3, #14
 8003830:	18fb      	adds	r3, r7, r3
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	b2d9      	uxtb	r1, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383a:	400a      	ands	r2, r1
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	225a      	movs	r2, #90	; 0x5a
 800384e:	5a9b      	ldrh	r3, [r3, r2]
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b01      	subs	r3, #1
 8003854:	b299      	uxth	r1, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	225a      	movs	r2, #90	; 0x5a
 800385a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	225a      	movs	r2, #90	; 0x5a
 8003860:	5a9b      	ldrh	r3, [r3, r2]
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	d122      	bne.n	80038ae <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4911      	ldr	r1, [pc, #68]	; (80038b8 <UART_RxISR_8BIT+0xb8>)
 8003874:	400a      	ands	r2, r1
 8003876:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2101      	movs	r1, #1
 8003884:	438a      	bics	r2, r1
 8003886:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	0018      	movs	r0, r3
 8003898:	f7fc fe66 	bl	8000568 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800389c:	e007      	b.n	80038ae <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699a      	ldr	r2, [r3, #24]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2108      	movs	r1, #8
 80038aa:	430a      	orrs	r2, r1
 80038ac:	619a      	str	r2, [r3, #24]
}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b004      	add	sp, #16
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	fffffedf 	.word	0xfffffedf

080038bc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80038c4:	230e      	movs	r3, #14
 80038c6:	18fb      	adds	r3, r7, r3
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	215c      	movs	r1, #92	; 0x5c
 80038cc:	5a52      	ldrh	r2, [r2, r1]
 80038ce:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038d4:	2b22      	cmp	r3, #34	; 0x22
 80038d6:	d140      	bne.n	800395a <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038de:	210c      	movs	r1, #12
 80038e0:	187b      	adds	r3, r7, r1
 80038e2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80038ea:	187b      	adds	r3, r7, r1
 80038ec:	220e      	movs	r2, #14
 80038ee:	18ba      	adds	r2, r7, r2
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	8812      	ldrh	r2, [r2, #0]
 80038f4:	4013      	ands	r3, r2
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003900:	1c9a      	adds	r2, r3, #2
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	225a      	movs	r2, #90	; 0x5a
 800390a:	5a9b      	ldrh	r3, [r3, r2]
 800390c:	b29b      	uxth	r3, r3
 800390e:	3b01      	subs	r3, #1
 8003910:	b299      	uxth	r1, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	225a      	movs	r2, #90	; 0x5a
 8003916:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	225a      	movs	r2, #90	; 0x5a
 800391c:	5a9b      	ldrh	r3, [r3, r2]
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d122      	bne.n	800396a <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4911      	ldr	r1, [pc, #68]	; (8003974 <UART_RxISR_16BIT+0xb8>)
 8003930:	400a      	ands	r2, r1
 8003932:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2101      	movs	r1, #1
 8003940:	438a      	bics	r2, r1
 8003942:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	0018      	movs	r0, r3
 8003954:	f7fc fe08 	bl	8000568 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003958:	e007      	b.n	800396a <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699a      	ldr	r2, [r3, #24]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2108      	movs	r1, #8
 8003966:	430a      	orrs	r2, r1
 8003968:	619a      	str	r2, [r3, #24]
}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	46bd      	mov	sp, r7
 800396e:	b004      	add	sp, #16
 8003970:	bd80      	pop	{r7, pc}
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	fffffedf 	.word	0xfffffedf

08003978 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003980:	46c0      	nop			; (mov r8, r8)
 8003982:	46bd      	mov	sp, r7
 8003984:	b002      	add	sp, #8
 8003986:	bd80      	pop	{r7, pc}

08003988 <__libc_init_array>:
 8003988:	b570      	push	{r4, r5, r6, lr}
 800398a:	2600      	movs	r6, #0
 800398c:	4d0c      	ldr	r5, [pc, #48]	; (80039c0 <__libc_init_array+0x38>)
 800398e:	4c0d      	ldr	r4, [pc, #52]	; (80039c4 <__libc_init_array+0x3c>)
 8003990:	1b64      	subs	r4, r4, r5
 8003992:	10a4      	asrs	r4, r4, #2
 8003994:	42a6      	cmp	r6, r4
 8003996:	d109      	bne.n	80039ac <__libc_init_array+0x24>
 8003998:	2600      	movs	r6, #0
 800399a:	f000 f821 	bl	80039e0 <_init>
 800399e:	4d0a      	ldr	r5, [pc, #40]	; (80039c8 <__libc_init_array+0x40>)
 80039a0:	4c0a      	ldr	r4, [pc, #40]	; (80039cc <__libc_init_array+0x44>)
 80039a2:	1b64      	subs	r4, r4, r5
 80039a4:	10a4      	asrs	r4, r4, #2
 80039a6:	42a6      	cmp	r6, r4
 80039a8:	d105      	bne.n	80039b6 <__libc_init_array+0x2e>
 80039aa:	bd70      	pop	{r4, r5, r6, pc}
 80039ac:	00b3      	lsls	r3, r6, #2
 80039ae:	58eb      	ldr	r3, [r5, r3]
 80039b0:	4798      	blx	r3
 80039b2:	3601      	adds	r6, #1
 80039b4:	e7ee      	b.n	8003994 <__libc_init_array+0xc>
 80039b6:	00b3      	lsls	r3, r6, #2
 80039b8:	58eb      	ldr	r3, [r5, r3]
 80039ba:	4798      	blx	r3
 80039bc:	3601      	adds	r6, #1
 80039be:	e7f2      	b.n	80039a6 <__libc_init_array+0x1e>
 80039c0:	08003a6c 	.word	0x08003a6c
 80039c4:	08003a6c 	.word	0x08003a6c
 80039c8:	08003a6c 	.word	0x08003a6c
 80039cc:	08003a70 	.word	0x08003a70

080039d0 <memset>:
 80039d0:	0003      	movs	r3, r0
 80039d2:	1812      	adds	r2, r2, r0
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d100      	bne.n	80039da <memset+0xa>
 80039d8:	4770      	bx	lr
 80039da:	7019      	strb	r1, [r3, #0]
 80039dc:	3301      	adds	r3, #1
 80039de:	e7f9      	b.n	80039d4 <memset+0x4>

080039e0 <_init>:
 80039e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039e6:	bc08      	pop	{r3}
 80039e8:	469e      	mov	lr, r3
 80039ea:	4770      	bx	lr

080039ec <_fini>:
 80039ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039f2:	bc08      	pop	{r3}
 80039f4:	469e      	mov	lr, r3
 80039f6:	4770      	bx	lr
