
deprem uyari.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003574  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003634  08003634  00013634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036a0  080036a0  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  080036a0  080036a0  000136a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036a8  080036a8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036a8  080036a8  000136a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036ac  080036ac  000136ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080036b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000004  080036b4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  080036b4  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000924a  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001606  00000000  00000000  00029276  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009f0  00000000  00000000  0002a880  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000928  00000000  00000000  0002b270  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00011bef  00000000  00000000  0002bb98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000798c  00000000  00000000  0003d787  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006fff2  00000000  00000000  00045113  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b5105  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000240c  00000000  00000000  000b5180  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800361c 	.word	0x0800361c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	0800361c 	.word	0x0800361c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <bma400_init>:
 * @retval zero -> Success  / -ve value -> Error
 */
static int8_t enable_self_test(const struct bma400_dev *dev);

int8_t bma400_init(struct bma400_dev *dev)
{
 8000438:	b5b0      	push	{r4, r5, r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8000440:	230e      	movs	r3, #14
 8000442:	18fb      	adds	r3, r7, r3
 8000444:	2200      	movs	r2, #0
 8000446:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000448:	250f      	movs	r5, #15
 800044a:	197c      	adds	r4, r7, r5
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	0018      	movs	r0, r3
 8000450:	f000 f932 	bl	80006b8 <null_ptr_check>
 8000454:	0003      	movs	r3, r0
 8000456:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BMA400_OK)
 8000458:	197b      	adds	r3, r7, r5
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	b25b      	sxtb	r3, r3
 800045e:	2b00      	cmp	r3, #0
 8000460:	d13e      	bne.n	80004e0 <bma400_init+0xa8>
    {
        /* Initial power-up time */
        dev->delay_ms(5);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	2005      	movs	r0, #5
 8000468:	4798      	blx	r3

        /* Assigning dummy byte value */
        if (dev->intf == BMA400_SPI_INTF)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	789b      	ldrb	r3, [r3, #2]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d10e      	bne.n	8000490 <bma400_init+0x58>
        {
            /* Dummy Byte availability */
            dev->dummy_byte = 1;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	2201      	movs	r2, #1
 8000476:	721a      	strb	r2, [r3, #8]

            /* Dummy read of Chip-ID in SPI mode */
            rslt = bma400_get_regs(BMA400_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000478:	230f      	movs	r3, #15
 800047a:	18fc      	adds	r4, r7, r3
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	220e      	movs	r2, #14
 8000480:	18b9      	adds	r1, r7, r2
 8000482:	2201      	movs	r2, #1
 8000484:	2000      	movs	r0, #0
 8000486:	f000 f833 	bl	80004f0 <bma400_get_regs>
 800048a:	0003      	movs	r3, r0
 800048c:	7023      	strb	r3, [r4, #0]
 800048e:	e002      	b.n	8000496 <bma400_init+0x5e>
        }
        else
        {
            dev->dummy_byte = 0;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2200      	movs	r2, #0
 8000494:	721a      	strb	r2, [r3, #8]
        }
        if (rslt == BMA400_OK)
 8000496:	230f      	movs	r3, #15
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	b25b      	sxtb	r3, r3
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d11e      	bne.n	80004e0 <bma400_init+0xa8>
        {
            /* Chip ID of the sensor is read */
            rslt = bma400_get_regs(BMA400_CHIP_ID_ADDR, &chip_id, 1, dev);
 80004a2:	250f      	movs	r5, #15
 80004a4:	197c      	adds	r4, r7, r5
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	220e      	movs	r2, #14
 80004aa:	18b9      	adds	r1, r7, r2
 80004ac:	2201      	movs	r2, #1
 80004ae:	2000      	movs	r0, #0
 80004b0:	f000 f81e 	bl	80004f0 <bma400_get_regs>
 80004b4:	0003      	movs	r3, r0
 80004b6:	7023      	strb	r3, [r4, #0]

            /* Proceed if everything is fine until now */
            if (rslt == BMA400_OK)
 80004b8:	197b      	adds	r3, r7, r5
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	b25b      	sxtb	r3, r3
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d10e      	bne.n	80004e0 <bma400_init+0xa8>
            {
                /* Check for chip id validity */
                if (chip_id == BMA400_CHIP_ID)
 80004c2:	230e      	movs	r3, #14
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b90      	cmp	r3, #144	; 0x90
 80004ca:	d105      	bne.n	80004d8 <bma400_init+0xa0>
                {
                    /* Store the chip ID in dev structure */
                    dev->chip_id = chip_id;
 80004cc:	230e      	movs	r3, #14
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	781a      	ldrb	r2, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	701a      	strb	r2, [r3, #0]
 80004d6:	e003      	b.n	80004e0 <bma400_init+0xa8>
                }
                else
                {
                    rslt = BMA400_E_DEV_NOT_FOUND;
 80004d8:	230f      	movs	r3, #15
 80004da:	18fb      	adds	r3, r7, r3
 80004dc:	22fd      	movs	r2, #253	; 0xfd
 80004de:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }

    return rslt;
 80004e0:	230f      	movs	r3, #15
 80004e2:	18fb      	adds	r3, r7, r3
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	b25b      	sxtb	r3, r3
}
 80004e8:	0018      	movs	r0, r3
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b004      	add	sp, #16
 80004ee:	bdb0      	pop	{r4, r5, r7, pc}

080004f0 <bma400_get_regs>:

    return rslt;
}

int8_t bma400_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bma400_dev *dev)
{
 80004f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004f2:	b08f      	sub	sp, #60	; 0x3c
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6239      	str	r1, [r7, #32]
 80004f8:	0011      	movs	r1, r2
 80004fa:	61fb      	str	r3, [r7, #28]
 80004fc:	230f      	movs	r3, #15
 80004fe:	2218      	movs	r2, #24
 8000500:	4694      	mov	ip, r2
 8000502:	44bc      	add	ip, r7
 8000504:	4463      	add	r3, ip
 8000506:	1c02      	adds	r2, r0, #0
 8000508:	701a      	strb	r2, [r3, #0]
 800050a:	200e      	movs	r0, #14
 800050c:	2618      	movs	r6, #24
 800050e:	19bb      	adds	r3, r7, r6
 8000510:	181b      	adds	r3, r3, r0
 8000512:	1c0a      	adds	r2, r1, #0
 8000514:	701a      	strb	r2, [r3, #0]
 8000516:	466b      	mov	r3, sp
 8000518:	61bb      	str	r3, [r7, #24]
    int8_t rslt;
    uint16_t index;
    uint16_t temp_len = len + dev->dummy_byte;
 800051a:	19bb      	adds	r3, r7, r6
 800051c:	181b      	adds	r3, r3, r0
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	b299      	uxth	r1, r3
 8000522:	69fb      	ldr	r3, [r7, #28]
 8000524:	7a1b      	ldrb	r3, [r3, #8]
 8000526:	b29a      	uxth	r2, r3
 8000528:	201a      	movs	r0, #26
 800052a:	19bb      	adds	r3, r7, r6
 800052c:	181b      	adds	r3, r3, r0
 800052e:	188a      	adds	r2, r1, r2
 8000530:	801a      	strh	r2, [r3, #0]
    uint8_t temp_buff[temp_len];
 8000532:	19bb      	adds	r3, r7, r6
 8000534:	181b      	adds	r3, r3, r0
 8000536:	881b      	ldrh	r3, [r3, #0]
 8000538:	001a      	movs	r2, r3
 800053a:	3a01      	subs	r2, #1
 800053c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	2200      	movs	r2, #0
 8000542:	60fa      	str	r2, [r7, #12]
 8000544:	68b8      	ldr	r0, [r7, #8]
 8000546:	68f9      	ldr	r1, [r7, #12]
 8000548:	0002      	movs	r2, r0
 800054a:	0f52      	lsrs	r2, r2, #29
 800054c:	000e      	movs	r6, r1
 800054e:	00f6      	lsls	r6, r6, #3
 8000550:	617e      	str	r6, [r7, #20]
 8000552:	697e      	ldr	r6, [r7, #20]
 8000554:	4316      	orrs	r6, r2
 8000556:	617e      	str	r6, [r7, #20]
 8000558:	0002      	movs	r2, r0
 800055a:	00d2      	lsls	r2, r2, #3
 800055c:	613a      	str	r2, [r7, #16]
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	2200      	movs	r2, #0
 8000562:	607a      	str	r2, [r7, #4]
 8000564:	6838      	ldr	r0, [r7, #0]
 8000566:	6879      	ldr	r1, [r7, #4]
 8000568:	0002      	movs	r2, r0
 800056a:	0f52      	lsrs	r2, r2, #29
 800056c:	000e      	movs	r6, r1
 800056e:	00f5      	lsls	r5, r6, #3
 8000570:	4315      	orrs	r5, r2
 8000572:	0002      	movs	r2, r0
 8000574:	00d4      	lsls	r4, r2, #3
 8000576:	3307      	adds	r3, #7
 8000578:	08db      	lsrs	r3, r3, #3
 800057a:	00db      	lsls	r3, r3, #3
 800057c:	466a      	mov	r2, sp
 800057e:	1ad3      	subs	r3, r2, r3
 8000580:	469d      	mov	sp, r3
 8000582:	466b      	mov	r3, sp
 8000584:	3300      	adds	r3, #0
 8000586:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000588:	251d      	movs	r5, #29
 800058a:	2618      	movs	r6, #24
 800058c:	19bb      	adds	r3, r7, r6
 800058e:	195c      	adds	r4, r3, r5
 8000590:	69fb      	ldr	r3, [r7, #28]
 8000592:	0018      	movs	r0, r3
 8000594:	f000 f890 	bl	80006b8 <null_ptr_check>
 8000598:	0003      	movs	r3, r0
 800059a:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BMA400_OK) && (reg_data != NULL))
 800059c:	19bb      	adds	r3, r7, r6
 800059e:	195b      	adds	r3, r3, r5
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	b25b      	sxtb	r3, r3
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d000      	beq.n	80005aa <bma400_get_regs+0xba>
 80005a8:	e072      	b.n	8000690 <bma400_get_regs+0x1a0>
 80005aa:	6a3b      	ldr	r3, [r7, #32]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d06f      	beq.n	8000690 <bma400_get_regs+0x1a0>
    {
        if (dev->intf != BMA400_I2C_INTF)
 80005b0:	69fb      	ldr	r3, [r7, #28]
 80005b2:	789b      	ldrb	r3, [r3, #2]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d00c      	beq.n	80005d2 <bma400_get_regs+0xe2>
        {
            /* If interface selected is SPI */
            reg_addr = reg_addr | BMA400_SPI_RD_MASK;
 80005b8:	220f      	movs	r2, #15
 80005ba:	2318      	movs	r3, #24
 80005bc:	18fb      	adds	r3, r7, r3
 80005be:	189b      	adds	r3, r3, r2
 80005c0:	2118      	movs	r1, #24
 80005c2:	468c      	mov	ip, r1
 80005c4:	44bc      	add	ip, r7
 80005c6:	4462      	add	r2, ip
 80005c8:	7812      	ldrb	r2, [r2, #0]
 80005ca:	2180      	movs	r1, #128	; 0x80
 80005cc:	4249      	negs	r1, r1
 80005ce:	430a      	orrs	r2, r1
 80005d0:	701a      	strb	r2, [r3, #0]
        }

        /* Read the data from the reg_addr */
        rslt = dev->read(dev->dev_id, reg_addr, temp_buff, temp_len);
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	68dd      	ldr	r5, [r3, #12]
 80005d6:	69fb      	ldr	r3, [r7, #28]
 80005d8:	7858      	ldrb	r0, [r3, #1]
 80005da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005dc:	231d      	movs	r3, #29
 80005de:	2618      	movs	r6, #24
 80005e0:	19b9      	adds	r1, r7, r6
 80005e2:	18cc      	adds	r4, r1, r3
 80005e4:	211a      	movs	r1, #26
 80005e6:	0033      	movs	r3, r6
 80005e8:	18fe      	adds	r6, r7, r3
 80005ea:	1873      	adds	r3, r6, r1
 80005ec:	881e      	ldrh	r6, [r3, #0]
 80005ee:	210f      	movs	r1, #15
 80005f0:	2318      	movs	r3, #24
 80005f2:	18fb      	adds	r3, r7, r3
 80005f4:	185b      	adds	r3, r3, r1
 80005f6:	7819      	ldrb	r1, [r3, #0]
 80005f8:	0033      	movs	r3, r6
 80005fa:	47a8      	blx	r5
 80005fc:	0003      	movs	r3, r0
 80005fe:	7023      	strb	r3, [r4, #0]
        if (rslt == BMA400_OK)
 8000600:	231d      	movs	r3, #29
 8000602:	2218      	movs	r2, #24
 8000604:	4694      	mov	ip, r2
 8000606:	44bc      	add	ip, r7
 8000608:	4463      	add	r3, ip
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b25b      	sxtb	r3, r3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d12d      	bne.n	800066e <bma400_get_regs+0x17e>
        {
            for (index = 0; index < len; index++)
 8000612:	231e      	movs	r3, #30
 8000614:	2218      	movs	r2, #24
 8000616:	4694      	mov	ip, r2
 8000618:	44bc      	add	ip, r7
 800061a:	4463      	add	r3, ip
 800061c:	2200      	movs	r2, #0
 800061e:	801a      	strh	r2, [r3, #0]
 8000620:	e016      	b.n	8000650 <bma400_get_regs+0x160>
            {
                /* Parse the data read and store in "reg_data"
                 * buffer so that the dummy byte is removed
                 * and user will get only valid data
                 */
                reg_data[index] = temp_buff[index + dev->dummy_byte];
 8000622:	201e      	movs	r0, #30
 8000624:	2418      	movs	r4, #24
 8000626:	193b      	adds	r3, r7, r4
 8000628:	181b      	adds	r3, r3, r0
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	69fa      	ldr	r2, [r7, #28]
 800062e:	7a12      	ldrb	r2, [r2, #8]
 8000630:	189a      	adds	r2, r3, r2
 8000632:	193b      	adds	r3, r7, r4
 8000634:	181b      	adds	r3, r3, r0
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	6a39      	ldr	r1, [r7, #32]
 800063a:	18cb      	adds	r3, r1, r3
 800063c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800063e:	5c8a      	ldrb	r2, [r1, r2]
 8000640:	701a      	strb	r2, [r3, #0]
            for (index = 0; index < len; index++)
 8000642:	193b      	adds	r3, r7, r4
 8000644:	181b      	adds	r3, r3, r0
 8000646:	881a      	ldrh	r2, [r3, #0]
 8000648:	193b      	adds	r3, r7, r4
 800064a:	181b      	adds	r3, r3, r0
 800064c:	3201      	adds	r2, #1
 800064e:	801a      	strh	r2, [r3, #0]
 8000650:	230e      	movs	r3, #14
 8000652:	2218      	movs	r2, #24
 8000654:	4694      	mov	ip, r2
 8000656:	44bc      	add	ip, r7
 8000658:	4463      	add	r3, ip
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	b29b      	uxth	r3, r3
 800065e:	221e      	movs	r2, #30
 8000660:	2118      	movs	r1, #24
 8000662:	468c      	mov	ip, r1
 8000664:	44bc      	add	ip, r7
 8000666:	4462      	add	r2, ip
 8000668:	8812      	ldrh	r2, [r2, #0]
 800066a:	429a      	cmp	r2, r3
 800066c:	d3d9      	bcc.n	8000622 <bma400_get_regs+0x132>
            }
        }
        if (rslt != BMA400_OK)
 800066e:	231d      	movs	r3, #29
 8000670:	2218      	movs	r2, #24
 8000672:	4694      	mov	ip, r2
 8000674:	44bc      	add	ip, r7
 8000676:	4463      	add	r3, ip
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	b25b      	sxtb	r3, r3
 800067c:	2b00      	cmp	r3, #0
 800067e:	d00e      	beq.n	800069e <bma400_get_regs+0x1ae>
        {
            /* Failure case */
            rslt = BMA400_E_COM_FAIL;
 8000680:	231d      	movs	r3, #29
 8000682:	2218      	movs	r2, #24
 8000684:	4694      	mov	ip, r2
 8000686:	44bc      	add	ip, r7
 8000688:	4463      	add	r3, ip
 800068a:	22fe      	movs	r2, #254	; 0xfe
 800068c:	701a      	strb	r2, [r3, #0]
        if (rslt != BMA400_OK)
 800068e:	e006      	b.n	800069e <bma400_get_regs+0x1ae>
        }
    }
    else
    {
        rslt = BMA400_E_NULL_PTR;
 8000690:	231d      	movs	r3, #29
 8000692:	2218      	movs	r2, #24
 8000694:	4694      	mov	ip, r2
 8000696:	44bc      	add	ip, r7
 8000698:	4463      	add	r3, ip
 800069a:	22ff      	movs	r2, #255	; 0xff
 800069c:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800069e:	231d      	movs	r3, #29
 80006a0:	2218      	movs	r2, #24
 80006a2:	4694      	mov	ip, r2
 80006a4:	44bc      	add	ip, r7
 80006a6:	4463      	add	r3, ip
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b25b      	sxtb	r3, r3
 80006ac:	69ba      	ldr	r2, [r7, #24]
 80006ae:	4695      	mov	sp, r2
}
 80006b0:	0018      	movs	r0, r3
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b00f      	add	sp, #60	; 0x3c
 80006b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080006b8 <null_ptr_check>:
    return rslt;
}

/*****************************INTERNAL APIs***********************************************/
static int8_t null_ptr_check(const struct bma400_dev *dev)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d00b      	beq.n	80006de <null_ptr_check+0x26>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d007      	beq.n	80006de <null_ptr_check+0x26>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	691b      	ldr	r3, [r3, #16]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d003      	beq.n	80006de <null_ptr_check+0x26>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d104      	bne.n	80006e8 <null_ptr_check+0x30>
    {
        /* Device structure pointer is not valid */
        rslt = BMA400_E_NULL_PTR;
 80006de:	230f      	movs	r3, #15
 80006e0:	18fb      	adds	r3, r7, r3
 80006e2:	22ff      	movs	r2, #255	; 0xff
 80006e4:	701a      	strb	r2, [r3, #0]
 80006e6:	e003      	b.n	80006f0 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMA400_OK;
 80006e8:	230f      	movs	r3, #15
 80006ea:	18fb      	adds	r3, r7, r3
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80006f0:	230f      	movs	r3, #15
 80006f2:	18fb      	adds	r3, r7, r3
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	b25b      	sxtb	r3, r3
}
 80006f8:	0018      	movs	r0, r3
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b004      	add	sp, #16
 80006fe:	bd80      	pop	{r7, pc}

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000706:	f000 fb75 	bl	8000df4 <HAL_Init>

  /* USER CODE BEGIN Init */
    bma400_dev* bma400ptr = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
    int8_t bma400PtrReturn = 0;
 800070e:	1cfb      	adds	r3, r7, #3
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000714:	f000 f854 	bl	80007c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000718:	f000 f990 	bl	8000a3c <MX_GPIO_Init>
  MX_SPI1_Init();
 800071c:	f000 f8be 	bl	800089c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000720:	f000 f8f4 	bl	800090c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000724:	f000 f92a 	bl	800097c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000728:	f000 f958 	bl	80009dc <MX_USART2_UART_Init>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 800072c:	23a0      	movs	r3, #160	; 0xa0
 800072e:	05db      	lsls	r3, r3, #23
 8000730:	2201      	movs	r2, #1
 8000732:	2120      	movs	r1, #32
 8000734:	0018      	movs	r0, r3
 8000736:	f000 fe0d 	bl	8001354 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800073a:	200a      	movs	r0, #10
 800073c:	f000 fbba 	bl	8000eb4 <HAL_Delay>
  /* Init BMA400 */
  bma400PtrReturn = bma400_init(bma400ptr);
 8000740:	1cfc      	adds	r4, r7, #3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	0018      	movs	r0, r3
 8000746:	f7ff fe77 	bl	8000438 <bma400_init>
 800074a:	0003      	movs	r3, r0
 800074c:	7023      	strb	r3, [r4, #0]


 // int8_t hal_spi_write_register
  /* USER CODE BEGIN 2 */
    //1.Activate SPI line, make CS LOW
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 800074e:	23a0      	movs	r3, #160	; 0xa0
 8000750:	05db      	lsls	r3, r3, #23
 8000752:	2200      	movs	r2, #0
 8000754:	2120      	movs	r1, #32
 8000756:	0018      	movs	r0, r3
 8000758:	f000 fdfc 	bl	8001354 <HAL_GPIO_WritePin>
    //2.Transmit register address
    HAL_SPI_Transmit(&hspi1,registerBuffer,1,HAL_MAX_DELAY);
 800075c:	2301      	movs	r3, #1
 800075e:	425b      	negs	r3, r3
 8000760:	4912      	ldr	r1, [pc, #72]	; (80007ac <main+0xac>)
 8000762:	4813      	ldr	r0, [pc, #76]	; (80007b0 <main+0xb0>)
 8000764:	2201      	movs	r2, #1
 8000766:	f001 fd21 	bl	80021ac <HAL_SPI_Transmit>
    //3.Read register data
    HAL_SPI_Receive(&hspi1,&registerBuffer[1],1,HAL_MAX_DELAY);
 800076a:	2301      	movs	r3, #1
 800076c:	425b      	negs	r3, r3
 800076e:	4911      	ldr	r1, [pc, #68]	; (80007b4 <main+0xb4>)
 8000770:	480f      	ldr	r0, [pc, #60]	; (80007b0 <main+0xb0>)
 8000772:	2201      	movs	r2, #1
 8000774:	f001 fe68 	bl	8002448 <HAL_SPI_Receive>
    //4.Deactiviate SPI line, make CS HIGH
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8000778:	23a0      	movs	r3, #160	; 0xa0
 800077a:	05db      	lsls	r3, r3, #23
 800077c:	2201      	movs	r2, #1
 800077e:	2120      	movs	r1, #32
 8000780:	0018      	movs	r0, r3
 8000782:	f000 fde7 	bl	8001354 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */



      BMA400HalStatus = HAL_SPI_Receive(&hspi1,dataBuffer,1,HAL_MAX_DELAY);
 8000786:	2301      	movs	r3, #1
 8000788:	425b      	negs	r3, r3
 800078a:	490b      	ldr	r1, [pc, #44]	; (80007b8 <main+0xb8>)
 800078c:	4808      	ldr	r0, [pc, #32]	; (80007b0 <main+0xb0>)
 800078e:	2201      	movs	r2, #1
 8000790:	f001 fe5a 	bl	8002448 <HAL_SPI_Receive>
 8000794:	0003      	movs	r3, r0
 8000796:	001a      	movs	r2, r3
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <main+0xbc>)
 800079a:	701a      	strb	r2, [r3, #0]

      }
      else{

      }
	  HAL_SPI_Transmit(&hspi1,dataBuffer,1,HAL_MAX_DELAY);
 800079c:	2301      	movs	r3, #1
 800079e:	425b      	negs	r3, r3
 80007a0:	4905      	ldr	r1, [pc, #20]	; (80007b8 <main+0xb8>)
 80007a2:	4803      	ldr	r0, [pc, #12]	; (80007b0 <main+0xb0>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	f001 fd01 	bl	80021ac <HAL_SPI_Transmit>
      BMA400HalStatus = HAL_SPI_Receive(&hspi1,dataBuffer,1,HAL_MAX_DELAY);
 80007aa:	e7ec      	b.n	8000786 <main+0x86>
 80007ac:	2000007c 	.word	0x2000007c
 80007b0:	2000010c 	.word	0x2000010c
 80007b4:	2000007d 	.word	0x2000007d
 80007b8:	20000100 	.word	0x20000100
 80007bc:	20000020 	.word	0x20000020

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b09b      	sub	sp, #108	; 0x6c
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	2434      	movs	r4, #52	; 0x34
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	0018      	movs	r0, r3
 80007cc:	2334      	movs	r3, #52	; 0x34
 80007ce:	001a      	movs	r2, r3
 80007d0:	2100      	movs	r1, #0
 80007d2:	f002 ff1b 	bl	800360c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d6:	2320      	movs	r3, #32
 80007d8:	18fb      	adds	r3, r7, r3
 80007da:	0018      	movs	r0, r3
 80007dc:	2314      	movs	r3, #20
 80007de:	001a      	movs	r2, r3
 80007e0:	2100      	movs	r1, #0
 80007e2:	f002 ff13 	bl	800360c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e6:	003b      	movs	r3, r7
 80007e8:	0018      	movs	r0, r3
 80007ea:	2320      	movs	r3, #32
 80007ec:	001a      	movs	r2, r3
 80007ee:	2100      	movs	r1, #0
 80007f0:	f002 ff0c 	bl	800360c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f4:	4b27      	ldr	r3, [pc, #156]	; (8000894 <SystemClock_Config+0xd4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a27      	ldr	r2, [pc, #156]	; (8000898 <SystemClock_Config+0xd8>)
 80007fa:	401a      	ands	r2, r3
 80007fc:	4b25      	ldr	r3, [pc, #148]	; (8000894 <SystemClock_Config+0xd4>)
 80007fe:	2180      	movs	r1, #128	; 0x80
 8000800:	0109      	lsls	r1, r1, #4
 8000802:	430a      	orrs	r2, r1
 8000804:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000806:	0021      	movs	r1, r4
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2210      	movs	r2, #16
 800080c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2201      	movs	r2, #1
 8000812:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	22a0      	movs	r2, #160	; 0xa0
 800081e:	0212      	lsls	r2, r2, #8
 8000820:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2200      	movs	r2, #0
 8000826:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	187b      	adds	r3, r7, r1
 800082a:	0018      	movs	r0, r3
 800082c:	f000 fdb0 	bl	8001390 <HAL_RCC_OscConfig>
 8000830:	1e03      	subs	r3, r0, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000834:	f000 f930 	bl	8000a98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000838:	2120      	movs	r1, #32
 800083a:	187b      	adds	r3, r7, r1
 800083c:	220f      	movs	r2, #15
 800083e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2200      	movs	r2, #0
 8000844:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2100      	movs	r1, #0
 800085c:	0018      	movs	r0, r3
 800085e:	f001 f911 	bl	8001a84 <HAL_RCC_ClockConfig>
 8000862:	1e03      	subs	r3, r0, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000866:	f000 f917 	bl	8000a98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800086a:	003b      	movs	r3, r7
 800086c:	2203      	movs	r2, #3
 800086e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000870:	003b      	movs	r3, r7
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000876:	003b      	movs	r3, r7
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800087c:	003b      	movs	r3, r7
 800087e:	0018      	movs	r0, r3
 8000880:	f001 fae4 	bl	8001e4c <HAL_RCCEx_PeriphCLKConfig>
 8000884:	1e03      	subs	r3, r0, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000888:	f000 f906 	bl	8000a98 <Error_Handler>
  }
}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	b01b      	add	sp, #108	; 0x6c
 8000892:	bd90      	pop	{r4, r7, pc}
 8000894:	40007000 	.word	0x40007000
 8000898:	ffffe7ff 	.word	0xffffe7ff

0800089c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_SPI1_Init+0x68>)
 80008a2:	4a19      	ldr	r2, [pc, #100]	; (8000908 <MX_SPI1_Init+0x6c>)
 80008a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_SPI1_Init+0x68>)
 80008a8:	2282      	movs	r2, #130	; 0x82
 80008aa:	0052      	lsls	r2, r2, #1
 80008ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_SPI1_Init+0x68>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_SPI1_Init+0x68>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ba:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_SPI1_Init+0x68>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c0:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_SPI1_Init+0x68>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_SPI1_Init+0x68>)
 80008c8:	2280      	movs	r2, #128	; 0x80
 80008ca:	0092      	lsls	r2, r2, #2
 80008cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <MX_SPI1_Init+0x68>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_SPI1_Init+0x68>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008da:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <MX_SPI1_Init+0x68>)
 80008dc:	2200      	movs	r2, #0
 80008de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_SPI1_Init+0x68>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008e6:	4b07      	ldr	r3, [pc, #28]	; (8000904 <MX_SPI1_Init+0x68>)
 80008e8:	2207      	movs	r2, #7
 80008ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <MX_SPI1_Init+0x68>)
 80008ee:	0018      	movs	r0, r3
 80008f0:	f001 fbf2 	bl	80020d8 <HAL_SPI_Init>
 80008f4:	1e03      	subs	r3, r0, #0
 80008f6:	d001      	beq.n	80008fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008f8:	f000 f8ce 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	2000010c 	.word	0x2000010c
 8000908:	40013000 	.word	0x40013000

0800090c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000910:	4b18      	ldr	r3, [pc, #96]	; (8000974 <MX_SPI2_Init+0x68>)
 8000912:	4a19      	ldr	r2, [pc, #100]	; (8000978 <MX_SPI2_Init+0x6c>)
 8000914:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_SPI2_Init+0x68>)
 8000918:	2282      	movs	r2, #130	; 0x82
 800091a:	0052      	lsls	r2, r2, #1
 800091c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <MX_SPI2_Init+0x68>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <MX_SPI2_Init+0x68>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800092a:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_SPI2_Init+0x68>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000930:	4b10      	ldr	r3, [pc, #64]	; (8000974 <MX_SPI2_Init+0x68>)
 8000932:	2200      	movs	r2, #0
 8000934:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_SPI2_Init+0x68>)
 8000938:	2280      	movs	r2, #128	; 0x80
 800093a:	0092      	lsls	r2, r2, #2
 800093c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <MX_SPI2_Init+0x68>)
 8000940:	2200      	movs	r2, #0
 8000942:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000944:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_SPI2_Init+0x68>)
 8000946:	2200      	movs	r2, #0
 8000948:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <MX_SPI2_Init+0x68>)
 800094c:	2200      	movs	r2, #0
 800094e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_SPI2_Init+0x68>)
 8000952:	2200      	movs	r2, #0
 8000954:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000956:	4b07      	ldr	r3, [pc, #28]	; (8000974 <MX_SPI2_Init+0x68>)
 8000958:	2207      	movs	r2, #7
 800095a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <MX_SPI2_Init+0x68>)
 800095e:	0018      	movs	r0, r3
 8000960:	f001 fbba 	bl	80020d8 <HAL_SPI_Init>
 8000964:	1e03      	subs	r3, r0, #0
 8000966:	d001      	beq.n	800096c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000968:	f000 f896 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	20000024 	.word	0x20000024
 8000978:	40003800 	.word	0x40003800

0800097c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_USART1_UART_Init+0x58>)
 8000982:	4a15      	ldr	r2, [pc, #84]	; (80009d8 <MX_USART1_UART_Init+0x5c>)
 8000984:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <MX_USART1_UART_Init+0x58>)
 8000988:	22e1      	movs	r2, #225	; 0xe1
 800098a:	0252      	lsls	r2, r2, #9
 800098c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_USART1_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_USART1_UART_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_USART1_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_USART1_UART_Init+0x58>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_USART1_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_USART1_UART_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_USART1_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_USART1_UART_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009be:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <MX_USART1_UART_Init+0x58>)
 80009c0:	0018      	movs	r0, r3
 80009c2:	f002 f933 	bl	8002c2c <HAL_UART_Init>
 80009c6:	1e03      	subs	r3, r0, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009ca:	f000 f865 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000080 	.word	0x20000080
 80009d8:	40013800 	.word	0x40013800

080009dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_USART2_UART_Init+0x58>)
 80009e2:	4a15      	ldr	r2, [pc, #84]	; (8000a38 <MX_USART2_UART_Init+0x5c>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_USART2_UART_Init+0x58>)
 80009e8:	22e1      	movs	r2, #225	; 0xe1
 80009ea:	0252      	lsls	r2, r2, #9
 80009ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_USART2_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_USART2_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_USART2_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_USART2_UART_Init+0x58>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_USART2_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_USART2_UART_Init+0x58>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_USART2_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_USART2_UART_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <MX_USART2_UART_Init+0x58>)
 8000a20:	0018      	movs	r0, r3
 8000a22:	f002 f903 	bl	8002c2c <HAL_UART_Init>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a2a:	f000 f835 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000164 	.word	0x20000164
 8000a38:	40004400 	.word	0x40004400

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_GPIO_Init+0x58>)
 8000a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_GPIO_Init+0x58>)
 8000a48:	2104      	movs	r1, #4
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_GPIO_Init+0x58>)
 8000a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a52:	2204      	movs	r2, #4
 8000a54:	4013      	ands	r3, r2
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_GPIO_Init+0x58>)
 8000a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <MX_GPIO_Init+0x58>)
 8000a60:	2101      	movs	r1, #1
 8000a62:	430a      	orrs	r2, r1
 8000a64:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_GPIO_Init+0x58>)
 8000a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_GPIO_Init+0x58>)
 8000a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a76:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <MX_GPIO_Init+0x58>)
 8000a78:	2102      	movs	r1, #2
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <MX_GPIO_Init+0x58>)
 8000a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a82:	2202      	movs	r2, #2
 8000a84:	4013      	ands	r3, r2
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]

}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b004      	add	sp, #16
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	40021000 	.word	0x40021000

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa8:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <HAL_MspInit+0x24>)
 8000aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_MspInit+0x24>)
 8000aae:	2101      	movs	r1, #1
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <HAL_MspInit+0x24>)
 8000ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <HAL_MspInit+0x24>)
 8000aba:	2180      	movs	r1, #128	; 0x80
 8000abc:	0549      	lsls	r1, r1, #21
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40021000 	.word	0x40021000

08000acc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b08b      	sub	sp, #44	; 0x2c
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	2314      	movs	r3, #20
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	0018      	movs	r0, r3
 8000ada:	2314      	movs	r3, #20
 8000adc:	001a      	movs	r2, r3
 8000ade:	2100      	movs	r1, #0
 8000ae0:	f002 fd94 	bl	800360c <memset>
  if(hspi->Instance==SPI1)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a41      	ldr	r2, [pc, #260]	; (8000bf0 <HAL_SPI_MspInit+0x124>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d12a      	bne.n	8000b44 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aee:	4b41      	ldr	r3, [pc, #260]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000af2:	4b40      	ldr	r3, [pc, #256]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000af4:	2180      	movs	r1, #128	; 0x80
 8000af6:	0149      	lsls	r1, r1, #5
 8000af8:	430a      	orrs	r2, r1
 8000afa:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	4b3d      	ldr	r3, [pc, #244]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b00:	4b3c      	ldr	r3, [pc, #240]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000b02:	2101      	movs	r1, #1
 8000b04:	430a      	orrs	r2, r1
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b08:	4b3a      	ldr	r3, [pc, #232]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b14:	2114      	movs	r1, #20
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	22e0      	movs	r2, #224	; 0xe0
 8000b1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	2202      	movs	r2, #2
 8000b20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2203      	movs	r2, #3
 8000b2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	187a      	adds	r2, r7, r1
 8000b36:	23a0      	movs	r3, #160	; 0xa0
 8000b38:	05db      	lsls	r3, r3, #23
 8000b3a:	0011      	movs	r1, r2
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f000 fa8b 	bl	8001058 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b42:	e051      	b.n	8000be8 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a2b      	ldr	r2, [pc, #172]	; (8000bf8 <HAL_SPI_MspInit+0x12c>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d14c      	bne.n	8000be8 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b4e:	4b29      	ldr	r3, [pc, #164]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b52:	4b28      	ldr	r3, [pc, #160]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	01c9      	lsls	r1, r1, #7
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5c:	4b25      	ldr	r3, [pc, #148]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b60:	4b24      	ldr	r3, [pc, #144]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000b62:	2104      	movs	r1, #4
 8000b64:	430a      	orrs	r2, r1
 8000b66:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b68:	4b22      	ldr	r3, [pc, #136]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	4013      	ands	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b74:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b78:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000b7a:	2102      	movs	r1, #2
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b80:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b84:	2202      	movs	r2, #2
 8000b86:	4013      	ands	r3, r2
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b8c:	2114      	movs	r1, #20
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	220c      	movs	r2, #12
 8000b92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2202      	movs	r2, #2
 8000b98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_SPI2;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2202      	movs	r2, #2
 8000baa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bac:	000c      	movs	r4, r1
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <HAL_SPI_MspInit+0x130>)
 8000bb2:	0019      	movs	r1, r3
 8000bb4:	0010      	movs	r0, r2
 8000bb6:	f000 fa4f 	bl	8001058 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bba:	0021      	movs	r1, r4
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2280      	movs	r2, #128	; 0x80
 8000bc0:	00d2      	lsls	r2, r2, #3
 8000bc2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2205      	movs	r2, #5
 8000bda:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <HAL_SPI_MspInit+0x134>)
 8000be0:	0019      	movs	r1, r3
 8000be2:	0010      	movs	r0, r2
 8000be4:	f000 fa38 	bl	8001058 <HAL_GPIO_Init>
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b00b      	add	sp, #44	; 0x2c
 8000bee:	bd90      	pop	{r4, r7, pc}
 8000bf0:	40013000 	.word	0x40013000
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40003800 	.word	0x40003800
 8000bfc:	50000800 	.word	0x50000800
 8000c00:	50000400 	.word	0x50000400

08000c04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	2314      	movs	r3, #20
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	0018      	movs	r0, r3
 8000c12:	2314      	movs	r3, #20
 8000c14:	001a      	movs	r2, r3
 8000c16:	2100      	movs	r1, #0
 8000c18:	f002 fcf8 	bl	800360c <memset>
  if(huart->Instance==USART1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a30      	ldr	r2, [pc, #192]	; (8000ce4 <HAL_UART_MspInit+0xe0>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d12b      	bne.n	8000c7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c26:	4b30      	ldr	r3, [pc, #192]	; (8000ce8 <HAL_UART_MspInit+0xe4>)
 8000c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <HAL_UART_MspInit+0xe4>)
 8000c2c:	2180      	movs	r1, #128	; 0x80
 8000c2e:	01c9      	lsls	r1, r1, #7
 8000c30:	430a      	orrs	r2, r1
 8000c32:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c34:	4b2c      	ldr	r3, [pc, #176]	; (8000ce8 <HAL_UART_MspInit+0xe4>)
 8000c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c38:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <HAL_UART_MspInit+0xe4>)
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c40:	4b29      	ldr	r3, [pc, #164]	; (8000ce8 <HAL_UART_MspInit+0xe4>)
 8000c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c44:	2201      	movs	r2, #1
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c4c:	2114      	movs	r1, #20
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	22c0      	movs	r2, #192	; 0xc0
 8000c52:	00d2      	lsls	r2, r2, #3
 8000c54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2202      	movs	r2, #2
 8000c5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2203      	movs	r2, #3
 8000c66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2204      	movs	r2, #4
 8000c6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	187a      	adds	r2, r7, r1
 8000c70:	23a0      	movs	r3, #160	; 0xa0
 8000c72:	05db      	lsls	r3, r3, #23
 8000c74:	0011      	movs	r1, r2
 8000c76:	0018      	movs	r0, r3
 8000c78:	f000 f9ee 	bl	8001058 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c7c:	e02e      	b.n	8000cdc <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a1a      	ldr	r2, [pc, #104]	; (8000cec <HAL_UART_MspInit+0xe8>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d129      	bne.n	8000cdc <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c88:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <HAL_UART_MspInit+0xe4>)
 8000c8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <HAL_UART_MspInit+0xe4>)
 8000c8e:	2180      	movs	r1, #128	; 0x80
 8000c90:	0289      	lsls	r1, r1, #10
 8000c92:	430a      	orrs	r2, r1
 8000c94:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <HAL_UART_MspInit+0xe4>)
 8000c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <HAL_UART_MspInit+0xe4>)
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_UART_MspInit+0xe4>)
 8000ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cae:	2114      	movs	r1, #20
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	2202      	movs	r2, #2
 8000cba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	2204      	movs	r2, #4
 8000ccc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	187a      	adds	r2, r7, r1
 8000cd0:	23a0      	movs	r3, #160	; 0xa0
 8000cd2:	05db      	lsls	r3, r3, #23
 8000cd4:	0011      	movs	r1, r2
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f000 f9be 	bl	8001058 <HAL_GPIO_Init>
}
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	b00a      	add	sp, #40	; 0x28
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40013800 	.word	0x40013800
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40004400 	.word	0x40004400

08000cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <HardFault_Handler+0x4>

08000d00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d04:	46c0      	nop			; (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d18:	f000 f8b6 	bl	8000e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000d28:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <SystemInit+0x64>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <SystemInit+0x64>)
 8000d2e:	2180      	movs	r1, #128	; 0x80
 8000d30:	0049      	lsls	r1, r1, #1
 8000d32:	430a      	orrs	r2, r1
 8000d34:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000d36:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <SystemInit+0x64>)
 8000d38:	68da      	ldr	r2, [r3, #12]
 8000d3a:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <SystemInit+0x64>)
 8000d3c:	4913      	ldr	r1, [pc, #76]	; (8000d8c <SystemInit+0x68>)
 8000d3e:	400a      	ands	r2, r1
 8000d40:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <SystemInit+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <SystemInit+0x64>)
 8000d48:	4911      	ldr	r1, [pc, #68]	; (8000d90 <SystemInit+0x6c>)
 8000d4a:	400a      	ands	r2, r1
 8000d4c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <SystemInit+0x64>)
 8000d50:	689a      	ldr	r2, [r3, #8]
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <SystemInit+0x64>)
 8000d54:	2101      	movs	r1, #1
 8000d56:	438a      	bics	r2, r1
 8000d58:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <SystemInit+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <SystemInit+0x64>)
 8000d60:	490c      	ldr	r1, [pc, #48]	; (8000d94 <SystemInit+0x70>)
 8000d62:	400a      	ands	r2, r1
 8000d64:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <SystemInit+0x64>)
 8000d68:	68da      	ldr	r2, [r3, #12]
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <SystemInit+0x64>)
 8000d6c:	490a      	ldr	r1, [pc, #40]	; (8000d98 <SystemInit+0x74>)
 8000d6e:	400a      	ands	r2, r1
 8000d70:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <SystemInit+0x64>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <SystemInit+0x78>)
 8000d7a:	2280      	movs	r2, #128	; 0x80
 8000d7c:	0512      	lsls	r2, r2, #20
 8000d7e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d80:	46c0      	nop			; (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	88ff400c 	.word	0x88ff400c
 8000d90:	fef6fff6 	.word	0xfef6fff6
 8000d94:	fffbffff 	.word	0xfffbffff
 8000d98:	ff02ffff 	.word	0xff02ffff
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000da0:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000da2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000da4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000da6:	e003      	b.n	8000db0 <LoopCopyDataInit>

08000da8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000daa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dae:	3104      	adds	r1, #4

08000db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000db0:	480b      	ldr	r0, [pc, #44]	; (8000de0 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000db4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000db6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000db8:	d3f6      	bcc.n	8000da8 <CopyDataInit>
  ldr  r2, =_sbss
 8000dba:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <LoopForever+0x12>)
  b  LoopFillZerobss
 8000dbc:	e002      	b.n	8000dc4 <LoopFillZerobss>

08000dbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000dbe:	2300      	movs	r3, #0
  str  r3, [r2]
 8000dc0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc2:	3204      	adds	r2, #4

08000dc4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <LoopForever+0x16>)
  cmp  r2, r3
 8000dc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000dc8:	d3f9      	bcc.n	8000dbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000dca:	f7ff ffab 	bl	8000d24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dce:	f002 fbf9 	bl	80035c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd2:	f7ff fc95 	bl	8000700 <main>

08000dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000dd6:	e7fe      	b.n	8000dd6 <LoopForever>
   ldr   r0, =_estack
 8000dd8:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8000ddc:	080036b0 	.word	0x080036b0
  ldr  r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000de4:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000de8:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000dec:	200001e8 	.word	0x200001e8

08000df0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC1_COMP_IRQHandler>
	...

08000df4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <HAL_Init+0x3c>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_Init+0x3c>)
 8000e06:	2140      	movs	r1, #64	; 0x40
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f000 f811 	bl	8000e34 <HAL_InitTick>
 8000e12:	1e03      	subs	r3, r0, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	2201      	movs	r2, #1
 8000e1a:	701a      	strb	r2, [r3, #0]
 8000e1c:	e001      	b.n	8000e22 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e1e:	f7ff fe41 	bl	8000aa4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	781b      	ldrb	r3, [r3, #0]
}
 8000e26:	0018      	movs	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b002      	add	sp, #8
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	40022000 	.word	0x40022000

08000e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <HAL_InitTick+0x50>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	23fa      	movs	r3, #250	; 0xfa
 8000e4a:	0099      	lsls	r1, r3, #2
 8000e4c:	0010      	movs	r0, r2
 8000e4e:	f7ff f95b 	bl	8000108 <__udivsi3>
 8000e52:	0003      	movs	r3, r0
 8000e54:	0018      	movs	r0, r3
 8000e56:	f000 f8f2 	bl	800103e <HAL_SYSTICK_Config>
 8000e5a:	1e03      	subs	r3, r0, #0
 8000e5c:	d004      	beq.n	8000e68 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8000e5e:	230f      	movs	r3, #15
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	2201      	movs	r2, #1
 8000e64:	701a      	strb	r2, [r3, #0]
 8000e66:	e006      	b.n	8000e76 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000e68:	6879      	ldr	r1, [r7, #4]
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	425b      	negs	r3, r3
 8000e6e:	2200      	movs	r2, #0
 8000e70:	0018      	movs	r0, r3
 8000e72:	f000 f8cf 	bl	8001014 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8000e76:	230f      	movs	r3, #15
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	781b      	ldrb	r3, [r3, #0]
}
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b004      	add	sp, #16
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000000 	.word	0x20000000

08000e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  uwTick++;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <HAL_IncTick+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	1c5a      	adds	r2, r3, #1
 8000e92:	4b02      	ldr	r3, [pc, #8]	; (8000e9c <HAL_IncTick+0x14>)
 8000e94:	601a      	str	r2, [r3, #0]
}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	200001e4 	.word	0x200001e4

08000ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea4:	4b02      	ldr	r3, [pc, #8]	; (8000eb0 <HAL_GetTick+0x10>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	200001e4 	.word	0x200001e4

08000eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ebc:	f7ff fff0 	bl	8000ea0 <HAL_GetTick>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	d002      	beq.n	8000ed4 <HAL_Delay+0x20>
  {
    wait++;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	f7ff ffe3 	bl	8000ea0 <HAL_GetTick>
 8000eda:	0002      	movs	r2, r0
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d8f7      	bhi.n	8000ed6 <HAL_Delay+0x22>
  {
  }
}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b004      	add	sp, #16
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef0:	b590      	push	{r4, r7, lr}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	1dfb      	adds	r3, r7, #7
 8000efc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b7f      	cmp	r3, #127	; 0x7f
 8000f04:	d932      	bls.n	8000f6c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f06:	4a2f      	ldr	r2, [pc, #188]	; (8000fc4 <NVIC_SetPriority+0xd4>)
 8000f08:	1dfb      	adds	r3, r7, #7
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	0019      	movs	r1, r3
 8000f0e:	230f      	movs	r3, #15
 8000f10:	400b      	ands	r3, r1
 8000f12:	3b08      	subs	r3, #8
 8000f14:	089b      	lsrs	r3, r3, #2
 8000f16:	3306      	adds	r3, #6
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	18d3      	adds	r3, r2, r3
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	1dfa      	adds	r2, r7, #7
 8000f22:	7812      	ldrb	r2, [r2, #0]
 8000f24:	0011      	movs	r1, r2
 8000f26:	2203      	movs	r2, #3
 8000f28:	400a      	ands	r2, r1
 8000f2a:	00d2      	lsls	r2, r2, #3
 8000f2c:	21ff      	movs	r1, #255	; 0xff
 8000f2e:	4091      	lsls	r1, r2
 8000f30:	000a      	movs	r2, r1
 8000f32:	43d2      	mvns	r2, r2
 8000f34:	401a      	ands	r2, r3
 8000f36:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	019b      	lsls	r3, r3, #6
 8000f3c:	22ff      	movs	r2, #255	; 0xff
 8000f3e:	401a      	ands	r2, r3
 8000f40:	1dfb      	adds	r3, r7, #7
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	0018      	movs	r0, r3
 8000f46:	2303      	movs	r3, #3
 8000f48:	4003      	ands	r3, r0
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f4e:	481d      	ldr	r0, [pc, #116]	; (8000fc4 <NVIC_SetPriority+0xd4>)
 8000f50:	1dfb      	adds	r3, r7, #7
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	001c      	movs	r4, r3
 8000f56:	230f      	movs	r3, #15
 8000f58:	4023      	ands	r3, r4
 8000f5a:	3b08      	subs	r3, #8
 8000f5c:	089b      	lsrs	r3, r3, #2
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	3306      	adds	r3, #6
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	18c3      	adds	r3, r0, r3
 8000f66:	3304      	adds	r3, #4
 8000f68:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f6a:	e027      	b.n	8000fbc <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f6c:	4a16      	ldr	r2, [pc, #88]	; (8000fc8 <NVIC_SetPriority+0xd8>)
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	b25b      	sxtb	r3, r3
 8000f74:	089b      	lsrs	r3, r3, #2
 8000f76:	33c0      	adds	r3, #192	; 0xc0
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	589b      	ldr	r3, [r3, r2]
 8000f7c:	1dfa      	adds	r2, r7, #7
 8000f7e:	7812      	ldrb	r2, [r2, #0]
 8000f80:	0011      	movs	r1, r2
 8000f82:	2203      	movs	r2, #3
 8000f84:	400a      	ands	r2, r1
 8000f86:	00d2      	lsls	r2, r2, #3
 8000f88:	21ff      	movs	r1, #255	; 0xff
 8000f8a:	4091      	lsls	r1, r2
 8000f8c:	000a      	movs	r2, r1
 8000f8e:	43d2      	mvns	r2, r2
 8000f90:	401a      	ands	r2, r3
 8000f92:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	019b      	lsls	r3, r3, #6
 8000f98:	22ff      	movs	r2, #255	; 0xff
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	1dfb      	adds	r3, r7, #7
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	4003      	ands	r3, r0
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000faa:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <NVIC_SetPriority+0xd8>)
 8000fac:	1dfb      	adds	r3, r7, #7
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	33c0      	adds	r3, #192	; 0xc0
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	501a      	str	r2, [r3, r0]
}
 8000fbc:	46c0      	nop			; (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b003      	add	sp, #12
 8000fc2:	bd90      	pop	{r4, r7, pc}
 8000fc4:	e000ed00 	.word	0xe000ed00
 8000fc8:	e000e100 	.word	0xe000e100

08000fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	4a0c      	ldr	r2, [pc, #48]	; (800100c <SysTick_Config+0x40>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d901      	bls.n	8000fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e010      	b.n	8001004 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <SysTick_Config+0x44>)
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	3a01      	subs	r2, #1
 8000fe8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fea:	2301      	movs	r3, #1
 8000fec:	425b      	negs	r3, r3
 8000fee:	2103      	movs	r1, #3
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f7ff ff7d 	bl	8000ef0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <SysTick_Config+0x44>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <SysTick_Config+0x44>)
 8000ffe:	2207      	movs	r2, #7
 8001000:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001002:	2300      	movs	r3, #0
}
 8001004:	0018      	movs	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	b002      	add	sp, #8
 800100a:	bd80      	pop	{r7, pc}
 800100c:	00ffffff 	.word	0x00ffffff
 8001010:	e000e010 	.word	0xe000e010

08001014 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	210f      	movs	r1, #15
 8001020:	187b      	adds	r3, r7, r1
 8001022:	1c02      	adds	r2, r0, #0
 8001024:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	187b      	adds	r3, r7, r1
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	b25b      	sxtb	r3, r3
 800102e:	0011      	movs	r1, r2
 8001030:	0018      	movs	r0, r3
 8001032:	f7ff ff5d 	bl	8000ef0 <NVIC_SetPriority>
}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b004      	add	sp, #16
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	0018      	movs	r0, r3
 800104a:	f7ff ffbf 	bl	8000fcc <SysTick_Config>
 800104e:	0003      	movs	r3, r0
}
 8001050:	0018      	movs	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	b002      	add	sp, #8
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800106e:	e155      	b.n	800131c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2101      	movs	r1, #1
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	4091      	lsls	r1, r2
 800107a:	000a      	movs	r2, r1
 800107c:	4013      	ands	r3, r2
 800107e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d100      	bne.n	8001088 <HAL_GPIO_Init+0x30>
 8001086:	e146      	b.n	8001316 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x40>
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b12      	cmp	r3, #18
 8001096:	d123      	bne.n	80010e0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	08da      	lsrs	r2, r3, #3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3208      	adds	r2, #8
 80010a0:	0092      	lsls	r2, r2, #2
 80010a2:	58d3      	ldr	r3, [r2, r3]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	2207      	movs	r2, #7
 80010aa:	4013      	ands	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	220f      	movs	r2, #15
 80010b0:	409a      	lsls	r2, r3
 80010b2:	0013      	movs	r3, r2
 80010b4:	43da      	mvns	r2, r3
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	691a      	ldr	r2, [r3, #16]
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	2107      	movs	r1, #7
 80010c4:	400b      	ands	r3, r1
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	409a      	lsls	r2, r3
 80010ca:	0013      	movs	r3, r2
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	08da      	lsrs	r2, r3, #3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3208      	adds	r2, #8
 80010da:	0092      	lsls	r2, r2, #2
 80010dc:	6939      	ldr	r1, [r7, #16]
 80010de:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d00b      	beq.n	8001100 <HAL_GPIO_Init+0xa8>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d007      	beq.n	8001100 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010f4:	2b11      	cmp	r3, #17
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b12      	cmp	r3, #18
 80010fe:	d130      	bne.n	8001162 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	409a      	lsls	r2, r3
 800110e:	0013      	movs	r3, r2
 8001110:	43da      	mvns	r2, r3
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	68da      	ldr	r2, [r3, #12]
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	409a      	lsls	r2, r3
 8001122:	0013      	movs	r3, r2
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001136:	2201      	movs	r2, #1
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	409a      	lsls	r2, r3
 800113c:	0013      	movs	r3, r2
 800113e:	43da      	mvns	r2, r3
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	091b      	lsrs	r3, r3, #4
 800114c:	2201      	movs	r2, #1
 800114e:	401a      	ands	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
 8001154:	0013      	movs	r3, r2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	2203      	movs	r2, #3
 800116e:	409a      	lsls	r2, r3
 8001170:	0013      	movs	r3, r2
 8001172:	43da      	mvns	r2, r3
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2203      	movs	r2, #3
 8001180:	401a      	ands	r2, r3
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	409a      	lsls	r2, r3
 8001188:	0013      	movs	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	2203      	movs	r2, #3
 80011a2:	409a      	lsls	r2, r3
 80011a4:	0013      	movs	r3, r2
 80011a6:	43da      	mvns	r2, r3
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	689a      	ldr	r2, [r3, #8]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	409a      	lsls	r2, r3
 80011b8:	0013      	movs	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	055b      	lsls	r3, r3, #21
 80011ce:	4013      	ands	r3, r2
 80011d0:	d100      	bne.n	80011d4 <HAL_GPIO_Init+0x17c>
 80011d2:	e0a0      	b.n	8001316 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d4:	4b57      	ldr	r3, [pc, #348]	; (8001334 <HAL_GPIO_Init+0x2dc>)
 80011d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011d8:	4b56      	ldr	r3, [pc, #344]	; (8001334 <HAL_GPIO_Init+0x2dc>)
 80011da:	2101      	movs	r1, #1
 80011dc:	430a      	orrs	r2, r1
 80011de:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80011e0:	4a55      	ldr	r2, [pc, #340]	; (8001338 <HAL_GPIO_Init+0x2e0>)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	3302      	adds	r3, #2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	589b      	ldr	r3, [r3, r2]
 80011ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	2203      	movs	r2, #3
 80011f2:	4013      	ands	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	220f      	movs	r2, #15
 80011f8:	409a      	lsls	r2, r3
 80011fa:	0013      	movs	r3, r2
 80011fc:	43da      	mvns	r2, r3
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	23a0      	movs	r3, #160	; 0xa0
 8001208:	05db      	lsls	r3, r3, #23
 800120a:	429a      	cmp	r2, r3
 800120c:	d01f      	beq.n	800124e <HAL_GPIO_Init+0x1f6>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4a      	ldr	r2, [pc, #296]	; (800133c <HAL_GPIO_Init+0x2e4>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d019      	beq.n	800124a <HAL_GPIO_Init+0x1f2>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a49      	ldr	r2, [pc, #292]	; (8001340 <HAL_GPIO_Init+0x2e8>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d013      	beq.n	8001246 <HAL_GPIO_Init+0x1ee>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a48      	ldr	r2, [pc, #288]	; (8001344 <HAL_GPIO_Init+0x2ec>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d00d      	beq.n	8001242 <HAL_GPIO_Init+0x1ea>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a47      	ldr	r2, [pc, #284]	; (8001348 <HAL_GPIO_Init+0x2f0>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d007      	beq.n	800123e <HAL_GPIO_Init+0x1e6>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a46      	ldr	r2, [pc, #280]	; (800134c <HAL_GPIO_Init+0x2f4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d101      	bne.n	800123a <HAL_GPIO_Init+0x1e2>
 8001236:	2305      	movs	r3, #5
 8001238:	e00a      	b.n	8001250 <HAL_GPIO_Init+0x1f8>
 800123a:	2306      	movs	r3, #6
 800123c:	e008      	b.n	8001250 <HAL_GPIO_Init+0x1f8>
 800123e:	2304      	movs	r3, #4
 8001240:	e006      	b.n	8001250 <HAL_GPIO_Init+0x1f8>
 8001242:	2303      	movs	r3, #3
 8001244:	e004      	b.n	8001250 <HAL_GPIO_Init+0x1f8>
 8001246:	2302      	movs	r3, #2
 8001248:	e002      	b.n	8001250 <HAL_GPIO_Init+0x1f8>
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <HAL_GPIO_Init+0x1f8>
 800124e:	2300      	movs	r3, #0
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	2103      	movs	r1, #3
 8001254:	400a      	ands	r2, r1
 8001256:	0092      	lsls	r2, r2, #2
 8001258:	4093      	lsls	r3, r2
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001260:	4935      	ldr	r1, [pc, #212]	; (8001338 <HAL_GPIO_Init+0x2e0>)
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	089b      	lsrs	r3, r3, #2
 8001266:	3302      	adds	r3, #2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800126e:	4b38      	ldr	r3, [pc, #224]	; (8001350 <HAL_GPIO_Init+0x2f8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	43da      	mvns	r2, r3
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	2380      	movs	r3, #128	; 0x80
 8001284:	025b      	lsls	r3, r3, #9
 8001286:	4013      	ands	r3, r2
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4313      	orrs	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001292:	4b2f      	ldr	r3, [pc, #188]	; (8001350 <HAL_GPIO_Init+0x2f8>)
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001298:	4b2d      	ldr	r3, [pc, #180]	; (8001350 <HAL_GPIO_Init+0x2f8>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	43da      	mvns	r2, r3
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	029b      	lsls	r3, r3, #10
 80012b0:	4013      	ands	r3, r2
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012bc:	4b24      	ldr	r3, [pc, #144]	; (8001350 <HAL_GPIO_Init+0x2f8>)
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012c2:	4b23      	ldr	r3, [pc, #140]	; (8001350 <HAL_GPIO_Init+0x2f8>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	43da      	mvns	r2, r3
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	2380      	movs	r3, #128	; 0x80
 80012d8:	035b      	lsls	r3, r3, #13
 80012da:	4013      	ands	r3, r2
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012e6:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <HAL_GPIO_Init+0x2f8>)
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012ec:	4b18      	ldr	r3, [pc, #96]	; (8001350 <HAL_GPIO_Init+0x2f8>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	43da      	mvns	r2, r3
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	039b      	lsls	r3, r3, #14
 8001304:	4013      	ands	r3, r2
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <HAL_GPIO_Init+0x2f8>)
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3301      	adds	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	40da      	lsrs	r2, r3
 8001324:	1e13      	subs	r3, r2, #0
 8001326:	d000      	beq.n	800132a <HAL_GPIO_Init+0x2d2>
 8001328:	e6a2      	b.n	8001070 <HAL_GPIO_Init+0x18>
  }
}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	46bd      	mov	sp, r7
 800132e:	b006      	add	sp, #24
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	40021000 	.word	0x40021000
 8001338:	40010000 	.word	0x40010000
 800133c:	50000400 	.word	0x50000400
 8001340:	50000800 	.word	0x50000800
 8001344:	50000c00 	.word	0x50000c00
 8001348:	50001000 	.word	0x50001000
 800134c:	50001c00 	.word	0x50001c00
 8001350:	40010400 	.word	0x40010400

08001354 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	0008      	movs	r0, r1
 800135e:	0011      	movs	r1, r2
 8001360:	1cbb      	adds	r3, r7, #2
 8001362:	1c02      	adds	r2, r0, #0
 8001364:	801a      	strh	r2, [r3, #0]
 8001366:	1c7b      	adds	r3, r7, #1
 8001368:	1c0a      	adds	r2, r1, #0
 800136a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 800136c:	1c7b      	adds	r3, r7, #1
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d004      	beq.n	800137e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001374:	1cbb      	adds	r3, r7, #2
 8001376:	881a      	ldrh	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800137c:	e003      	b.n	8001386 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800137e:	1cbb      	adds	r3, r7, #2
 8001380:	881a      	ldrh	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	46bd      	mov	sp, r7
 800138a:	b002      	add	sp, #8
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001390:	b5b0      	push	{r4, r5, r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d102      	bne.n	80013a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	f000 fb6a 	bl	8001a78 <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013a4:	4bc7      	ldr	r3, [pc, #796]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	220c      	movs	r2, #12
 80013aa:	4013      	ands	r3, r2
 80013ac:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013ae:	4bc5      	ldr	r3, [pc, #788]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 80013b0:	68da      	ldr	r2, [r3, #12]
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	025b      	lsls	r3, r3, #9
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2201      	movs	r2, #1
 80013c0:	4013      	ands	r3, r2
 80013c2:	d100      	bne.n	80013c6 <HAL_RCC_OscConfig+0x36>
 80013c4:	e07d      	b.n	80014c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	2b08      	cmp	r3, #8
 80013ca:	d007      	beq.n	80013dc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	2b0c      	cmp	r3, #12
 80013d0:	d112      	bne.n	80013f8 <HAL_RCC_OscConfig+0x68>
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	025b      	lsls	r3, r3, #9
 80013d8:	429a      	cmp	r2, r3
 80013da:	d10d      	bne.n	80013f8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013dc:	4bb9      	ldr	r3, [pc, #740]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	029b      	lsls	r3, r3, #10
 80013e4:	4013      	ands	r3, r2
 80013e6:	d100      	bne.n	80013ea <HAL_RCC_OscConfig+0x5a>
 80013e8:	e06a      	b.n	80014c0 <HAL_RCC_OscConfig+0x130>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d166      	bne.n	80014c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	f000 fb40 	bl	8001a78 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	2380      	movs	r3, #128	; 0x80
 80013fe:	025b      	lsls	r3, r3, #9
 8001400:	429a      	cmp	r2, r3
 8001402:	d107      	bne.n	8001414 <HAL_RCC_OscConfig+0x84>
 8001404:	4baf      	ldr	r3, [pc, #700]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4bae      	ldr	r3, [pc, #696]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 800140a:	2180      	movs	r1, #128	; 0x80
 800140c:	0249      	lsls	r1, r1, #9
 800140e:	430a      	orrs	r2, r1
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	e027      	b.n	8001464 <HAL_RCC_OscConfig+0xd4>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	23a0      	movs	r3, #160	; 0xa0
 800141a:	02db      	lsls	r3, r3, #11
 800141c:	429a      	cmp	r2, r3
 800141e:	d10e      	bne.n	800143e <HAL_RCC_OscConfig+0xae>
 8001420:	4ba8      	ldr	r3, [pc, #672]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4ba7      	ldr	r3, [pc, #668]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 8001426:	2180      	movs	r1, #128	; 0x80
 8001428:	02c9      	lsls	r1, r1, #11
 800142a:	430a      	orrs	r2, r1
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	4ba5      	ldr	r3, [pc, #660]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	4ba4      	ldr	r3, [pc, #656]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 8001434:	2180      	movs	r1, #128	; 0x80
 8001436:	0249      	lsls	r1, r1, #9
 8001438:	430a      	orrs	r2, r1
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	e012      	b.n	8001464 <HAL_RCC_OscConfig+0xd4>
 800143e:	4ba1      	ldr	r3, [pc, #644]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	4ba0      	ldr	r3, [pc, #640]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 8001444:	49a0      	ldr	r1, [pc, #640]	; (80016c8 <HAL_RCC_OscConfig+0x338>)
 8001446:	400a      	ands	r2, r1
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	4b9e      	ldr	r3, [pc, #632]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	025b      	lsls	r3, r3, #9
 8001452:	4013      	ands	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4b9a      	ldr	r3, [pc, #616]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b99      	ldr	r3, [pc, #612]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 800145e:	499b      	ldr	r1, [pc, #620]	; (80016cc <HAL_RCC_OscConfig+0x33c>)
 8001460:	400a      	ands	r2, r1
 8001462:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d014      	beq.n	8001496 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff fd18 	bl	8000ea0 <HAL_GetTick>
 8001470:	0003      	movs	r3, r0
 8001472:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001476:	f7ff fd13 	bl	8000ea0 <HAL_GetTick>
 800147a:	0002      	movs	r2, r0
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b64      	cmp	r3, #100	; 0x64
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e2f7      	b.n	8001a78 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001488:	4b8e      	ldr	r3, [pc, #568]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	029b      	lsls	r3, r3, #10
 8001490:	4013      	ands	r3, r2
 8001492:	d0f0      	beq.n	8001476 <HAL_RCC_OscConfig+0xe6>
 8001494:	e015      	b.n	80014c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001496:	f7ff fd03 	bl	8000ea0 <HAL_GetTick>
 800149a:	0003      	movs	r3, r0
 800149c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014a0:	f7ff fcfe 	bl	8000ea0 <HAL_GetTick>
 80014a4:	0002      	movs	r2, r0
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	; 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e2e2      	b.n	8001a78 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014b2:	4b84      	ldr	r3, [pc, #528]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	029b      	lsls	r3, r3, #10
 80014ba:	4013      	ands	r3, r2
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x110>
 80014be:	e000      	b.n	80014c2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2202      	movs	r2, #2
 80014c8:	4013      	ands	r3, r2
 80014ca:	d100      	bne.n	80014ce <HAL_RCC_OscConfig+0x13e>
 80014cc:	e098      	b.n	8001600 <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	2220      	movs	r2, #32
 80014d8:	4013      	ands	r3, r2
 80014da:	d009      	beq.n	80014f0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80014dc:	4b79      	ldr	r3, [pc, #484]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b78      	ldr	r3, [pc, #480]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 80014e2:	2120      	movs	r1, #32
 80014e4:	430a      	orrs	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	2220      	movs	r2, #32
 80014ec:	4393      	bics	r3, r2
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	d005      	beq.n	8001502 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	2b0c      	cmp	r3, #12
 80014fa:	d13d      	bne.n	8001578 <HAL_RCC_OscConfig+0x1e8>
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d13a      	bne.n	8001578 <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001502:	4b70      	ldr	r3, [pc, #448]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2204      	movs	r2, #4
 8001508:	4013      	ands	r3, r2
 800150a:	d004      	beq.n	8001516 <HAL_RCC_OscConfig+0x186>
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e2b0      	b.n	8001a78 <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001516:	4b6b      	ldr	r3, [pc, #428]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	4a6d      	ldr	r2, [pc, #436]	; (80016d0 <HAL_RCC_OscConfig+0x340>)
 800151c:	4013      	ands	r3, r2
 800151e:	0019      	movs	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	021a      	lsls	r2, r3, #8
 8001526:	4b67      	ldr	r3, [pc, #412]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 8001528:	430a      	orrs	r2, r1
 800152a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800152c:	4b65      	ldr	r3, [pc, #404]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2209      	movs	r2, #9
 8001532:	4393      	bics	r3, r2
 8001534:	0019      	movs	r1, r3
 8001536:	4b63      	ldr	r3, [pc, #396]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 8001538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800153a:	430a      	orrs	r2, r1
 800153c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800153e:	f000 fbcb 	bl	8001cd8 <HAL_RCC_GetSysClockFreq>
 8001542:	0001      	movs	r1, r0
 8001544:	4b5f      	ldr	r3, [pc, #380]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	091b      	lsrs	r3, r3, #4
 800154a:	220f      	movs	r2, #15
 800154c:	4013      	ands	r3, r2
 800154e:	4a61      	ldr	r2, [pc, #388]	; (80016d4 <HAL_RCC_OscConfig+0x344>)
 8001550:	5cd3      	ldrb	r3, [r2, r3]
 8001552:	000a      	movs	r2, r1
 8001554:	40da      	lsrs	r2, r3
 8001556:	4b60      	ldr	r3, [pc, #384]	; (80016d8 <HAL_RCC_OscConfig+0x348>)
 8001558:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800155a:	2513      	movs	r5, #19
 800155c:	197c      	adds	r4, r7, r5
 800155e:	2000      	movs	r0, #0
 8001560:	f7ff fc68 	bl	8000e34 <HAL_InitTick>
 8001564:	0003      	movs	r3, r0
 8001566:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001568:	197b      	adds	r3, r7, r5
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d047      	beq.n	8001600 <HAL_RCC_OscConfig+0x270>
      {
        return status;
 8001570:	2313      	movs	r3, #19
 8001572:	18fb      	adds	r3, r7, r3
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	e27f      	b.n	8001a78 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	2b00      	cmp	r3, #0
 800157c:	d027      	beq.n	80015ce <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800157e:	4b51      	ldr	r3, [pc, #324]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2209      	movs	r2, #9
 8001584:	4393      	bics	r3, r2
 8001586:	0019      	movs	r1, r3
 8001588:	4b4e      	ldr	r3, [pc, #312]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 800158a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800158c:	430a      	orrs	r2, r1
 800158e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff fc86 	bl	8000ea0 <HAL_GetTick>
 8001594:	0003      	movs	r3, r0
 8001596:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800159a:	f7ff fc81 	bl	8000ea0 <HAL_GetTick>
 800159e:	0002      	movs	r2, r0
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e265      	b.n	8001a78 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015ac:	4b45      	ldr	r3, [pc, #276]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2204      	movs	r2, #4
 80015b2:	4013      	ands	r3, r2
 80015b4:	d0f1      	beq.n	800159a <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b6:	4b43      	ldr	r3, [pc, #268]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	4a45      	ldr	r2, [pc, #276]	; (80016d0 <HAL_RCC_OscConfig+0x340>)
 80015bc:	4013      	ands	r3, r2
 80015be:	0019      	movs	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	021a      	lsls	r2, r3, #8
 80015c6:	4b3f      	ldr	r3, [pc, #252]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 80015c8:	430a      	orrs	r2, r1
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	e018      	b.n	8001600 <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ce:	4b3d      	ldr	r3, [pc, #244]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4b3c      	ldr	r3, [pc, #240]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 80015d4:	2101      	movs	r1, #1
 80015d6:	438a      	bics	r2, r1
 80015d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015da:	f7ff fc61 	bl	8000ea0 <HAL_GetTick>
 80015de:	0003      	movs	r3, r0
 80015e0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e4:	f7ff fc5c 	bl	8000ea0 <HAL_GetTick>
 80015e8:	0002      	movs	r2, r0
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e240      	b.n	8001a78 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015f6:	4b33      	ldr	r3, [pc, #204]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2204      	movs	r2, #4
 80015fc:	4013      	ands	r3, r2
 80015fe:	d1f1      	bne.n	80015e4 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2210      	movs	r2, #16
 8001606:	4013      	ands	r3, r2
 8001608:	d100      	bne.n	800160c <HAL_RCC_OscConfig+0x27c>
 800160a:	e09e      	b.n	800174a <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d13f      	bne.n	8001692 <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001612:	4b2c      	ldr	r3, [pc, #176]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4013      	ands	r3, r2
 800161c:	d005      	beq.n	800162a <HAL_RCC_OscConfig+0x29a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e226      	b.n	8001a78 <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800162a:	4b26      	ldr	r3, [pc, #152]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4a2b      	ldr	r2, [pc, #172]	; (80016dc <HAL_RCC_OscConfig+0x34c>)
 8001630:	4013      	ands	r3, r2
 8001632:	0019      	movs	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1a      	ldr	r2, [r3, #32]
 8001638:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 800163a:	430a      	orrs	r2, r1
 800163c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800163e:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	021b      	lsls	r3, r3, #8
 8001644:	0a19      	lsrs	r1, r3, #8
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	061a      	lsls	r2, r3, #24
 800164c:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 800164e:	430a      	orrs	r2, r1
 8001650:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	0b5b      	lsrs	r3, r3, #13
 8001658:	3301      	adds	r3, #1
 800165a:	2280      	movs	r2, #128	; 0x80
 800165c:	0212      	lsls	r2, r2, #8
 800165e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001660:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	091b      	lsrs	r3, r3, #4
 8001666:	210f      	movs	r1, #15
 8001668:	400b      	ands	r3, r1
 800166a:	491a      	ldr	r1, [pc, #104]	; (80016d4 <HAL_RCC_OscConfig+0x344>)
 800166c:	5ccb      	ldrb	r3, [r1, r3]
 800166e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_RCC_OscConfig+0x348>)
 8001672:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001674:	2513      	movs	r5, #19
 8001676:	197c      	adds	r4, r7, r5
 8001678:	2000      	movs	r0, #0
 800167a:	f7ff fbdb 	bl	8000e34 <HAL_InitTick>
 800167e:	0003      	movs	r3, r0
 8001680:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001682:	197b      	adds	r3, r7, r5
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d05f      	beq.n	800174a <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 800168a:	2313      	movs	r3, #19
 800168c:	18fb      	adds	r3, r7, r3
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	e1f2      	b.n	8001a78 <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d03d      	beq.n	8001716 <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	0049      	lsls	r1, r1, #1
 80016a4:	430a      	orrs	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff fbfa 	bl	8000ea0 <HAL_GetTick>
 80016ac:	0003      	movs	r3, r0
 80016ae:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016b0:	e016      	b.n	80016e0 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016b2:	f7ff fbf5 	bl	8000ea0 <HAL_GetTick>
 80016b6:	0002      	movs	r2, r0
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d90f      	bls.n	80016e0 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e1d9      	b.n	8001a78 <HAL_RCC_OscConfig+0x6e8>
 80016c4:	40021000 	.word	0x40021000
 80016c8:	fffeffff 	.word	0xfffeffff
 80016cc:	fffbffff 	.word	0xfffbffff
 80016d0:	ffffe0ff 	.word	0xffffe0ff
 80016d4:	08003634 	.word	0x08003634
 80016d8:	20000000 	.word	0x20000000
 80016dc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016e0:	4bca      	ldr	r3, [pc, #808]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4013      	ands	r3, r2
 80016ea:	d0e2      	beq.n	80016b2 <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ec:	4bc7      	ldr	r3, [pc, #796]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	4ac7      	ldr	r2, [pc, #796]	; (8001a10 <HAL_RCC_OscConfig+0x680>)
 80016f2:	4013      	ands	r3, r2
 80016f4:	0019      	movs	r1, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1a      	ldr	r2, [r3, #32]
 80016fa:	4bc4      	ldr	r3, [pc, #784]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 80016fc:	430a      	orrs	r2, r1
 80016fe:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001700:	4bc2      	ldr	r3, [pc, #776]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	021b      	lsls	r3, r3, #8
 8001706:	0a19      	lsrs	r1, r3, #8
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	061a      	lsls	r2, r3, #24
 800170e:	4bbf      	ldr	r3, [pc, #764]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 8001710:	430a      	orrs	r2, r1
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	e019      	b.n	800174a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001716:	4bbd      	ldr	r3, [pc, #756]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4bbc      	ldr	r3, [pc, #752]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 800171c:	49bd      	ldr	r1, [pc, #756]	; (8001a14 <HAL_RCC_OscConfig+0x684>)
 800171e:	400a      	ands	r2, r1
 8001720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001722:	f7ff fbbd 	bl	8000ea0 <HAL_GetTick>
 8001726:	0003      	movs	r3, r0
 8001728:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800172c:	f7ff fbb8 	bl	8000ea0 <HAL_GetTick>
 8001730:	0002      	movs	r2, r0
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e19c      	b.n	8001a78 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800173e:	4bb3      	ldr	r3, [pc, #716]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4013      	ands	r3, r2
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2208      	movs	r2, #8
 8001750:	4013      	ands	r3, r2
 8001752:	d036      	beq.n	80017c2 <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d019      	beq.n	8001790 <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800175c:	4bab      	ldr	r3, [pc, #684]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 800175e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001760:	4baa      	ldr	r3, [pc, #680]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 8001762:	2101      	movs	r1, #1
 8001764:	430a      	orrs	r2, r1
 8001766:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001768:	f7ff fb9a 	bl	8000ea0 <HAL_GetTick>
 800176c:	0003      	movs	r3, r0
 800176e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001772:	f7ff fb95 	bl	8000ea0 <HAL_GetTick>
 8001776:	0002      	movs	r2, r0
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e179      	b.n	8001a78 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001784:	4ba1      	ldr	r3, [pc, #644]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 8001786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001788:	2202      	movs	r2, #2
 800178a:	4013      	ands	r3, r2
 800178c:	d0f1      	beq.n	8001772 <HAL_RCC_OscConfig+0x3e2>
 800178e:	e018      	b.n	80017c2 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001790:	4b9e      	ldr	r3, [pc, #632]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 8001792:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001794:	4b9d      	ldr	r3, [pc, #628]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 8001796:	2101      	movs	r1, #1
 8001798:	438a      	bics	r2, r1
 800179a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179c:	f7ff fb80 	bl	8000ea0 <HAL_GetTick>
 80017a0:	0003      	movs	r3, r0
 80017a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a6:	f7ff fb7b 	bl	8000ea0 <HAL_GetTick>
 80017aa:	0002      	movs	r2, r0
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e15f      	b.n	8001a78 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017b8:	4b94      	ldr	r3, [pc, #592]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 80017ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017bc:	2202      	movs	r2, #2
 80017be:	4013      	ands	r3, r2
 80017c0:	d1f1      	bne.n	80017a6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2204      	movs	r2, #4
 80017c8:	4013      	ands	r3, r2
 80017ca:	d100      	bne.n	80017ce <HAL_RCC_OscConfig+0x43e>
 80017cc:	e0af      	b.n	800192e <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ce:	2323      	movs	r3, #35	; 0x23
 80017d0:	18fb      	adds	r3, r7, r3
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d6:	4b8d      	ldr	r3, [pc, #564]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 80017d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	055b      	lsls	r3, r3, #21
 80017de:	4013      	ands	r3, r2
 80017e0:	d10a      	bne.n	80017f8 <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	4b8a      	ldr	r3, [pc, #552]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 80017e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017e6:	4b89      	ldr	r3, [pc, #548]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 80017e8:	2180      	movs	r1, #128	; 0x80
 80017ea:	0549      	lsls	r1, r1, #21
 80017ec:	430a      	orrs	r2, r1
 80017ee:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80017f0:	2323      	movs	r3, #35	; 0x23
 80017f2:	18fb      	adds	r3, r7, r3
 80017f4:	2201      	movs	r2, #1
 80017f6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f8:	4b87      	ldr	r3, [pc, #540]	; (8001a18 <HAL_RCC_OscConfig+0x688>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	2380      	movs	r3, #128	; 0x80
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4013      	ands	r3, r2
 8001802:	d11a      	bne.n	800183a <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001804:	4b84      	ldr	r3, [pc, #528]	; (8001a18 <HAL_RCC_OscConfig+0x688>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4b83      	ldr	r3, [pc, #524]	; (8001a18 <HAL_RCC_OscConfig+0x688>)
 800180a:	2180      	movs	r1, #128	; 0x80
 800180c:	0049      	lsls	r1, r1, #1
 800180e:	430a      	orrs	r2, r1
 8001810:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001812:	f7ff fb45 	bl	8000ea0 <HAL_GetTick>
 8001816:	0003      	movs	r3, r0
 8001818:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181c:	f7ff fb40 	bl	8000ea0 <HAL_GetTick>
 8001820:	0002      	movs	r2, r0
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b64      	cmp	r3, #100	; 0x64
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e124      	b.n	8001a78 <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182e:	4b7a      	ldr	r3, [pc, #488]	; (8001a18 <HAL_RCC_OscConfig+0x688>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	2380      	movs	r3, #128	; 0x80
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	4013      	ands	r3, r2
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	429a      	cmp	r2, r3
 8001844:	d107      	bne.n	8001856 <HAL_RCC_OscConfig+0x4c6>
 8001846:	4b71      	ldr	r3, [pc, #452]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 8001848:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800184a:	4b70      	ldr	r3, [pc, #448]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 800184c:	2180      	movs	r1, #128	; 0x80
 800184e:	0049      	lsls	r1, r1, #1
 8001850:	430a      	orrs	r2, r1
 8001852:	651a      	str	r2, [r3, #80]	; 0x50
 8001854:	e031      	b.n	80018ba <HAL_RCC_OscConfig+0x52a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10c      	bne.n	8001878 <HAL_RCC_OscConfig+0x4e8>
 800185e:	4b6b      	ldr	r3, [pc, #428]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 8001860:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001862:	4b6a      	ldr	r3, [pc, #424]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 8001864:	496b      	ldr	r1, [pc, #428]	; (8001a14 <HAL_RCC_OscConfig+0x684>)
 8001866:	400a      	ands	r2, r1
 8001868:	651a      	str	r2, [r3, #80]	; 0x50
 800186a:	4b68      	ldr	r3, [pc, #416]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 800186c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800186e:	4b67      	ldr	r3, [pc, #412]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 8001870:	496a      	ldr	r1, [pc, #424]	; (8001a1c <HAL_RCC_OscConfig+0x68c>)
 8001872:	400a      	ands	r2, r1
 8001874:	651a      	str	r2, [r3, #80]	; 0x50
 8001876:	e020      	b.n	80018ba <HAL_RCC_OscConfig+0x52a>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	23a0      	movs	r3, #160	; 0xa0
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	429a      	cmp	r2, r3
 8001882:	d10e      	bne.n	80018a2 <HAL_RCC_OscConfig+0x512>
 8001884:	4b61      	ldr	r3, [pc, #388]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 8001886:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001888:	4b60      	ldr	r3, [pc, #384]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 800188a:	2180      	movs	r1, #128	; 0x80
 800188c:	00c9      	lsls	r1, r1, #3
 800188e:	430a      	orrs	r2, r1
 8001890:	651a      	str	r2, [r3, #80]	; 0x50
 8001892:	4b5e      	ldr	r3, [pc, #376]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 8001894:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001896:	4b5d      	ldr	r3, [pc, #372]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 8001898:	2180      	movs	r1, #128	; 0x80
 800189a:	0049      	lsls	r1, r1, #1
 800189c:	430a      	orrs	r2, r1
 800189e:	651a      	str	r2, [r3, #80]	; 0x50
 80018a0:	e00b      	b.n	80018ba <HAL_RCC_OscConfig+0x52a>
 80018a2:	4b5a      	ldr	r3, [pc, #360]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 80018a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018a6:	4b59      	ldr	r3, [pc, #356]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 80018a8:	495a      	ldr	r1, [pc, #360]	; (8001a14 <HAL_RCC_OscConfig+0x684>)
 80018aa:	400a      	ands	r2, r1
 80018ac:	651a      	str	r2, [r3, #80]	; 0x50
 80018ae:	4b57      	ldr	r3, [pc, #348]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 80018b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018b2:	4b56      	ldr	r3, [pc, #344]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 80018b4:	4959      	ldr	r1, [pc, #356]	; (8001a1c <HAL_RCC_OscConfig+0x68c>)
 80018b6:	400a      	ands	r2, r1
 80018b8:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d015      	beq.n	80018ee <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c2:	f7ff faed 	bl	8000ea0 <HAL_GetTick>
 80018c6:	0003      	movs	r3, r0
 80018c8:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018ca:	e009      	b.n	80018e0 <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018cc:	f7ff fae8 	bl	8000ea0 <HAL_GetTick>
 80018d0:	0002      	movs	r2, r0
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	4a52      	ldr	r2, [pc, #328]	; (8001a20 <HAL_RCC_OscConfig+0x690>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e0cb      	b.n	8001a78 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018e0:	4b4a      	ldr	r3, [pc, #296]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 80018e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4013      	ands	r3, r2
 80018ea:	d0ef      	beq.n	80018cc <HAL_RCC_OscConfig+0x53c>
 80018ec:	e014      	b.n	8001918 <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ee:	f7ff fad7 	bl	8000ea0 <HAL_GetTick>
 80018f2:	0003      	movs	r3, r0
 80018f4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018f6:	e009      	b.n	800190c <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f8:	f7ff fad2 	bl	8000ea0 <HAL_GetTick>
 80018fc:	0002      	movs	r2, r0
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	4a47      	ldr	r2, [pc, #284]	; (8001a20 <HAL_RCC_OscConfig+0x690>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e0b5      	b.n	8001a78 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800190c:	4b3f      	ldr	r3, [pc, #252]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 800190e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4013      	ands	r3, r2
 8001916:	d1ef      	bne.n	80018f8 <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001918:	2323      	movs	r3, #35	; 0x23
 800191a:	18fb      	adds	r3, r7, r3
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d105      	bne.n	800192e <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001922:	4b3a      	ldr	r3, [pc, #232]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 8001924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001926:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 8001928:	493e      	ldr	r1, [pc, #248]	; (8001a24 <HAL_RCC_OscConfig+0x694>)
 800192a:	400a      	ands	r2, r1
 800192c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	2b00      	cmp	r3, #0
 8001934:	d100      	bne.n	8001938 <HAL_RCC_OscConfig+0x5a8>
 8001936:	e09e      	b.n	8001a76 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	2b0c      	cmp	r3, #12
 800193c:	d100      	bne.n	8001940 <HAL_RCC_OscConfig+0x5b0>
 800193e:	e077      	b.n	8001a30 <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	2b02      	cmp	r3, #2
 8001946:	d145      	bne.n	80019d4 <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001948:	4b30      	ldr	r3, [pc, #192]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b2f      	ldr	r3, [pc, #188]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 800194e:	4936      	ldr	r1, [pc, #216]	; (8001a28 <HAL_RCC_OscConfig+0x698>)
 8001950:	400a      	ands	r2, r1
 8001952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7ff faa4 	bl	8000ea0 <HAL_GetTick>
 8001958:	0003      	movs	r3, r0
 800195a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800195e:	f7ff fa9f 	bl	8000ea0 <HAL_GetTick>
 8001962:	0002      	movs	r2, r0
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e083      	b.n	8001a78 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001970:	4b26      	ldr	r3, [pc, #152]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	049b      	lsls	r3, r3, #18
 8001978:	4013      	ands	r3, r2
 800197a:	d1f0      	bne.n	800195e <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800197c:	4b23      	ldr	r3, [pc, #140]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	4a2a      	ldr	r2, [pc, #168]	; (8001a2c <HAL_RCC_OscConfig+0x69c>)
 8001982:	4013      	ands	r3, r2
 8001984:	0019      	movs	r1, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	431a      	orrs	r2, r3
 8001996:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 8001998:	430a      	orrs	r2, r1
 800199a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800199c:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 80019a2:	2180      	movs	r1, #128	; 0x80
 80019a4:	0449      	lsls	r1, r1, #17
 80019a6:	430a      	orrs	r2, r1
 80019a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019aa:	f7ff fa79 	bl	8000ea0 <HAL_GetTick>
 80019ae:	0003      	movs	r3, r0
 80019b0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b4:	f7ff fa74 	bl	8000ea0 <HAL_GetTick>
 80019b8:	0002      	movs	r2, r0
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e058      	b.n	8001a78 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	049b      	lsls	r3, r3, #18
 80019ce:	4013      	ands	r3, r2
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCC_OscConfig+0x624>
 80019d2:	e050      	b.n	8001a76 <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d4:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 80019da:	4913      	ldr	r1, [pc, #76]	; (8001a28 <HAL_RCC_OscConfig+0x698>)
 80019dc:	400a      	ands	r2, r1
 80019de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff fa5e 	bl	8000ea0 <HAL_GetTick>
 80019e4:	0003      	movs	r3, r0
 80019e6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ea:	f7ff fa59 	bl	8000ea0 <HAL_GetTick>
 80019ee:	0002      	movs	r2, r0
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e03d      	b.n	8001a78 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <HAL_RCC_OscConfig+0x67c>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	049b      	lsls	r3, r3, #18
 8001a04:	4013      	ands	r3, r2
 8001a06:	d1f0      	bne.n	80019ea <HAL_RCC_OscConfig+0x65a>
 8001a08:	e035      	b.n	8001a76 <HAL_RCC_OscConfig+0x6e6>
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	ffff1fff 	.word	0xffff1fff
 8001a14:	fffffeff 	.word	0xfffffeff
 8001a18:	40007000 	.word	0x40007000
 8001a1c:	fffffbff 	.word	0xfffffbff
 8001a20:	00001388 	.word	0x00001388
 8001a24:	efffffff 	.word	0xefffffff
 8001a28:	feffffff 	.word	0xfeffffff
 8001a2c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d101      	bne.n	8001a3c <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e01d      	b.n	8001a78 <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a3c:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <HAL_RCC_OscConfig+0x6f0>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	025b      	lsls	r3, r3, #9
 8001a48:	401a      	ands	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d10f      	bne.n	8001a72 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	23f0      	movs	r3, #240	; 0xf0
 8001a56:	039b      	lsls	r3, r3, #14
 8001a58:	401a      	ands	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d107      	bne.n	8001a72 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	23c0      	movs	r3, #192	; 0xc0
 8001a66:	041b      	lsls	r3, r3, #16
 8001a68:	401a      	ands	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d001      	beq.n	8001a76 <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	0018      	movs	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b00a      	add	sp, #40	; 0x28
 8001a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a80:	40021000 	.word	0x40021000

08001a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a84:	b5b0      	push	{r4, r5, r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e10d      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a98:	4b88      	ldr	r3, [pc, #544]	; (8001cbc <HAL_RCC_ClockConfig+0x238>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d911      	bls.n	8001aca <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa6:	4b85      	ldr	r3, [pc, #532]	; (8001cbc <HAL_RCC_ClockConfig+0x238>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	4393      	bics	r3, r2
 8001aae:	0019      	movs	r1, r3
 8001ab0:	4b82      	ldr	r3, [pc, #520]	; (8001cbc <HAL_RCC_ClockConfig+0x238>)
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab8:	4b80      	ldr	r3, [pc, #512]	; (8001cbc <HAL_RCC_ClockConfig+0x238>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2201      	movs	r2, #1
 8001abe:	4013      	ands	r3, r2
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d001      	beq.n	8001aca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e0f4      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d009      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad4:	4b7a      	ldr	r3, [pc, #488]	; (8001cc0 <HAL_RCC_ClockConfig+0x23c>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	22f0      	movs	r2, #240	; 0xf0
 8001ada:	4393      	bics	r3, r2
 8001adc:	0019      	movs	r1, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	4b77      	ldr	r3, [pc, #476]	; (8001cc0 <HAL_RCC_ClockConfig+0x23c>)
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2201      	movs	r2, #1
 8001aee:	4013      	ands	r3, r2
 8001af0:	d100      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x70>
 8001af2:	e089      	b.n	8001c08 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d107      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001afc:	4b70      	ldr	r3, [pc, #448]	; (8001cc0 <HAL_RCC_ClockConfig+0x23c>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	029b      	lsls	r3, r3, #10
 8001b04:	4013      	ands	r3, r2
 8001b06:	d120      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0d3      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b03      	cmp	r3, #3
 8001b12:	d107      	bne.n	8001b24 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b14:	4b6a      	ldr	r3, [pc, #424]	; (8001cc0 <HAL_RCC_ClockConfig+0x23c>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	049b      	lsls	r3, r3, #18
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d114      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0c7      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d106      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b2c:	4b64      	ldr	r3, [pc, #400]	; (8001cc0 <HAL_RCC_ClockConfig+0x23c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2204      	movs	r2, #4
 8001b32:	4013      	ands	r3, r2
 8001b34:	d109      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e0bc      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b3a:	4b61      	ldr	r3, [pc, #388]	; (8001cc0 <HAL_RCC_ClockConfig+0x23c>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4013      	ands	r3, r2
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e0b4      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b4a:	4b5d      	ldr	r3, [pc, #372]	; (8001cc0 <HAL_RCC_ClockConfig+0x23c>)
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2203      	movs	r2, #3
 8001b50:	4393      	bics	r3, r2
 8001b52:	0019      	movs	r1, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	4b59      	ldr	r3, [pc, #356]	; (8001cc0 <HAL_RCC_ClockConfig+0x23c>)
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b5e:	f7ff f99f 	bl	8000ea0 <HAL_GetTick>
 8001b62:	0003      	movs	r3, r0
 8001b64:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d111      	bne.n	8001b92 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b6e:	e009      	b.n	8001b84 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b70:	f7ff f996 	bl	8000ea0 <HAL_GetTick>
 8001b74:	0002      	movs	r2, r0
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	4a52      	ldr	r2, [pc, #328]	; (8001cc4 <HAL_RCC_ClockConfig+0x240>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e097      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b84:	4b4e      	ldr	r3, [pc, #312]	; (8001cc0 <HAL_RCC_ClockConfig+0x23c>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	220c      	movs	r2, #12
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d1ef      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xec>
 8001b90:	e03a      	b.n	8001c08 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d111      	bne.n	8001bbe <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b9a:	e009      	b.n	8001bb0 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9c:	f7ff f980 	bl	8000ea0 <HAL_GetTick>
 8001ba0:	0002      	movs	r2, r0
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	4a47      	ldr	r2, [pc, #284]	; (8001cc4 <HAL_RCC_ClockConfig+0x240>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e081      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bb0:	4b43      	ldr	r3, [pc, #268]	; (8001cc0 <HAL_RCC_ClockConfig+0x23c>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	220c      	movs	r2, #12
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b0c      	cmp	r3, #12
 8001bba:	d1ef      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x118>
 8001bbc:	e024      	b.n	8001c08 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d11b      	bne.n	8001bfe <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bc6:	e009      	b.n	8001bdc <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc8:	f7ff f96a 	bl	8000ea0 <HAL_GetTick>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	4a3c      	ldr	r2, [pc, #240]	; (8001cc4 <HAL_RCC_ClockConfig+0x240>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e06b      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bdc:	4b38      	ldr	r3, [pc, #224]	; (8001cc0 <HAL_RCC_ClockConfig+0x23c>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	220c      	movs	r2, #12
 8001be2:	4013      	ands	r3, r2
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d1ef      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x144>
 8001be8:	e00e      	b.n	8001c08 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bea:	f7ff f959 	bl	8000ea0 <HAL_GetTick>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	4a33      	ldr	r2, [pc, #204]	; (8001cc4 <HAL_RCC_ClockConfig+0x240>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e05a      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bfe:	4b30      	ldr	r3, [pc, #192]	; (8001cc0 <HAL_RCC_ClockConfig+0x23c>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	220c      	movs	r2, #12
 8001c04:	4013      	ands	r3, r2
 8001c06:	d1f0      	bne.n	8001bea <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c08:	4b2c      	ldr	r3, [pc, #176]	; (8001cbc <HAL_RCC_ClockConfig+0x238>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4013      	ands	r3, r2
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d211      	bcs.n	8001c3a <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <HAL_RCC_ClockConfig+0x238>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	4393      	bics	r3, r2
 8001c1e:	0019      	movs	r1, r3
 8001c20:	4b26      	ldr	r3, [pc, #152]	; (8001cbc <HAL_RCC_ClockConfig+0x238>)
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c28:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <HAL_RCC_ClockConfig+0x238>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4013      	ands	r3, r2
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d001      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e03c      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2204      	movs	r2, #4
 8001c40:	4013      	ands	r3, r2
 8001c42:	d009      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c44:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <HAL_RCC_ClockConfig+0x23c>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	4a1f      	ldr	r2, [pc, #124]	; (8001cc8 <HAL_RCC_ClockConfig+0x244>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <HAL_RCC_ClockConfig+0x23c>)
 8001c54:	430a      	orrs	r2, r1
 8001c56:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2208      	movs	r2, #8
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d00a      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c62:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <HAL_RCC_ClockConfig+0x23c>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	4a19      	ldr	r2, [pc, #100]	; (8001ccc <HAL_RCC_ClockConfig+0x248>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	00da      	lsls	r2, r3, #3
 8001c72:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <HAL_RCC_ClockConfig+0x23c>)
 8001c74:	430a      	orrs	r2, r1
 8001c76:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c78:	f000 f82e 	bl	8001cd8 <HAL_RCC_GetSysClockFreq>
 8001c7c:	0001      	movs	r1, r0
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <HAL_RCC_ClockConfig+0x23c>)
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	091b      	lsrs	r3, r3, #4
 8001c84:	220f      	movs	r2, #15
 8001c86:	4013      	ands	r3, r2
 8001c88:	4a11      	ldr	r2, [pc, #68]	; (8001cd0 <HAL_RCC_ClockConfig+0x24c>)
 8001c8a:	5cd3      	ldrb	r3, [r2, r3]
 8001c8c:	000a      	movs	r2, r1
 8001c8e:	40da      	lsrs	r2, r3
 8001c90:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <HAL_RCC_ClockConfig+0x250>)
 8001c92:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001c94:	250b      	movs	r5, #11
 8001c96:	197c      	adds	r4, r7, r5
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f7ff f8cb 	bl	8000e34 <HAL_InitTick>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001ca2:	197b      	adds	r3, r7, r5
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8001caa:	230b      	movs	r3, #11
 8001cac:	18fb      	adds	r3, r7, r3
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	e000      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b004      	add	sp, #16
 8001cba:	bdb0      	pop	{r4, r5, r7, pc}
 8001cbc:	40022000 	.word	0x40022000
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	00001388 	.word	0x00001388
 8001cc8:	fffff8ff 	.word	0xfffff8ff
 8001ccc:	ffffc7ff 	.word	0xffffc7ff
 8001cd0:	08003634 	.word	0x08003634
 8001cd4:	20000000 	.word	0x20000000

08001cd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001cde:	4b3b      	ldr	r3, [pc, #236]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d00e      	beq.n	8001d0c <HAL_RCC_GetSysClockFreq+0x34>
 8001cee:	2b0c      	cmp	r3, #12
 8001cf0:	d00f      	beq.n	8001d12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d157      	bne.n	8001da6 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001cf6:	4b35      	ldr	r3, [pc, #212]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xf4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2210      	movs	r2, #16
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d002      	beq.n	8001d06 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001d00:	4b33      	ldr	r3, [pc, #204]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d02:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001d04:	e05d      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8001d06:	4b33      	ldr	r3, [pc, #204]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d08:	613b      	str	r3, [r7, #16]
      break;
 8001d0a:	e05a      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d0c:	4b32      	ldr	r3, [pc, #200]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001d0e:	613b      	str	r3, [r7, #16]
      break;
 8001d10:	e057      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	0c9b      	lsrs	r3, r3, #18
 8001d16:	220f      	movs	r2, #15
 8001d18:	4013      	ands	r3, r2
 8001d1a:	4a30      	ldr	r2, [pc, #192]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x104>)
 8001d1c:	5cd3      	ldrb	r3, [r2, r3]
 8001d1e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	0d9b      	lsrs	r3, r3, #22
 8001d24:	2203      	movs	r2, #3
 8001d26:	4013      	ands	r3, r2
 8001d28:	3301      	adds	r3, #1
 8001d2a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d2c:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	025b      	lsls	r3, r3, #9
 8001d34:	4013      	ands	r3, r2
 8001d36:	d00f      	beq.n	8001d58 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001d38:	68b9      	ldr	r1, [r7, #8]
 8001d3a:	000a      	movs	r2, r1
 8001d3c:	0152      	lsls	r2, r2, #5
 8001d3e:	1a52      	subs	r2, r2, r1
 8001d40:	0193      	lsls	r3, r2, #6
 8001d42:	1a9b      	subs	r3, r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	185b      	adds	r3, r3, r1
 8001d48:	025b      	lsls	r3, r3, #9
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f7fe f9db 	bl	8000108 <__udivsi3>
 8001d52:	0003      	movs	r3, r0
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	e023      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d58:	4b1c      	ldr	r3, [pc, #112]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2210      	movs	r2, #16
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d00f      	beq.n	8001d82 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001d62:	68b9      	ldr	r1, [r7, #8]
 8001d64:	000a      	movs	r2, r1
 8001d66:	0152      	lsls	r2, r2, #5
 8001d68:	1a52      	subs	r2, r2, r1
 8001d6a:	0193      	lsls	r3, r2, #6
 8001d6c:	1a9b      	subs	r3, r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	185b      	adds	r3, r3, r1
 8001d72:	021b      	lsls	r3, r3, #8
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	0018      	movs	r0, r3
 8001d78:	f7fe f9c6 	bl	8000108 <__udivsi3>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	e00e      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8001d82:	68b9      	ldr	r1, [r7, #8]
 8001d84:	000a      	movs	r2, r1
 8001d86:	0152      	lsls	r2, r2, #5
 8001d88:	1a52      	subs	r2, r2, r1
 8001d8a:	0193      	lsls	r3, r2, #6
 8001d8c:	1a9b      	subs	r3, r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	185b      	adds	r3, r3, r1
 8001d92:	029b      	lsls	r3, r3, #10
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	0018      	movs	r0, r3
 8001d98:	f7fe f9b6 	bl	8000108 <__udivsi3>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	613b      	str	r3, [r7, #16]
      break;
 8001da4:	e00d      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xf4>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	0b5b      	lsrs	r3, r3, #13
 8001dac:	2207      	movs	r2, #7
 8001dae:	4013      	ands	r3, r2
 8001db0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	3301      	adds	r3, #1
 8001db6:	2280      	movs	r2, #128	; 0x80
 8001db8:	0212      	lsls	r2, r2, #8
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	0013      	movs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
      break;
 8001dc0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001dc2:	693b      	ldr	r3, [r7, #16]
}
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b006      	add	sp, #24
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	003d0900 	.word	0x003d0900
 8001dd4:	00f42400 	.word	0x00f42400
 8001dd8:	007a1200 	.word	0x007a1200
 8001ddc:	0800364c 	.word	0x0800364c

08001de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de4:	4b02      	ldr	r3, [pc, #8]	; (8001df0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	0018      	movs	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	20000000 	.word	0x20000000

08001df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001df8:	f7ff fff2 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001dfc:	0001      	movs	r1, r0
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	2207      	movs	r2, #7
 8001e06:	4013      	ands	r3, r2
 8001e08:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e0a:	5cd3      	ldrb	r3, [r2, r3]
 8001e0c:	40d9      	lsrs	r1, r3
 8001e0e:	000b      	movs	r3, r1
}
 8001e10:	0018      	movs	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	08003644 	.word	0x08003644

08001e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e24:	f7ff ffdc 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001e28:	0001      	movs	r1, r0
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	0adb      	lsrs	r3, r3, #11
 8001e30:	2207      	movs	r2, #7
 8001e32:	4013      	ands	r3, r2
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e36:	5cd3      	ldrb	r3, [r2, r3]
 8001e38:	40d9      	lsrs	r1, r3
 8001e3a:	000b      	movs	r3, r1
}
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	40021000 	.word	0x40021000
 8001e48:	08003644 	.word	0x08003644

08001e4c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2220      	movs	r2, #32
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d100      	bne.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8001e5e:	e0c7      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8001e60:	2317      	movs	r3, #23
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e68:	4b91      	ldr	r3, [pc, #580]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	055b      	lsls	r3, r3, #21
 8001e70:	4013      	ands	r3, r2
 8001e72:	d10a      	bne.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e74:	4b8e      	ldr	r3, [pc, #568]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e78:	4b8d      	ldr	r3, [pc, #564]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e7a:	2180      	movs	r1, #128	; 0x80
 8001e7c:	0549      	lsls	r1, r1, #21
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001e82:	2317      	movs	r3, #23
 8001e84:	18fb      	adds	r3, r7, r3
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8a:	4b8a      	ldr	r3, [pc, #552]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4013      	ands	r3, r2
 8001e94:	d11a      	bne.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e96:	4b87      	ldr	r3, [pc, #540]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4b86      	ldr	r3, [pc, #536]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001e9c:	2180      	movs	r1, #128	; 0x80
 8001e9e:	0049      	lsls	r1, r1, #1
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea4:	f7fe fffc 	bl	8000ea0 <HAL_GetTick>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	e008      	b.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eae:	f7fe fff7 	bl	8000ea0 <HAL_GetTick>
 8001eb2:	0002      	movs	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b64      	cmp	r3, #100	; 0x64
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e0f3      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec0:	4b7c      	ldr	r3, [pc, #496]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001ecc:	4b78      	ldr	r3, [pc, #480]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	23c0      	movs	r3, #192	; 0xc0
 8001ed2:	039b      	lsls	r3, r3, #14
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	23c0      	movs	r3, #192	; 0xc0
 8001ede:	039b      	lsls	r3, r3, #14
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d013      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	23c0      	movs	r3, #192	; 0xc0
 8001eee:	029b      	lsls	r3, r3, #10
 8001ef0:	401a      	ands	r2, r3
 8001ef2:	23c0      	movs	r3, #192	; 0xc0
 8001ef4:	029b      	lsls	r3, r3, #10
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d10a      	bne.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001efa:	4b6d      	ldr	r3, [pc, #436]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	029b      	lsls	r3, r3, #10
 8001f02:	401a      	ands	r2, r3
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	029b      	lsls	r3, r3, #10
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0cb      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x25c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001f10:	4b67      	ldr	r3, [pc, #412]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f14:	23c0      	movs	r3, #192	; 0xc0
 8001f16:	029b      	lsls	r3, r3, #10
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d03b      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	23c0      	movs	r3, #192	; 0xc0
 8001f28:	029b      	lsls	r3, r3, #10
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d033      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2220      	movs	r2, #32
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d02e      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001f3c:	4b5c      	ldr	r3, [pc, #368]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f40:	4a5d      	ldr	r2, [pc, #372]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f46:	4b5a      	ldr	r3, [pc, #360]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f4a:	4b59      	ldr	r3, [pc, #356]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f4c:	2180      	movs	r1, #128	; 0x80
 8001f4e:	0309      	lsls	r1, r1, #12
 8001f50:	430a      	orrs	r2, r1
 8001f52:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f54:	4b56      	ldr	r3, [pc, #344]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f58:	4b55      	ldr	r3, [pc, #340]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f5a:	4958      	ldr	r1, [pc, #352]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8001f5c:	400a      	ands	r2, r1
 8001f5e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001f60:	4b53      	ldr	r3, [pc, #332]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d014      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7fe ff96 	bl	8000ea0 <HAL_GetTick>
 8001f74:	0003      	movs	r3, r0
 8001f76:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f78:	e009      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f7a:	f7fe ff91 	bl	8000ea0 <HAL_GetTick>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	4a4e      	ldr	r2, [pc, #312]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e08c      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x25c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f8e:	4b48      	ldr	r3, [pc, #288]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f92:	2380      	movs	r3, #128	; 0x80
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4013      	ands	r3, r2
 8001f98:	d0ef      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	23c0      	movs	r3, #192	; 0xc0
 8001fa0:	029b      	lsls	r3, r3, #10
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	23c0      	movs	r3, #192	; 0xc0
 8001fa6:	029b      	lsls	r3, r3, #10
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d10c      	bne.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8001fac:	4b40      	ldr	r3, [pc, #256]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a44      	ldr	r2, [pc, #272]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	0019      	movs	r1, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	23c0      	movs	r3, #192	; 0xc0
 8001fbc:	039b      	lsls	r3, r3, #14
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	4b3b      	ldr	r3, [pc, #236]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	4b3a      	ldr	r3, [pc, #232]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fc8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	23c0      	movs	r3, #192	; 0xc0
 8001fd0:	029b      	lsls	r3, r3, #10
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	4b36      	ldr	r3, [pc, #216]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fda:	2317      	movs	r3, #23
 8001fdc:	18fb      	adds	r3, r7, r3
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d105      	bne.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe4:	4b32      	ldr	r3, [pc, #200]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fe8:	4b31      	ldr	r3, [pc, #196]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fea:	4937      	ldr	r1, [pc, #220]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001fec:	400a      	ands	r2, r1
 8001fee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d009      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ffa:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffe:	2203      	movs	r2, #3
 8002000:	4393      	bics	r3, r2
 8002002:	0019      	movs	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	4b29      	ldr	r3, [pc, #164]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800200a:	430a      	orrs	r2, r1
 800200c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2202      	movs	r2, #2
 8002014:	4013      	ands	r3, r2
 8002016:	d009      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002018:	4b25      	ldr	r3, [pc, #148]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800201a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201c:	220c      	movs	r2, #12
 800201e:	4393      	bics	r3, r2
 8002020:	0019      	movs	r1, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002028:	430a      	orrs	r2, r1
 800202a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2204      	movs	r2, #4
 8002032:	4013      	ands	r3, r2
 8002034:	d009      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002036:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203a:	4a24      	ldr	r2, [pc, #144]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800203c:	4013      	ands	r3, r2
 800203e:	0019      	movs	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002046:	430a      	orrs	r2, r1
 8002048:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2208      	movs	r2, #8
 8002050:	4013      	ands	r3, r2
 8002052:	d009      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002054:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002058:	4a1d      	ldr	r2, [pc, #116]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800205a:	4013      	ands	r3, r2
 800205c:	0019      	movs	r1, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695a      	ldr	r2, [r3, #20]
 8002062:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002064:	430a      	orrs	r2, r1
 8002066:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	2380      	movs	r3, #128	; 0x80
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	4013      	ands	r3, r2
 8002072:	d009      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002074:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002078:	4a0f      	ldr	r2, [pc, #60]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800207a:	4013      	ands	r3, r2
 800207c:	0019      	movs	r1, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699a      	ldr	r2, [r3, #24]
 8002082:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002084:	430a      	orrs	r2, r1
 8002086:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2280      	movs	r2, #128	; 0x80
 800208e:	4013      	ands	r3, r2
 8002090:	d009      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002092:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002096:	4a0f      	ldr	r2, [pc, #60]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002098:	4013      	ands	r3, r2
 800209a:	0019      	movs	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69da      	ldr	r2, [r3, #28]
 80020a0:	4b03      	ldr	r3, [pc, #12]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020a2:	430a      	orrs	r2, r1
 80020a4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	0018      	movs	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b006      	add	sp, #24
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40007000 	.word	0x40007000
 80020b8:	fffcffff 	.word	0xfffcffff
 80020bc:	fff7ffff 	.word	0xfff7ffff
 80020c0:	00001388 	.word	0x00001388
 80020c4:	ffcfffff 	.word	0xffcfffff
 80020c8:	efffffff 	.word	0xefffffff
 80020cc:	fffff3ff 	.word	0xfffff3ff
 80020d0:	ffffcfff 	.word	0xffffcfff
 80020d4:	fff3ffff 	.word	0xfff3ffff

080020d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e059      	b.n	800219e <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2251      	movs	r2, #81	; 0x51
 80020f4:	5c9b      	ldrb	r3, [r3, r2]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d107      	bne.n	800210c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2250      	movs	r2, #80	; 0x50
 8002100:	2100      	movs	r1, #0
 8002102:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	0018      	movs	r0, r3
 8002108:	f7fe fce0 	bl	8000acc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2251      	movs	r2, #81	; 0x51
 8002110:	2102      	movs	r1, #2
 8002112:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2140      	movs	r1, #64	; 0x40
 8002120:	438a      	bics	r2, r1
 8002122:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	431a      	orrs	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6999      	ldr	r1, [r3, #24]
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	400b      	ands	r3, r1
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	431a      	orrs	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	431a      	orrs	r2, r3
 8002158:	0011      	movs	r1, r2
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	0c1b      	lsrs	r3, r3, #16
 800216c:	2204      	movs	r2, #4
 800216e:	4013      	ands	r3, r2
 8002170:	0019      	movs	r1, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	69da      	ldr	r2, [r3, #28]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4907      	ldr	r1, [pc, #28]	; (80021a8 <HAL_SPI_Init+0xd0>)
 800218a:	400a      	ands	r2, r1
 800218c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2251      	movs	r2, #81	; 0x51
 8002198:	2101      	movs	r1, #1
 800219a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	0018      	movs	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	b002      	add	sp, #8
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	fffff7ff 	.word	0xfffff7ff

080021ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	1dbb      	adds	r3, r7, #6
 80021ba:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021bc:	231f      	movs	r3, #31
 80021be:	18fb      	adds	r3, r7, r3
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2250      	movs	r2, #80	; 0x50
 80021c8:	5c9b      	ldrb	r3, [r3, r2]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_SPI_Transmit+0x26>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e136      	b.n	8002440 <HAL_SPI_Transmit+0x294>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2250      	movs	r2, #80	; 0x50
 80021d6:	2101      	movs	r1, #1
 80021d8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021da:	f7fe fe61 	bl	8000ea0 <HAL_GetTick>
 80021de:	0003      	movs	r3, r0
 80021e0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80021e2:	2316      	movs	r3, #22
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	1dba      	adds	r2, r7, #6
 80021e8:	8812      	ldrh	r2, [r2, #0]
 80021ea:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2251      	movs	r2, #81	; 0x51
 80021f0:	5c9b      	ldrb	r3, [r3, r2]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d004      	beq.n	8002202 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80021f8:	231f      	movs	r3, #31
 80021fa:	18fb      	adds	r3, r7, r3
 80021fc:	2202      	movs	r2, #2
 80021fe:	701a      	strb	r2, [r3, #0]
    goto error;
 8002200:	e113      	b.n	800242a <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_SPI_Transmit+0x64>
 8002208:	1dbb      	adds	r3, r7, #6
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d104      	bne.n	800221a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002210:	231f      	movs	r3, #31
 8002212:	18fb      	adds	r3, r7, r3
 8002214:	2201      	movs	r2, #1
 8002216:	701a      	strb	r2, [r3, #0]
    goto error;
 8002218:	e107      	b.n	800242a <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2251      	movs	r2, #81	; 0x51
 800221e:	2103      	movs	r1, #3
 8002220:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1dba      	adds	r2, r7, #6
 8002232:	8812      	ldrh	r2, [r2, #0]
 8002234:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1dba      	adds	r2, r7, #6
 800223a:	8812      	ldrh	r2, [r2, #0]
 800223c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	429a      	cmp	r2, r3
 8002266:	d108      	bne.n	800227a <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2180      	movs	r1, #128	; 0x80
 8002274:	01c9      	lsls	r1, r1, #7
 8002276:	430a      	orrs	r2, r1
 8002278:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2240      	movs	r2, #64	; 0x40
 8002282:	4013      	ands	r3, r2
 8002284:	2b40      	cmp	r3, #64	; 0x40
 8002286:	d007      	beq.n	8002298 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2140      	movs	r1, #64	; 0x40
 8002294:	430a      	orrs	r2, r1
 8002296:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d14e      	bne.n	8002342 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d004      	beq.n	80022b6 <HAL_SPI_Transmit+0x10a>
 80022ac:	2316      	movs	r3, #22
 80022ae:	18fb      	adds	r3, r7, r3
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d13f      	bne.n	8002336 <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	881a      	ldrh	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	1c9a      	adds	r2, r3, #2
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80022da:	e02c      	b.n	8002336 <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2202      	movs	r2, #2
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d112      	bne.n	8002310 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	881a      	ldrh	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	1c9a      	adds	r2, r3, #2
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002304:	b29b      	uxth	r3, r3
 8002306:	3b01      	subs	r3, #1
 8002308:	b29a      	uxth	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	86da      	strh	r2, [r3, #54]	; 0x36
 800230e:	e012      	b.n	8002336 <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002310:	f7fe fdc6 	bl	8000ea0 <HAL_GetTick>
 8002314:	0002      	movs	r2, r0
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d802      	bhi.n	8002326 <HAL_SPI_Transmit+0x17a>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	3301      	adds	r3, #1
 8002324:	d102      	bne.n	800232c <HAL_SPI_Transmit+0x180>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d104      	bne.n	8002336 <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 800232c:	231f      	movs	r3, #31
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	2203      	movs	r2, #3
 8002332:	701a      	strb	r2, [r3, #0]
          goto error;
 8002334:	e079      	b.n	800242a <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800233a:	b29b      	uxth	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1cd      	bne.n	80022dc <HAL_SPI_Transmit+0x130>
 8002340:	e04f      	b.n	80023e2 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d004      	beq.n	8002354 <HAL_SPI_Transmit+0x1a8>
 800234a:	2316      	movs	r3, #22
 800234c:	18fb      	adds	r3, r7, r3
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d141      	bne.n	80023d8 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	330c      	adds	r3, #12
 800235e:	7812      	ldrb	r2, [r2, #0]
 8002360:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002370:	b29b      	uxth	r3, r3
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800237a:	e02d      	b.n	80023d8 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2202      	movs	r2, #2
 8002384:	4013      	ands	r3, r2
 8002386:	2b02      	cmp	r3, #2
 8002388:	d113      	bne.n	80023b2 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	330c      	adds	r3, #12
 8002394:	7812      	ldrb	r2, [r2, #0]
 8002396:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80023b0:	e012      	b.n	80023d8 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023b2:	f7fe fd75 	bl	8000ea0 <HAL_GetTick>
 80023b6:	0002      	movs	r2, r0
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d802      	bhi.n	80023c8 <HAL_SPI_Transmit+0x21c>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	3301      	adds	r3, #1
 80023c6:	d102      	bne.n	80023ce <HAL_SPI_Transmit+0x222>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d104      	bne.n	80023d8 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 80023ce:	231f      	movs	r3, #31
 80023d0:	18fb      	adds	r3, r7, r3
 80023d2:	2203      	movs	r2, #3
 80023d4:	701a      	strb	r2, [r3, #0]
          goto error;
 80023d6:	e028      	b.n	800242a <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1cc      	bne.n	800237c <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	6839      	ldr	r1, [r7, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	0018      	movs	r0, r3
 80023ea:	f000 fbe1 	bl	8002bb0 <SPI_EndRxTxTransaction>
 80023ee:	1e03      	subs	r3, r0, #0
 80023f0:	d002      	beq.n	80023f8 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2220      	movs	r2, #32
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10a      	bne.n	8002416 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002400:	2300      	movs	r3, #0
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	2b00      	cmp	r3, #0
 800241c:	d004      	beq.n	8002428 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 800241e:	231f      	movs	r3, #31
 8002420:	18fb      	adds	r3, r7, r3
 8002422:	2201      	movs	r2, #1
 8002424:	701a      	strb	r2, [r3, #0]
 8002426:	e000      	b.n	800242a <HAL_SPI_Transmit+0x27e>
  }

error:
 8002428:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2251      	movs	r2, #81	; 0x51
 800242e:	2101      	movs	r1, #1
 8002430:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2250      	movs	r2, #80	; 0x50
 8002436:	2100      	movs	r1, #0
 8002438:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800243a:	231f      	movs	r3, #31
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	781b      	ldrb	r3, [r3, #0]
}
 8002440:	0018      	movs	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	b008      	add	sp, #32
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b089      	sub	sp, #36	; 0x24
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	1dbb      	adds	r3, r7, #6
 8002456:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002458:	2317      	movs	r3, #23
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	2382      	movs	r3, #130	; 0x82
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	429a      	cmp	r2, r3
 800246a:	d113      	bne.n	8002494 <HAL_SPI_Receive+0x4c>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10f      	bne.n	8002494 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2251      	movs	r2, #81	; 0x51
 8002478:	2104      	movs	r1, #4
 800247a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800247c:	1dbb      	adds	r3, r7, #6
 800247e:	881c      	ldrh	r4, [r3, #0]
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	68b9      	ldr	r1, [r7, #8]
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	0023      	movs	r3, r4
 800248c:	f000 f8fa 	bl	8002684 <HAL_SPI_TransmitReceive>
 8002490:	0003      	movs	r3, r0
 8002492:	e0f1      	b.n	8002678 <HAL_SPI_Receive+0x230>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2250      	movs	r2, #80	; 0x50
 8002498:	5c9b      	ldrb	r3, [r3, r2]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_SPI_Receive+0x5a>
 800249e:	2302      	movs	r3, #2
 80024a0:	e0ea      	b.n	8002678 <HAL_SPI_Receive+0x230>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2250      	movs	r2, #80	; 0x50
 80024a6:	2101      	movs	r1, #1
 80024a8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024aa:	f7fe fcf9 	bl	8000ea0 <HAL_GetTick>
 80024ae:	0003      	movs	r3, r0
 80024b0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2251      	movs	r2, #81	; 0x51
 80024b6:	5c9b      	ldrb	r3, [r3, r2]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d004      	beq.n	80024c8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80024be:	2317      	movs	r3, #23
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	2202      	movs	r2, #2
 80024c4:	701a      	strb	r2, [r3, #0]
    goto error;
 80024c6:	e0cc      	b.n	8002662 <HAL_SPI_Receive+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_SPI_Receive+0x8e>
 80024ce:	1dbb      	adds	r3, r7, #6
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d104      	bne.n	80024e0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80024d6:	2317      	movs	r3, #23
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	2201      	movs	r2, #1
 80024dc:	701a      	strb	r2, [r3, #0]
    goto error;
 80024de:	e0c0      	b.n	8002662 <HAL_SPI_Receive+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2251      	movs	r2, #81	; 0x51
 80024e4:	2104      	movs	r1, #4
 80024e6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	1dba      	adds	r2, r7, #6
 80024f8:	8812      	ldrh	r2, [r2, #0]
 80024fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1dba      	adds	r2, r7, #6
 8002500:	8812      	ldrh	r2, [r2, #0]
 8002502:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	2380      	movs	r3, #128	; 0x80
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	429a      	cmp	r2, r3
 800252c:	d107      	bne.n	800253e <HAL_SPI_Receive+0xf6>
  {
    SPI_1LINE_RX(hspi);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4951      	ldr	r1, [pc, #324]	; (8002680 <HAL_SPI_Receive+0x238>)
 800253a:	400a      	ands	r2, r1
 800253c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2240      	movs	r2, #64	; 0x40
 8002546:	4013      	ands	r3, r2
 8002548:	2b40      	cmp	r3, #64	; 0x40
 800254a:	d007      	beq.n	800255c <HAL_SPI_Receive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2140      	movs	r1, #64	; 0x40
 8002558:	430a      	orrs	r2, r1
 800255a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d164      	bne.n	800262e <HAL_SPI_Receive+0x1e6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002564:	e02f      	b.n	80025c6 <HAL_SPI_Receive+0x17e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2201      	movs	r2, #1
 800256e:	4013      	ands	r3, r2
 8002570:	2b01      	cmp	r3, #1
 8002572:	d115      	bne.n	80025a0 <HAL_SPI_Receive+0x158>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	330c      	adds	r3, #12
 800257a:	001a      	movs	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002580:	7812      	ldrb	r2, [r2, #0]
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258a:	1c5a      	adds	r2, r3, #1
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002594:	b29b      	uxth	r3, r3
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800259e:	e012      	b.n	80025c6 <HAL_SPI_Receive+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025a0:	f7fe fc7e 	bl	8000ea0 <HAL_GetTick>
 80025a4:	0002      	movs	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d802      	bhi.n	80025b6 <HAL_SPI_Receive+0x16e>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	3301      	adds	r3, #1
 80025b4:	d102      	bne.n	80025bc <HAL_SPI_Receive+0x174>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d104      	bne.n	80025c6 <HAL_SPI_Receive+0x17e>
        {
          errorcode = HAL_TIMEOUT;
 80025bc:	2317      	movs	r3, #23
 80025be:	18fb      	adds	r3, r7, r3
 80025c0:	2203      	movs	r2, #3
 80025c2:	701a      	strb	r2, [r3, #0]
          goto error;
 80025c4:	e04d      	b.n	8002662 <HAL_SPI_Receive+0x21a>
    while (hspi->RxXferCount > 0U)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1ca      	bne.n	8002566 <HAL_SPI_Receive+0x11e>
 80025d0:	e032      	b.n	8002638 <HAL_SPI_Receive+0x1f0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2201      	movs	r2, #1
 80025da:	4013      	ands	r3, r2
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d113      	bne.n	8002608 <HAL_SPI_Receive+0x1c0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ea:	b292      	uxth	r2, r2
 80025ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f2:	1c9a      	adds	r2, r3, #2
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002606:	e012      	b.n	800262e <HAL_SPI_Receive+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002608:	f7fe fc4a 	bl	8000ea0 <HAL_GetTick>
 800260c:	0002      	movs	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d802      	bhi.n	800261e <HAL_SPI_Receive+0x1d6>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	3301      	adds	r3, #1
 800261c:	d102      	bne.n	8002624 <HAL_SPI_Receive+0x1dc>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d104      	bne.n	800262e <HAL_SPI_Receive+0x1e6>
        {
          errorcode = HAL_TIMEOUT;
 8002624:	2317      	movs	r3, #23
 8002626:	18fb      	adds	r3, r7, r3
 8002628:	2203      	movs	r2, #3
 800262a:	701a      	strb	r2, [r3, #0]
          goto error;
 800262c:	e019      	b.n	8002662 <HAL_SPI_Receive+0x21a>
    while (hspi->RxXferCount > 0U)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002632:	b29b      	uxth	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1cc      	bne.n	80025d2 <HAL_SPI_Receive+0x18a>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	6839      	ldr	r1, [r7, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	0018      	movs	r0, r3
 8002640:	f000 fa4c 	bl	8002adc <SPI_EndRxTransaction>
 8002644:	1e03      	subs	r3, r0, #0
 8002646:	d002      	beq.n	800264e <HAL_SPI_Receive+0x206>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2220      	movs	r2, #32
 800264c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002652:	2b00      	cmp	r3, #0
 8002654:	d004      	beq.n	8002660 <HAL_SPI_Receive+0x218>
  {
    errorcode = HAL_ERROR;
 8002656:	2317      	movs	r3, #23
 8002658:	18fb      	adds	r3, r7, r3
 800265a:	2201      	movs	r2, #1
 800265c:	701a      	strb	r2, [r3, #0]
 800265e:	e000      	b.n	8002662 <HAL_SPI_Receive+0x21a>
  }

error :
 8002660:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2251      	movs	r2, #81	; 0x51
 8002666:	2101      	movs	r1, #1
 8002668:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2250      	movs	r2, #80	; 0x50
 800266e:	2100      	movs	r1, #0
 8002670:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002672:	2317      	movs	r3, #23
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	781b      	ldrb	r3, [r3, #0]
}
 8002678:	0018      	movs	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	b007      	add	sp, #28
 800267e:	bd90      	pop	{r4, r7, pc}
 8002680:	ffffbfff 	.word	0xffffbfff

08002684 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08c      	sub	sp, #48	; 0x30
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
 8002690:	001a      	movs	r2, r3
 8002692:	1cbb      	adds	r3, r7, #2
 8002694:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002696:	2301      	movs	r3, #1
 8002698:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800269a:	232b      	movs	r3, #43	; 0x2b
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2250      	movs	r2, #80	; 0x50
 80026a6:	5c9b      	ldrb	r3, [r3, r2]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <HAL_SPI_TransmitReceive+0x2c>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e1a1      	b.n	80029f4 <HAL_SPI_TransmitReceive+0x370>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2250      	movs	r2, #80	; 0x50
 80026b4:	2101      	movs	r1, #1
 80026b6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026b8:	f7fe fbf2 	bl	8000ea0 <HAL_GetTick>
 80026bc:	0003      	movs	r3, r0
 80026be:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80026c0:	2023      	movs	r0, #35	; 0x23
 80026c2:	183b      	adds	r3, r7, r0
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	2151      	movs	r1, #81	; 0x51
 80026c8:	5c52      	ldrb	r2, [r2, r1]
 80026ca:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80026d2:	231a      	movs	r3, #26
 80026d4:	18fb      	adds	r3, r7, r3
 80026d6:	1cba      	adds	r2, r7, #2
 80026d8:	8812      	ldrh	r2, [r2, #0]
 80026da:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026dc:	183b      	adds	r3, r7, r0
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d012      	beq.n	800270a <HAL_SPI_TransmitReceive+0x86>
 80026e4:	69fa      	ldr	r2, [r7, #28]
 80026e6:	2382      	movs	r3, #130	; 0x82
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d108      	bne.n	8002700 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d104      	bne.n	8002700 <HAL_SPI_TransmitReceive+0x7c>
 80026f6:	2323      	movs	r3, #35	; 0x23
 80026f8:	18fb      	adds	r3, r7, r3
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d004      	beq.n	800270a <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8002700:	232b      	movs	r3, #43	; 0x2b
 8002702:	18fb      	adds	r3, r7, r3
 8002704:	2202      	movs	r2, #2
 8002706:	701a      	strb	r2, [r3, #0]
    goto error;
 8002708:	e169      	b.n	80029de <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d006      	beq.n	800271e <HAL_SPI_TransmitReceive+0x9a>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_SPI_TransmitReceive+0x9a>
 8002716:	1cbb      	adds	r3, r7, #2
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d104      	bne.n	8002728 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 800271e:	232b      	movs	r3, #43	; 0x2b
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	2201      	movs	r2, #1
 8002724:	701a      	strb	r2, [r3, #0]
    goto error;
 8002726:	e15a      	b.n	80029de <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2251      	movs	r2, #81	; 0x51
 800272c:	5c9b      	ldrb	r3, [r3, r2]
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b04      	cmp	r3, #4
 8002732:	d003      	beq.n	800273c <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2251      	movs	r2, #81	; 0x51
 8002738:	2105      	movs	r1, #5
 800273a:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1cba      	adds	r2, r7, #2
 800274c:	8812      	ldrh	r2, [r2, #0]
 800274e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	1cba      	adds	r2, r7, #2
 8002754:	8812      	ldrh	r2, [r2, #0]
 8002756:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1cba      	adds	r2, r7, #2
 8002762:	8812      	ldrh	r2, [r2, #0]
 8002764:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1cba      	adds	r2, r7, #2
 800276a:	8812      	ldrh	r2, [r2, #0]
 800276c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2240      	movs	r2, #64	; 0x40
 8002782:	4013      	ands	r3, r2
 8002784:	2b40      	cmp	r3, #64	; 0x40
 8002786:	d007      	beq.n	8002798 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2140      	movs	r1, #64	; 0x40
 8002794:	430a      	orrs	r2, r1
 8002796:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d000      	beq.n	80027a6 <HAL_SPI_TransmitReceive+0x122>
 80027a4:	e07a      	b.n	800289c <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d004      	beq.n	80027b8 <HAL_SPI_TransmitReceive+0x134>
 80027ae:	231a      	movs	r3, #26
 80027b0:	18fb      	adds	r3, r7, r3
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d166      	bne.n	8002886 <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	881a      	ldrh	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	1c9a      	adds	r2, r3, #2
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027dc:	e053      	b.n	8002886 <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2202      	movs	r2, #2
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d11b      	bne.n	8002824 <HAL_SPI_TransmitReceive+0x1a0>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d016      	beq.n	8002824 <HAL_SPI_TransmitReceive+0x1a0>
 80027f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d113      	bne.n	8002824 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	881a      	ldrh	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	1c9a      	adds	r2, r3, #2
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002816:	b29b      	uxth	r3, r3
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2201      	movs	r2, #1
 800282c:	4013      	ands	r3, r2
 800282e:	2b01      	cmp	r3, #1
 8002830:	d119      	bne.n	8002866 <HAL_SPI_TransmitReceive+0x1e2>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002836:	b29b      	uxth	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d014      	beq.n	8002866 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002846:	b292      	uxth	r2, r2
 8002848:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284e:	1c9a      	adds	r2, r3, #2
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002858:	b29b      	uxth	r3, r3
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002862:	2301      	movs	r3, #1
 8002864:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002866:	f7fe fb1b 	bl	8000ea0 <HAL_GetTick>
 800286a:	0002      	movs	r2, r0
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002872:	429a      	cmp	r2, r3
 8002874:	d807      	bhi.n	8002886 <HAL_SPI_TransmitReceive+0x202>
 8002876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002878:	3301      	adds	r3, #1
 800287a:	d004      	beq.n	8002886 <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 800287c:	232b      	movs	r3, #43	; 0x2b
 800287e:	18fb      	adds	r3, r7, r3
 8002880:	2203      	movs	r2, #3
 8002882:	701a      	strb	r2, [r3, #0]
        goto error;
 8002884:	e0ab      	b.n	80029de <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800288a:	b29b      	uxth	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1a6      	bne.n	80027de <HAL_SPI_TransmitReceive+0x15a>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1a1      	bne.n	80027de <HAL_SPI_TransmitReceive+0x15a>
 800289a:	e07f      	b.n	800299c <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_SPI_TransmitReceive+0x22c>
 80028a4:	231a      	movs	r3, #26
 80028a6:	18fb      	adds	r3, r7, r3
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d000      	beq.n	80028b0 <HAL_SPI_TransmitReceive+0x22c>
 80028ae:	e06b      	b.n	8002988 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	330c      	adds	r3, #12
 80028ba:	7812      	ldrb	r2, [r2, #0]
 80028bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028d6:	e057      	b.n	8002988 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2202      	movs	r2, #2
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d11c      	bne.n	8002920 <HAL_SPI_TransmitReceive+0x29c>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d017      	beq.n	8002920 <HAL_SPI_TransmitReceive+0x29c>
 80028f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d114      	bne.n	8002920 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	330c      	adds	r3, #12
 8002900:	7812      	ldrb	r2, [r2, #0]
 8002902:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002912:	b29b      	uxth	r3, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2201      	movs	r2, #1
 8002928:	4013      	ands	r3, r2
 800292a:	2b01      	cmp	r3, #1
 800292c:	d119      	bne.n	8002962 <HAL_SPI_TransmitReceive+0x2de>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002932:	b29b      	uxth	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d014      	beq.n	8002962 <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002954:	b29b      	uxth	r3, r3
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800295e:	2301      	movs	r3, #1
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002962:	f7fe fa9d 	bl	8000ea0 <HAL_GetTick>
 8002966:	0002      	movs	r2, r0
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800296e:	429a      	cmp	r2, r3
 8002970:	d802      	bhi.n	8002978 <HAL_SPI_TransmitReceive+0x2f4>
 8002972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002974:	3301      	adds	r3, #1
 8002976:	d102      	bne.n	800297e <HAL_SPI_TransmitReceive+0x2fa>
 8002978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297a:	2b00      	cmp	r3, #0
 800297c:	d104      	bne.n	8002988 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 800297e:	232b      	movs	r3, #43	; 0x2b
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	2203      	movs	r2, #3
 8002984:	701a      	strb	r2, [r3, #0]
        goto error;
 8002986:	e02a      	b.n	80029de <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800298c:	b29b      	uxth	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1a2      	bne.n	80028d8 <HAL_SPI_TransmitReceive+0x254>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002996:	b29b      	uxth	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d19d      	bne.n	80028d8 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800299c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800299e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	0018      	movs	r0, r3
 80029a4:	f000 f904 	bl	8002bb0 <SPI_EndRxTxTransaction>
 80029a8:	1e03      	subs	r3, r0, #0
 80029aa:	d007      	beq.n	80029bc <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 80029ac:	232b      	movs	r3, #43	; 0x2b
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2220      	movs	r2, #32
 80029b8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80029ba:	e010      	b.n	80029de <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10b      	bne.n	80029dc <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	e000      	b.n	80029de <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 80029dc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2251      	movs	r2, #81	; 0x51
 80029e2:	2101      	movs	r1, #1
 80029e4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2250      	movs	r2, #80	; 0x50
 80029ea:	2100      	movs	r1, #0
 80029ec:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80029ee:	232b      	movs	r3, #43	; 0x2b
 80029f0:	18fb      	adds	r3, r7, r3
 80029f2:	781b      	ldrb	r3, [r3, #0]
}
 80029f4:	0018      	movs	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b00c      	add	sp, #48	; 0x30
 80029fa:	bd80      	pop	{r7, pc}

080029fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	1dfb      	adds	r3, r7, #7
 8002a0a:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a0c:	e050      	b.n	8002ab0 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	3301      	adds	r3, #1
 8002a12:	d04d      	beq.n	8002ab0 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002a14:	f7fe fa44 	bl	8000ea0 <HAL_GetTick>
 8002a18:	0002      	movs	r2, r0
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d902      	bls.n	8002a2a <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d142      	bne.n	8002ab0 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	21e0      	movs	r1, #224	; 0xe0
 8002a36:	438a      	bics	r2, r1
 8002a38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	2382      	movs	r3, #130	; 0x82
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d113      	bne.n	8002a6e <SPI_WaitFlagStateUntilTimeout+0x72>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	2380      	movs	r3, #128	; 0x80
 8002a4c:	021b      	lsls	r3, r3, #8
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d005      	beq.n	8002a5e <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	2380      	movs	r3, #128	; 0x80
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d107      	bne.n	8002a6e <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2140      	movs	r1, #64	; 0x40
 8002a6a:	438a      	bics	r2, r1
 8002a6c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a72:	2380      	movs	r3, #128	; 0x80
 8002a74:	019b      	lsls	r3, r3, #6
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d110      	bne.n	8002a9c <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4914      	ldr	r1, [pc, #80]	; (8002ad8 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8002a86:	400a      	ands	r2, r1
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2180      	movs	r1, #128	; 0x80
 8002a96:	0189      	lsls	r1, r1, #6
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2251      	movs	r2, #81	; 0x51
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2250      	movs	r2, #80	; 0x50
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e00f      	b.n	8002ad0 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	425a      	negs	r2, r3
 8002ac0:	4153      	adcs	r3, r2
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	001a      	movs	r2, r3
 8002ac6:	1dfb      	adds	r3, r7, #7
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d19f      	bne.n	8002a0e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	b004      	add	sp, #16
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	ffffdfff 	.word	0xffffdfff

08002adc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af02      	add	r7, sp, #8
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	2382      	movs	r3, #130	; 0x82
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d113      	bne.n	8002b1c <SPI_EndRxTransaction+0x40>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	021b      	lsls	r3, r3, #8
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d005      	beq.n	8002b0c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	2380      	movs	r3, #128	; 0x80
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d107      	bne.n	8002b1c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2140      	movs	r1, #64	; 0x40
 8002b18:	438a      	bics	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	2382      	movs	r3, #130	; 0x82
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d12b      	bne.n	8002b80 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d012      	beq.n	8002b5a <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	0013      	movs	r3, r2
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2180      	movs	r1, #128	; 0x80
 8002b42:	f7ff ff5b 	bl	80029fc <SPI_WaitFlagStateUntilTimeout>
 8002b46:	1e03      	subs	r3, r0, #0
 8002b48:	d02d      	beq.n	8002ba6 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4e:	2220      	movs	r2, #32
 8002b50:	431a      	orrs	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e026      	b.n	8002ba8 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	0013      	movs	r3, r2
 8002b64:	2200      	movs	r2, #0
 8002b66:	2101      	movs	r1, #1
 8002b68:	f7ff ff48 	bl	80029fc <SPI_WaitFlagStateUntilTimeout>
 8002b6c:	1e03      	subs	r3, r0, #0
 8002b6e:	d01a      	beq.n	8002ba6 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b74:	2220      	movs	r2, #32
 8002b76:	431a      	orrs	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e013      	b.n	8002ba8 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	0013      	movs	r3, r2
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	f7ff ff35 	bl	80029fc <SPI_WaitFlagStateUntilTimeout>
 8002b92:	1e03      	subs	r3, r0, #0
 8002b94:	d007      	beq.n	8002ba6 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e000      	b.n	8002ba8 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	0018      	movs	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b004      	add	sp, #16
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	2382      	movs	r3, #130	; 0x82
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d112      	bne.n	8002bee <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	0013      	movs	r3, r2
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	2180      	movs	r1, #128	; 0x80
 8002bd6:	f7ff ff11 	bl	80029fc <SPI_WaitFlagStateUntilTimeout>
 8002bda:	1e03      	subs	r3, r0, #0
 8002bdc:	d020      	beq.n	8002c20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be2:	2220      	movs	r2, #32
 8002be4:	431a      	orrs	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e019      	b.n	8002c22 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2251      	movs	r2, #81	; 0x51
 8002bf2:	5c9b      	ldrb	r3, [r3, r2]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d112      	bne.n	8002c20 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	0013      	movs	r3, r2
 8002c04:	2200      	movs	r2, #0
 8002c06:	2101      	movs	r1, #1
 8002c08:	f7ff fef8 	bl	80029fc <SPI_WaitFlagStateUntilTimeout>
 8002c0c:	1e03      	subs	r3, r0, #0
 8002c0e:	d007      	beq.n	8002c20 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c14:	2220      	movs	r2, #32
 8002c16:	431a      	orrs	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e000      	b.n	8002c22 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	0018      	movs	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b004      	add	sp, #16
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e044      	b.n	8002cc8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d107      	bne.n	8002c56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2270      	movs	r2, #112	; 0x70
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	0018      	movs	r0, r3
 8002c52:	f7fd ffd7 	bl	8000c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2224      	movs	r2, #36	; 0x24
 8002c5a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2101      	movs	r1, #1
 8002c68:	438a      	bics	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f000 f830 	bl	8002cd4 <UART_SetConfig>
 8002c74:	0003      	movs	r3, r0
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e024      	b.n	8002cc8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f000 fb57 	bl	800333c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	490d      	ldr	r1, [pc, #52]	; (8002cd0 <HAL_UART_Init+0xa4>)
 8002c9a:	400a      	ands	r2, r1
 8002c9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	212a      	movs	r1, #42	; 0x2a
 8002caa:	438a      	bics	r2, r1
 8002cac:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2101      	movs	r1, #1
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f000 fbef 	bl	80034a4 <UART_CheckIdleState>
 8002cc6:	0003      	movs	r3, r0
}
 8002cc8:	0018      	movs	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b002      	add	sp, #8
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	ffffb7ff 	.word	0xffffb7ff

08002cd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cd4:	b5b0      	push	{r4, r5, r7, lr}
 8002cd6:	b08e      	sub	sp, #56	; 0x38
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002cdc:	231b      	movs	r3, #27
 8002cde:	2218      	movs	r2, #24
 8002ce0:	4694      	mov	ip, r2
 8002ce2:	44bc      	add	ip, r7
 8002ce4:	4463      	add	r3, ip
 8002ce6:	2210      	movs	r2, #16
 8002ce8:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cee:	2313      	movs	r3, #19
 8002cf0:	2218      	movs	r2, #24
 8002cf2:	4694      	mov	ip, r2
 8002cf4:	44bc      	add	ip, r7
 8002cf6:	4463      	add	r3, ip
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4aca      	ldr	r2, [pc, #808]	; (8003048 <UART_SetConfig+0x374>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	0019      	movs	r1, r3
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	4ac5      	ldr	r2, [pc, #788]	; (800304c <UART_SetConfig+0x378>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	0019      	movs	r1, r3
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4abf      	ldr	r2, [pc, #764]	; (8003050 <UART_SetConfig+0x37c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d004      	beq.n	8002d60 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	4abb      	ldr	r2, [pc, #748]	; (8003054 <UART_SetConfig+0x380>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	0019      	movs	r1, r3
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d72:	430a      	orrs	r2, r1
 8002d74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4ab7      	ldr	r2, [pc, #732]	; (8003058 <UART_SetConfig+0x384>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d134      	bne.n	8002dea <UART_SetConfig+0x116>
 8002d80:	4bb6      	ldr	r3, [pc, #728]	; (800305c <UART_SetConfig+0x388>)
 8002d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d84:	2203      	movs	r2, #3
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d015      	beq.n	8002db8 <UART_SetConfig+0xe4>
 8002d8c:	d304      	bcc.n	8002d98 <UART_SetConfig+0xc4>
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d00a      	beq.n	8002da8 <UART_SetConfig+0xd4>
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d018      	beq.n	8002dc8 <UART_SetConfig+0xf4>
 8002d96:	e01f      	b.n	8002dd8 <UART_SetConfig+0x104>
 8002d98:	231b      	movs	r3, #27
 8002d9a:	2218      	movs	r2, #24
 8002d9c:	4694      	mov	ip, r2
 8002d9e:	44bc      	add	ip, r7
 8002da0:	4463      	add	r3, ip
 8002da2:	2201      	movs	r2, #1
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	e0c5      	b.n	8002f34 <UART_SetConfig+0x260>
 8002da8:	231b      	movs	r3, #27
 8002daa:	2218      	movs	r2, #24
 8002dac:	4694      	mov	ip, r2
 8002dae:	44bc      	add	ip, r7
 8002db0:	4463      	add	r3, ip
 8002db2:	2202      	movs	r2, #2
 8002db4:	701a      	strb	r2, [r3, #0]
 8002db6:	e0bd      	b.n	8002f34 <UART_SetConfig+0x260>
 8002db8:	231b      	movs	r3, #27
 8002dba:	2218      	movs	r2, #24
 8002dbc:	4694      	mov	ip, r2
 8002dbe:	44bc      	add	ip, r7
 8002dc0:	4463      	add	r3, ip
 8002dc2:	2204      	movs	r2, #4
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	e0b5      	b.n	8002f34 <UART_SetConfig+0x260>
 8002dc8:	231b      	movs	r3, #27
 8002dca:	2218      	movs	r2, #24
 8002dcc:	4694      	mov	ip, r2
 8002dce:	44bc      	add	ip, r7
 8002dd0:	4463      	add	r3, ip
 8002dd2:	2208      	movs	r2, #8
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	e0ad      	b.n	8002f34 <UART_SetConfig+0x260>
 8002dd8:	231b      	movs	r3, #27
 8002dda:	2218      	movs	r2, #24
 8002ddc:	4694      	mov	ip, r2
 8002dde:	44bc      	add	ip, r7
 8002de0:	4463      	add	r3, ip
 8002de2:	2210      	movs	r2, #16
 8002de4:	701a      	strb	r2, [r3, #0]
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	e0a4      	b.n	8002f34 <UART_SetConfig+0x260>
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a9c      	ldr	r2, [pc, #624]	; (8003060 <UART_SetConfig+0x38c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d137      	bne.n	8002e64 <UART_SetConfig+0x190>
 8002df4:	4b99      	ldr	r3, [pc, #612]	; (800305c <UART_SetConfig+0x388>)
 8002df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df8:	220c      	movs	r2, #12
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d018      	beq.n	8002e32 <UART_SetConfig+0x15e>
 8002e00:	d802      	bhi.n	8002e08 <UART_SetConfig+0x134>
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d005      	beq.n	8002e12 <UART_SetConfig+0x13e>
 8002e06:	e024      	b.n	8002e52 <UART_SetConfig+0x17e>
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d00a      	beq.n	8002e22 <UART_SetConfig+0x14e>
 8002e0c:	2b0c      	cmp	r3, #12
 8002e0e:	d018      	beq.n	8002e42 <UART_SetConfig+0x16e>
 8002e10:	e01f      	b.n	8002e52 <UART_SetConfig+0x17e>
 8002e12:	231b      	movs	r3, #27
 8002e14:	2218      	movs	r2, #24
 8002e16:	4694      	mov	ip, r2
 8002e18:	44bc      	add	ip, r7
 8002e1a:	4463      	add	r3, ip
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	701a      	strb	r2, [r3, #0]
 8002e20:	e088      	b.n	8002f34 <UART_SetConfig+0x260>
 8002e22:	231b      	movs	r3, #27
 8002e24:	2218      	movs	r2, #24
 8002e26:	4694      	mov	ip, r2
 8002e28:	44bc      	add	ip, r7
 8002e2a:	4463      	add	r3, ip
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	701a      	strb	r2, [r3, #0]
 8002e30:	e080      	b.n	8002f34 <UART_SetConfig+0x260>
 8002e32:	231b      	movs	r3, #27
 8002e34:	2218      	movs	r2, #24
 8002e36:	4694      	mov	ip, r2
 8002e38:	44bc      	add	ip, r7
 8002e3a:	4463      	add	r3, ip
 8002e3c:	2204      	movs	r2, #4
 8002e3e:	701a      	strb	r2, [r3, #0]
 8002e40:	e078      	b.n	8002f34 <UART_SetConfig+0x260>
 8002e42:	231b      	movs	r3, #27
 8002e44:	2218      	movs	r2, #24
 8002e46:	4694      	mov	ip, r2
 8002e48:	44bc      	add	ip, r7
 8002e4a:	4463      	add	r3, ip
 8002e4c:	2208      	movs	r2, #8
 8002e4e:	701a      	strb	r2, [r3, #0]
 8002e50:	e070      	b.n	8002f34 <UART_SetConfig+0x260>
 8002e52:	231b      	movs	r3, #27
 8002e54:	2218      	movs	r2, #24
 8002e56:	4694      	mov	ip, r2
 8002e58:	44bc      	add	ip, r7
 8002e5a:	4463      	add	r3, ip
 8002e5c:	2210      	movs	r2, #16
 8002e5e:	701a      	strb	r2, [r3, #0]
 8002e60:	46c0      	nop			; (mov r8, r8)
 8002e62:	e067      	b.n	8002f34 <UART_SetConfig+0x260>
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a7e      	ldr	r2, [pc, #504]	; (8003064 <UART_SetConfig+0x390>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d107      	bne.n	8002e7e <UART_SetConfig+0x1aa>
 8002e6e:	231b      	movs	r3, #27
 8002e70:	2218      	movs	r2, #24
 8002e72:	4694      	mov	ip, r2
 8002e74:	44bc      	add	ip, r7
 8002e76:	4463      	add	r3, ip
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
 8002e7c:	e05a      	b.n	8002f34 <UART_SetConfig+0x260>
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a79      	ldr	r2, [pc, #484]	; (8003068 <UART_SetConfig+0x394>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d107      	bne.n	8002e98 <UART_SetConfig+0x1c4>
 8002e88:	231b      	movs	r3, #27
 8002e8a:	2218      	movs	r2, #24
 8002e8c:	4694      	mov	ip, r2
 8002e8e:	44bc      	add	ip, r7
 8002e90:	4463      	add	r3, ip
 8002e92:	2200      	movs	r2, #0
 8002e94:	701a      	strb	r2, [r3, #0]
 8002e96:	e04d      	b.n	8002f34 <UART_SetConfig+0x260>
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a6c      	ldr	r2, [pc, #432]	; (8003050 <UART_SetConfig+0x37c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d141      	bne.n	8002f26 <UART_SetConfig+0x252>
 8002ea2:	4b6e      	ldr	r3, [pc, #440]	; (800305c <UART_SetConfig+0x388>)
 8002ea4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ea6:	23c0      	movs	r3, #192	; 0xc0
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2280      	movs	r2, #128	; 0x80
 8002eae:	00d2      	lsls	r2, r2, #3
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d01f      	beq.n	8002ef4 <UART_SetConfig+0x220>
 8002eb4:	2280      	movs	r2, #128	; 0x80
 8002eb6:	00d2      	lsls	r2, r2, #3
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d802      	bhi.n	8002ec2 <UART_SetConfig+0x1ee>
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d009      	beq.n	8002ed4 <UART_SetConfig+0x200>
 8002ec0:	e028      	b.n	8002f14 <UART_SetConfig+0x240>
 8002ec2:	2280      	movs	r2, #128	; 0x80
 8002ec4:	0112      	lsls	r2, r2, #4
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00c      	beq.n	8002ee4 <UART_SetConfig+0x210>
 8002eca:	22c0      	movs	r2, #192	; 0xc0
 8002ecc:	0112      	lsls	r2, r2, #4
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d018      	beq.n	8002f04 <UART_SetConfig+0x230>
 8002ed2:	e01f      	b.n	8002f14 <UART_SetConfig+0x240>
 8002ed4:	231b      	movs	r3, #27
 8002ed6:	2218      	movs	r2, #24
 8002ed8:	4694      	mov	ip, r2
 8002eda:	44bc      	add	ip, r7
 8002edc:	4463      	add	r3, ip
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	e027      	b.n	8002f34 <UART_SetConfig+0x260>
 8002ee4:	231b      	movs	r3, #27
 8002ee6:	2218      	movs	r2, #24
 8002ee8:	4694      	mov	ip, r2
 8002eea:	44bc      	add	ip, r7
 8002eec:	4463      	add	r3, ip
 8002eee:	2202      	movs	r2, #2
 8002ef0:	701a      	strb	r2, [r3, #0]
 8002ef2:	e01f      	b.n	8002f34 <UART_SetConfig+0x260>
 8002ef4:	231b      	movs	r3, #27
 8002ef6:	2218      	movs	r2, #24
 8002ef8:	4694      	mov	ip, r2
 8002efa:	44bc      	add	ip, r7
 8002efc:	4463      	add	r3, ip
 8002efe:	2204      	movs	r2, #4
 8002f00:	701a      	strb	r2, [r3, #0]
 8002f02:	e017      	b.n	8002f34 <UART_SetConfig+0x260>
 8002f04:	231b      	movs	r3, #27
 8002f06:	2218      	movs	r2, #24
 8002f08:	4694      	mov	ip, r2
 8002f0a:	44bc      	add	ip, r7
 8002f0c:	4463      	add	r3, ip
 8002f0e:	2208      	movs	r2, #8
 8002f10:	701a      	strb	r2, [r3, #0]
 8002f12:	e00f      	b.n	8002f34 <UART_SetConfig+0x260>
 8002f14:	231b      	movs	r3, #27
 8002f16:	2218      	movs	r2, #24
 8002f18:	4694      	mov	ip, r2
 8002f1a:	44bc      	add	ip, r7
 8002f1c:	4463      	add	r3, ip
 8002f1e:	2210      	movs	r2, #16
 8002f20:	701a      	strb	r2, [r3, #0]
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	e006      	b.n	8002f34 <UART_SetConfig+0x260>
 8002f26:	231b      	movs	r3, #27
 8002f28:	2218      	movs	r2, #24
 8002f2a:	4694      	mov	ip, r2
 8002f2c:	44bc      	add	ip, r7
 8002f2e:	4463      	add	r3, ip
 8002f30:	2210      	movs	r2, #16
 8002f32:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a45      	ldr	r2, [pc, #276]	; (8003050 <UART_SetConfig+0x37c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d000      	beq.n	8002f40 <UART_SetConfig+0x26c>
 8002f3e:	e09d      	b.n	800307c <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f40:	231b      	movs	r3, #27
 8002f42:	2218      	movs	r2, #24
 8002f44:	4694      	mov	ip, r2
 8002f46:	44bc      	add	ip, r7
 8002f48:	4463      	add	r3, ip
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d00d      	beq.n	8002f6c <UART_SetConfig+0x298>
 8002f50:	dc02      	bgt.n	8002f58 <UART_SetConfig+0x284>
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d005      	beq.n	8002f62 <UART_SetConfig+0x28e>
 8002f56:	e01d      	b.n	8002f94 <UART_SetConfig+0x2c0>
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d012      	beq.n	8002f82 <UART_SetConfig+0x2ae>
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d015      	beq.n	8002f8c <UART_SetConfig+0x2b8>
 8002f60:	e018      	b.n	8002f94 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002f62:	f7fe ff47 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 8002f66:	0003      	movs	r3, r0
 8002f68:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002f6a:	e01b      	b.n	8002fa4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f6c:	4b3b      	ldr	r3, [pc, #236]	; (800305c <UART_SetConfig+0x388>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2210      	movs	r2, #16
 8002f72:	4013      	ands	r3, r2
 8002f74:	d002      	beq.n	8002f7c <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8002f76:	4b3d      	ldr	r3, [pc, #244]	; (800306c <UART_SetConfig+0x398>)
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8002f7a:	e013      	b.n	8002fa4 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002f7c:	4b3c      	ldr	r3, [pc, #240]	; (8003070 <UART_SetConfig+0x39c>)
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002f80:	e010      	b.n	8002fa4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002f82:	f7fe fea9 	bl	8001cd8 <HAL_RCC_GetSysClockFreq>
 8002f86:	0003      	movs	r3, r0
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002f8a:	e00b      	b.n	8002fa4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	021b      	lsls	r3, r3, #8
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002f92:	e007      	b.n	8002fa4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002f94:	2313      	movs	r3, #19
 8002f96:	2218      	movs	r2, #24
 8002f98:	4694      	mov	ip, r2
 8002f9a:	44bc      	add	ip, r7
 8002f9c:	4463      	add	r3, ip
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	701a      	strb	r2, [r3, #0]
        break;
 8002fa2:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d100      	bne.n	8002fac <UART_SetConfig+0x2d8>
 8002faa:	e1a6      	b.n	80032fa <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	0013      	movs	r3, r2
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	189b      	adds	r3, r3, r2
 8002fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d305      	bcc.n	8002fc8 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d907      	bls.n	8002fd8 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8002fc8:	2313      	movs	r3, #19
 8002fca:	2218      	movs	r2, #24
 8002fcc:	4694      	mov	ip, r2
 8002fce:	44bc      	add	ip, r7
 8002fd0:	4463      	add	r3, ip
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	701a      	strb	r2, [r3, #0]
 8002fd6:	e190      	b.n	80032fa <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	613b      	str	r3, [r7, #16]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	6939      	ldr	r1, [r7, #16]
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	000b      	movs	r3, r1
 8002fe6:	0e1b      	lsrs	r3, r3, #24
 8002fe8:	0010      	movs	r0, r2
 8002fea:	0205      	lsls	r5, r0, #8
 8002fec:	431d      	orrs	r5, r3
 8002fee:	000b      	movs	r3, r1
 8002ff0:	021c      	lsls	r4, r3, #8
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	085b      	lsrs	r3, r3, #1
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	68b8      	ldr	r0, [r7, #8]
 8003000:	68f9      	ldr	r1, [r7, #12]
 8003002:	1900      	adds	r0, r0, r4
 8003004:	4169      	adcs	r1, r5
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	2300      	movs	r3, #0
 800300e:	607b      	str	r3, [r7, #4]
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f7fd f904 	bl	8000220 <__aeabi_uldivmod>
 8003018:	0003      	movs	r3, r0
 800301a:	000c      	movs	r4, r1
 800301c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800301e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003020:	4a14      	ldr	r2, [pc, #80]	; (8003074 <UART_SetConfig+0x3a0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d908      	bls.n	8003038 <UART_SetConfig+0x364>
 8003026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003028:	4a13      	ldr	r2, [pc, #76]	; (8003078 <UART_SetConfig+0x3a4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d804      	bhi.n	8003038 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003034:	60da      	str	r2, [r3, #12]
 8003036:	e160      	b.n	80032fa <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8003038:	2313      	movs	r3, #19
 800303a:	2218      	movs	r2, #24
 800303c:	4694      	mov	ip, r2
 800303e:	44bc      	add	ip, r7
 8003040:	4463      	add	r3, ip
 8003042:	2201      	movs	r2, #1
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	e158      	b.n	80032fa <UART_SetConfig+0x626>
 8003048:	efff69f3 	.word	0xefff69f3
 800304c:	ffffcfff 	.word	0xffffcfff
 8003050:	40004800 	.word	0x40004800
 8003054:	fffff4ff 	.word	0xfffff4ff
 8003058:	40013800 	.word	0x40013800
 800305c:	40021000 	.word	0x40021000
 8003060:	40004400 	.word	0x40004400
 8003064:	40004c00 	.word	0x40004c00
 8003068:	40005000 	.word	0x40005000
 800306c:	003d0900 	.word	0x003d0900
 8003070:	00f42400 	.word	0x00f42400
 8003074:	000002ff 	.word	0x000002ff
 8003078:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	69da      	ldr	r2, [r3, #28]
 8003080:	2380      	movs	r3, #128	; 0x80
 8003082:	021b      	lsls	r3, r3, #8
 8003084:	429a      	cmp	r2, r3
 8003086:	d000      	beq.n	800308a <UART_SetConfig+0x3b6>
 8003088:	e0a9      	b.n	80031de <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 800308a:	231b      	movs	r3, #27
 800308c:	2218      	movs	r2, #24
 800308e:	4694      	mov	ip, r2
 8003090:	44bc      	add	ip, r7
 8003092:	4463      	add	r3, ip
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b08      	cmp	r3, #8
 8003098:	d86d      	bhi.n	8003176 <UART_SetConfig+0x4a2>
 800309a:	009a      	lsls	r2, r3, #2
 800309c:	4b9f      	ldr	r3, [pc, #636]	; (800331c <UART_SetConfig+0x648>)
 800309e:	18d3      	adds	r3, r2, r3
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80030a4:	f7fe fea6 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 80030a8:	0003      	movs	r3, r0
 80030aa:	005a      	lsls	r2, r3, #1
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	085b      	lsrs	r3, r3, #1
 80030b2:	18d2      	adds	r2, r2, r3
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	0019      	movs	r1, r3
 80030ba:	0010      	movs	r0, r2
 80030bc:	f7fd f824 	bl	8000108 <__udivsi3>
 80030c0:	0003      	movs	r3, r0
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030c6:	e05e      	b.n	8003186 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80030c8:	f7fe feaa 	bl	8001e20 <HAL_RCC_GetPCLK2Freq>
 80030cc:	0003      	movs	r3, r0
 80030ce:	005a      	lsls	r2, r3, #1
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	085b      	lsrs	r3, r3, #1
 80030d6:	18d2      	adds	r2, r2, r3
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	0019      	movs	r1, r3
 80030de:	0010      	movs	r0, r2
 80030e0:	f7fd f812 	bl	8000108 <__udivsi3>
 80030e4:	0003      	movs	r3, r0
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030ea:	e04c      	b.n	8003186 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030ec:	4b8c      	ldr	r3, [pc, #560]	; (8003320 <UART_SetConfig+0x64c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2210      	movs	r2, #16
 80030f2:	4013      	ands	r3, r2
 80030f4:	d00e      	beq.n	8003114 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	085b      	lsrs	r3, r3, #1
 80030fc:	4a89      	ldr	r2, [pc, #548]	; (8003324 <UART_SetConfig+0x650>)
 80030fe:	189a      	adds	r2, r3, r2
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	0019      	movs	r1, r3
 8003106:	0010      	movs	r0, r2
 8003108:	f7fc fffe 	bl	8000108 <__udivsi3>
 800310c:	0003      	movs	r3, r0
 800310e:	b29b      	uxth	r3, r3
 8003110:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8003112:	e038      	b.n	8003186 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	085b      	lsrs	r3, r3, #1
 800311a:	4a83      	ldr	r2, [pc, #524]	; (8003328 <UART_SetConfig+0x654>)
 800311c:	189a      	adds	r2, r3, r2
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	0019      	movs	r1, r3
 8003124:	0010      	movs	r0, r2
 8003126:	f7fc ffef 	bl	8000108 <__udivsi3>
 800312a:	0003      	movs	r3, r0
 800312c:	b29b      	uxth	r3, r3
 800312e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003130:	e029      	b.n	8003186 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003132:	f7fe fdd1 	bl	8001cd8 <HAL_RCC_GetSysClockFreq>
 8003136:	0003      	movs	r3, r0
 8003138:	005a      	lsls	r2, r3, #1
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	085b      	lsrs	r3, r3, #1
 8003140:	18d2      	adds	r2, r2, r3
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	0019      	movs	r1, r3
 8003148:	0010      	movs	r0, r2
 800314a:	f7fc ffdd 	bl	8000108 <__udivsi3>
 800314e:	0003      	movs	r3, r0
 8003150:	b29b      	uxth	r3, r3
 8003152:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003154:	e017      	b.n	8003186 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	085b      	lsrs	r3, r3, #1
 800315c:	2280      	movs	r2, #128	; 0x80
 800315e:	0252      	lsls	r2, r2, #9
 8003160:	189a      	adds	r2, r3, r2
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	0019      	movs	r1, r3
 8003168:	0010      	movs	r0, r2
 800316a:	f7fc ffcd 	bl	8000108 <__udivsi3>
 800316e:	0003      	movs	r3, r0
 8003170:	b29b      	uxth	r3, r3
 8003172:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003174:	e007      	b.n	8003186 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003176:	2313      	movs	r3, #19
 8003178:	2218      	movs	r2, #24
 800317a:	4694      	mov	ip, r2
 800317c:	44bc      	add	ip, r7
 800317e:	4463      	add	r3, ip
 8003180:	2201      	movs	r2, #1
 8003182:	701a      	strb	r2, [r3, #0]
        break;
 8003184:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	2b0f      	cmp	r3, #15
 800318a:	d920      	bls.n	80031ce <UART_SetConfig+0x4fa>
 800318c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318e:	4a67      	ldr	r2, [pc, #412]	; (800332c <UART_SetConfig+0x658>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d81c      	bhi.n	80031ce <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003196:	b29a      	uxth	r2, r3
 8003198:	200a      	movs	r0, #10
 800319a:	2418      	movs	r4, #24
 800319c:	193b      	adds	r3, r7, r4
 800319e:	181b      	adds	r3, r3, r0
 80031a0:	210f      	movs	r1, #15
 80031a2:	438a      	bics	r2, r1
 80031a4:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a8:	085b      	lsrs	r3, r3, #1
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2207      	movs	r2, #7
 80031ae:	4013      	ands	r3, r2
 80031b0:	b299      	uxth	r1, r3
 80031b2:	193b      	adds	r3, r7, r4
 80031b4:	181b      	adds	r3, r3, r0
 80031b6:	193a      	adds	r2, r7, r4
 80031b8:	1812      	adds	r2, r2, r0
 80031ba:	8812      	ldrh	r2, [r2, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	193a      	adds	r2, r7, r4
 80031c6:	1812      	adds	r2, r2, r0
 80031c8:	8812      	ldrh	r2, [r2, #0]
 80031ca:	60da      	str	r2, [r3, #12]
 80031cc:	e095      	b.n	80032fa <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 80031ce:	2313      	movs	r3, #19
 80031d0:	2218      	movs	r2, #24
 80031d2:	4694      	mov	ip, r2
 80031d4:	44bc      	add	ip, r7
 80031d6:	4463      	add	r3, ip
 80031d8:	2201      	movs	r2, #1
 80031da:	701a      	strb	r2, [r3, #0]
 80031dc:	e08d      	b.n	80032fa <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 80031de:	231b      	movs	r3, #27
 80031e0:	2218      	movs	r2, #24
 80031e2:	4694      	mov	ip, r2
 80031e4:	44bc      	add	ip, r7
 80031e6:	4463      	add	r3, ip
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d86a      	bhi.n	80032c4 <UART_SetConfig+0x5f0>
 80031ee:	009a      	lsls	r2, r3, #2
 80031f0:	4b4f      	ldr	r3, [pc, #316]	; (8003330 <UART_SetConfig+0x65c>)
 80031f2:	18d3      	adds	r3, r2, r3
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80031f8:	f7fe fdfc 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 80031fc:	0002      	movs	r2, r0
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	085b      	lsrs	r3, r3, #1
 8003204:	18d2      	adds	r2, r2, r3
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	0019      	movs	r1, r3
 800320c:	0010      	movs	r0, r2
 800320e:	f7fc ff7b 	bl	8000108 <__udivsi3>
 8003212:	0003      	movs	r3, r0
 8003214:	b29b      	uxth	r3, r3
 8003216:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003218:	e05c      	b.n	80032d4 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800321a:	f7fe fe01 	bl	8001e20 <HAL_RCC_GetPCLK2Freq>
 800321e:	0002      	movs	r2, r0
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	085b      	lsrs	r3, r3, #1
 8003226:	18d2      	adds	r2, r2, r3
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	0019      	movs	r1, r3
 800322e:	0010      	movs	r0, r2
 8003230:	f7fc ff6a 	bl	8000108 <__udivsi3>
 8003234:	0003      	movs	r3, r0
 8003236:	b29b      	uxth	r3, r3
 8003238:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800323a:	e04b      	b.n	80032d4 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800323c:	4b38      	ldr	r3, [pc, #224]	; (8003320 <UART_SetConfig+0x64c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2210      	movs	r2, #16
 8003242:	4013      	ands	r3, r2
 8003244:	d00e      	beq.n	8003264 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	085b      	lsrs	r3, r3, #1
 800324c:	4a39      	ldr	r2, [pc, #228]	; (8003334 <UART_SetConfig+0x660>)
 800324e:	189a      	adds	r2, r3, r2
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	0019      	movs	r1, r3
 8003256:	0010      	movs	r0, r2
 8003258:	f7fc ff56 	bl	8000108 <__udivsi3>
 800325c:	0003      	movs	r3, r0
 800325e:	b29b      	uxth	r3, r3
 8003260:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8003262:	e037      	b.n	80032d4 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	085b      	lsrs	r3, r3, #1
 800326a:	4a33      	ldr	r2, [pc, #204]	; (8003338 <UART_SetConfig+0x664>)
 800326c:	189a      	adds	r2, r3, r2
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	0019      	movs	r1, r3
 8003274:	0010      	movs	r0, r2
 8003276:	f7fc ff47 	bl	8000108 <__udivsi3>
 800327a:	0003      	movs	r3, r0
 800327c:	b29b      	uxth	r3, r3
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003280:	e028      	b.n	80032d4 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003282:	f7fe fd29 	bl	8001cd8 <HAL_RCC_GetSysClockFreq>
 8003286:	0002      	movs	r2, r0
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	085b      	lsrs	r3, r3, #1
 800328e:	18d2      	adds	r2, r2, r3
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	0019      	movs	r1, r3
 8003296:	0010      	movs	r0, r2
 8003298:	f7fc ff36 	bl	8000108 <__udivsi3>
 800329c:	0003      	movs	r3, r0
 800329e:	b29b      	uxth	r3, r3
 80032a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032a2:	e017      	b.n	80032d4 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	085b      	lsrs	r3, r3, #1
 80032aa:	2280      	movs	r2, #128	; 0x80
 80032ac:	0212      	lsls	r2, r2, #8
 80032ae:	189a      	adds	r2, r3, r2
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	0019      	movs	r1, r3
 80032b6:	0010      	movs	r0, r2
 80032b8:	f7fc ff26 	bl	8000108 <__udivsi3>
 80032bc:	0003      	movs	r3, r0
 80032be:	b29b      	uxth	r3, r3
 80032c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032c2:	e007      	b.n	80032d4 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80032c4:	2313      	movs	r3, #19
 80032c6:	2218      	movs	r2, #24
 80032c8:	4694      	mov	ip, r2
 80032ca:	44bc      	add	ip, r7
 80032cc:	4463      	add	r3, ip
 80032ce:	2201      	movs	r2, #1
 80032d0:	701a      	strb	r2, [r3, #0]
        break;
 80032d2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d6:	2b0f      	cmp	r3, #15
 80032d8:	d908      	bls.n	80032ec <UART_SetConfig+0x618>
 80032da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032dc:	4a13      	ldr	r2, [pc, #76]	; (800332c <UART_SetConfig+0x658>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d804      	bhi.n	80032ec <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032e8:	60da      	str	r2, [r3, #12]
 80032ea:	e006      	b.n	80032fa <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 80032ec:	2313      	movs	r3, #19
 80032ee:	2218      	movs	r2, #24
 80032f0:	4694      	mov	ip, r2
 80032f2:	44bc      	add	ip, r7
 80032f4:	4463      	add	r3, ip
 80032f6:	2201      	movs	r2, #1
 80032f8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	2200      	movs	r2, #0
 80032fe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	2200      	movs	r2, #0
 8003304:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003306:	2313      	movs	r3, #19
 8003308:	2218      	movs	r2, #24
 800330a:	4694      	mov	ip, r2
 800330c:	44bc      	add	ip, r7
 800330e:	4463      	add	r3, ip
 8003310:	781b      	ldrb	r3, [r3, #0]
}
 8003312:	0018      	movs	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	b00e      	add	sp, #56	; 0x38
 8003318:	bdb0      	pop	{r4, r5, r7, pc}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	08003658 	.word	0x08003658
 8003320:	40021000 	.word	0x40021000
 8003324:	007a1200 	.word	0x007a1200
 8003328:	01e84800 	.word	0x01e84800
 800332c:	0000ffff 	.word	0x0000ffff
 8003330:	0800367c 	.word	0x0800367c
 8003334:	003d0900 	.word	0x003d0900
 8003338:	00f42400 	.word	0x00f42400

0800333c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	2201      	movs	r2, #1
 800334a:	4013      	ands	r3, r2
 800334c:	d00b      	beq.n	8003366 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	4a4a      	ldr	r2, [pc, #296]	; (8003480 <UART_AdvFeatureConfig+0x144>)
 8003356:	4013      	ands	r3, r2
 8003358:	0019      	movs	r1, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	2202      	movs	r2, #2
 800336c:	4013      	ands	r3, r2
 800336e:	d00b      	beq.n	8003388 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4a43      	ldr	r2, [pc, #268]	; (8003484 <UART_AdvFeatureConfig+0x148>)
 8003378:	4013      	ands	r3, r2
 800337a:	0019      	movs	r1, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	2204      	movs	r2, #4
 800338e:	4013      	ands	r3, r2
 8003390:	d00b      	beq.n	80033aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4a3b      	ldr	r2, [pc, #236]	; (8003488 <UART_AdvFeatureConfig+0x14c>)
 800339a:	4013      	ands	r3, r2
 800339c:	0019      	movs	r1, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	2208      	movs	r2, #8
 80033b0:	4013      	ands	r3, r2
 80033b2:	d00b      	beq.n	80033cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4a34      	ldr	r2, [pc, #208]	; (800348c <UART_AdvFeatureConfig+0x150>)
 80033bc:	4013      	ands	r3, r2
 80033be:	0019      	movs	r1, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	2210      	movs	r2, #16
 80033d2:	4013      	ands	r3, r2
 80033d4:	d00b      	beq.n	80033ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	4a2c      	ldr	r2, [pc, #176]	; (8003490 <UART_AdvFeatureConfig+0x154>)
 80033de:	4013      	ands	r3, r2
 80033e0:	0019      	movs	r1, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	2220      	movs	r2, #32
 80033f4:	4013      	ands	r3, r2
 80033f6:	d00b      	beq.n	8003410 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	4a25      	ldr	r2, [pc, #148]	; (8003494 <UART_AdvFeatureConfig+0x158>)
 8003400:	4013      	ands	r3, r2
 8003402:	0019      	movs	r1, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	2240      	movs	r2, #64	; 0x40
 8003416:	4013      	ands	r3, r2
 8003418:	d01d      	beq.n	8003456 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	4a1d      	ldr	r2, [pc, #116]	; (8003498 <UART_AdvFeatureConfig+0x15c>)
 8003422:	4013      	ands	r3, r2
 8003424:	0019      	movs	r1, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003436:	2380      	movs	r3, #128	; 0x80
 8003438:	035b      	lsls	r3, r3, #13
 800343a:	429a      	cmp	r2, r3
 800343c:	d10b      	bne.n	8003456 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	4a15      	ldr	r2, [pc, #84]	; (800349c <UART_AdvFeatureConfig+0x160>)
 8003446:	4013      	ands	r3, r2
 8003448:	0019      	movs	r1, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	2280      	movs	r2, #128	; 0x80
 800345c:	4013      	ands	r3, r2
 800345e:	d00b      	beq.n	8003478 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	4a0e      	ldr	r2, [pc, #56]	; (80034a0 <UART_AdvFeatureConfig+0x164>)
 8003468:	4013      	ands	r3, r2
 800346a:	0019      	movs	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	605a      	str	r2, [r3, #4]
  }
}
 8003478:	46c0      	nop			; (mov r8, r8)
 800347a:	46bd      	mov	sp, r7
 800347c:	b002      	add	sp, #8
 800347e:	bd80      	pop	{r7, pc}
 8003480:	fffdffff 	.word	0xfffdffff
 8003484:	fffeffff 	.word	0xfffeffff
 8003488:	fffbffff 	.word	0xfffbffff
 800348c:	ffff7fff 	.word	0xffff7fff
 8003490:	ffffefff 	.word	0xffffefff
 8003494:	ffffdfff 	.word	0xffffdfff
 8003498:	ffefffff 	.word	0xffefffff
 800349c:	ff9fffff 	.word	0xff9fffff
 80034a0:	fff7ffff 	.word	0xfff7ffff

080034a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80034b2:	f7fd fcf5 	bl	8000ea0 <HAL_GetTick>
 80034b6:	0003      	movs	r3, r0
 80034b8:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2208      	movs	r2, #8
 80034c2:	4013      	ands	r3, r2
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d10d      	bne.n	80034e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	2380      	movs	r3, #128	; 0x80
 80034cc:	0399      	lsls	r1, r3, #14
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	4b16      	ldr	r3, [pc, #88]	; (800352c <UART_CheckIdleState+0x88>)
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	0013      	movs	r3, r2
 80034d6:	2200      	movs	r2, #0
 80034d8:	f000 f82a 	bl	8003530 <UART_WaitOnFlagUntilTimeout>
 80034dc:	1e03      	subs	r3, r0, #0
 80034de:	d001      	beq.n	80034e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e01f      	b.n	8003524 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2204      	movs	r2, #4
 80034ec:	4013      	ands	r3, r2
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d10d      	bne.n	800350e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	2380      	movs	r3, #128	; 0x80
 80034f6:	03d9      	lsls	r1, r3, #15
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	4b0c      	ldr	r3, [pc, #48]	; (800352c <UART_CheckIdleState+0x88>)
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	0013      	movs	r3, r2
 8003500:	2200      	movs	r2, #0
 8003502:	f000 f815 	bl	8003530 <UART_WaitOnFlagUntilTimeout>
 8003506:	1e03      	subs	r3, r0, #0
 8003508:	d001      	beq.n	800350e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e00a      	b.n	8003524 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2270      	movs	r2, #112	; 0x70
 800351e:	2100      	movs	r1, #0
 8003520:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	0018      	movs	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	b004      	add	sp, #16
 800352a:	bd80      	pop	{r7, pc}
 800352c:	01ffffff 	.word	0x01ffffff

08003530 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	1dfb      	adds	r3, r7, #7
 800353e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003540:	e029      	b.n	8003596 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	3301      	adds	r3, #1
 8003546:	d026      	beq.n	8003596 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003548:	f7fd fcaa 	bl	8000ea0 <HAL_GetTick>
 800354c:	0002      	movs	r2, r0
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	429a      	cmp	r2, r3
 8003556:	d302      	bcc.n	800355e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d11b      	bne.n	8003596 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4915      	ldr	r1, [pc, #84]	; (80035c0 <UART_WaitOnFlagUntilTimeout+0x90>)
 800356a:	400a      	ands	r2, r1
 800356c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2101      	movs	r1, #1
 800357a:	438a      	bics	r2, r1
 800357c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2220      	movs	r2, #32
 8003582:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2270      	movs	r2, #112	; 0x70
 800358e:	2100      	movs	r1, #0
 8003590:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e00f      	b.n	80035b6 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	4013      	ands	r3, r2
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	425a      	negs	r2, r3
 80035a6:	4153      	adcs	r3, r2
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	001a      	movs	r2, r3
 80035ac:	1dfb      	adds	r3, r7, #7
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d0c6      	beq.n	8003542 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	0018      	movs	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b004      	add	sp, #16
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	fffffe5f 	.word	0xfffffe5f

080035c4 <__libc_init_array>:
 80035c4:	b570      	push	{r4, r5, r6, lr}
 80035c6:	2600      	movs	r6, #0
 80035c8:	4d0c      	ldr	r5, [pc, #48]	; (80035fc <__libc_init_array+0x38>)
 80035ca:	4c0d      	ldr	r4, [pc, #52]	; (8003600 <__libc_init_array+0x3c>)
 80035cc:	1b64      	subs	r4, r4, r5
 80035ce:	10a4      	asrs	r4, r4, #2
 80035d0:	42a6      	cmp	r6, r4
 80035d2:	d109      	bne.n	80035e8 <__libc_init_array+0x24>
 80035d4:	2600      	movs	r6, #0
 80035d6:	f000 f821 	bl	800361c <_init>
 80035da:	4d0a      	ldr	r5, [pc, #40]	; (8003604 <__libc_init_array+0x40>)
 80035dc:	4c0a      	ldr	r4, [pc, #40]	; (8003608 <__libc_init_array+0x44>)
 80035de:	1b64      	subs	r4, r4, r5
 80035e0:	10a4      	asrs	r4, r4, #2
 80035e2:	42a6      	cmp	r6, r4
 80035e4:	d105      	bne.n	80035f2 <__libc_init_array+0x2e>
 80035e6:	bd70      	pop	{r4, r5, r6, pc}
 80035e8:	00b3      	lsls	r3, r6, #2
 80035ea:	58eb      	ldr	r3, [r5, r3]
 80035ec:	4798      	blx	r3
 80035ee:	3601      	adds	r6, #1
 80035f0:	e7ee      	b.n	80035d0 <__libc_init_array+0xc>
 80035f2:	00b3      	lsls	r3, r6, #2
 80035f4:	58eb      	ldr	r3, [r5, r3]
 80035f6:	4798      	blx	r3
 80035f8:	3601      	adds	r6, #1
 80035fa:	e7f2      	b.n	80035e2 <__libc_init_array+0x1e>
 80035fc:	080036a8 	.word	0x080036a8
 8003600:	080036a8 	.word	0x080036a8
 8003604:	080036a8 	.word	0x080036a8
 8003608:	080036ac 	.word	0x080036ac

0800360c <memset>:
 800360c:	0003      	movs	r3, r0
 800360e:	1812      	adds	r2, r2, r0
 8003610:	4293      	cmp	r3, r2
 8003612:	d100      	bne.n	8003616 <memset+0xa>
 8003614:	4770      	bx	lr
 8003616:	7019      	strb	r1, [r3, #0]
 8003618:	3301      	adds	r3, #1
 800361a:	e7f9      	b.n	8003610 <memset+0x4>

0800361c <_init>:
 800361c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003622:	bc08      	pop	{r3}
 8003624:	469e      	mov	lr, r3
 8003626:	4770      	bx	lr

08003628 <_fini>:
 8003628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800362e:	bc08      	pop	{r3}
 8003630:	469e      	mov	lr, r3
 8003632:	4770      	bx	lr
